#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FBaseballBallScrambleProperties.h"
#include "BB_BallAnnouncerVO_FBB_BallAnnouncerVO.h"
#include "GameResult_ENUMS.h"
#include "SportsScramble_FBaseballInstrumentEntryProperties.h"
#include "BB_InstrumentAnnouncerVO_FBB_InstrumentAnnouncerVO.h"
#include "ChallengeBase_AChallengeBase_C.h"
#include "SportsScramble_ENUMS.h"
#include "BB_ScoreboardVideos_ENUMS.h"
#include "UMG_ENUMS.h"
#include "BB_ScramIconSetting_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAudioComponent; };
namespace CG::SportsScramble { class UActorSet; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::SportsScramble { class ABaseballInstrument; };
namespace CG::ScramSportManagerBaseball_Blueprint { class AScramSportManagerBaseball_Blueprint_C; };
namespace CG::Engine { class AActor; };
namespace CG::BB_Scoreboard_Large_BP { class ABB_Scoreboard_Large_BP_C; };
namespace CG::BB_Scoreboard_Training_BP { class ABB_Scoreboard_Training_BP_C; };
namespace CG::BB_Scoreboard_TopTimer_BP { class ABB_Scoreboard_TopTimer_BP_C; };
namespace CG::SportsScramble { class AScramInstrument; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BB_Challenge_Base
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Challenges/Baseball/BB_Challenge_Base.BB_Challenge_Base_C
     * Size -> 0x00F8 (FullSize[0x0590] - InheritedSize[0x0498])
     */
    class ABB_Challenge_Base_C : public ChallengeBase::AChallengeBase_C
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UAudioComponent*                                     Audio_Scored;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_CountdownOnly;                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_And;                                               //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        SportsScramble::UActorSet*                                   ActorSetInstruments;                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_MiniGameIntroMusic;                                //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        SportsScramble::UActorSet*                                   ActorSetBalls;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_BowlingMusic;                                      //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        bool                                                         LevelWon;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      ID;                                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_And_VO;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::AScramBall*                                  BallClass;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::UActorSet*                                   ActorSet_Instruments;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> BallList;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<BB_BallAnnouncerVO::FBB_BallAnnouncerVO>  BallVOList;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        int32_t                                                      GameLength;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         GameOver;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        GameResult::EGameResult                                      ChallengeResult;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::ABaseballInstrument*                         InstrumentClass;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<SportsScramble::FBaseballInstrumentEntryProperties> InstrumentList;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<BB_InstrumentAnnouncerVO::FBB_InstrumentAnnouncerVO> InstrumentVOList;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        ScramSportManagerBaseball_Blueprint::AScramSportManagerBaseball_Blueprint_C* BB_NormalSportManager;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          Scoreboards;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BB_Scoreboard_Large_BP::ABB_Scoreboard_Large_BP_C*           LargeScoreboard;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<BB_Scoreboard_Training_BP::ABB_Scoreboard_Training_BP_C*> TrainingScorebards;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BasicTypes::TArray<BB_Scoreboard_TopTimer_BP::ABB_Scoreboard_TopTimer_BP_C*> TopTimers;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        int32_t                                                      ScoreFontSize;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      TimerFontSize;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void AddActorToGameElementList(Engine::AActor* Actor, bool* Callback);
        void Shutdown(bool* ShutdownBegun);
        void BB_CHG_05_SportManagerPlayerPitching();
        void BB_CHG_UpdateScore(int32_t score);
        void BB_CHG_SpawnSportManagerWithAI(bool OverrideBattingSkill, SportsScramble::EScramSkill OverrideSkill);
        void BB_CHG_SwapBatIcon(SportsScramble::AScramInstrument* InstrumentClass);
        void BB_CHG_GetBatList();
        void BB_CHG_CalculateEndScore(bool Countdown, int32_t CurrentScore, int32_t TargetScore);
        void BB_CHG_SwapBallIcon(SportsScramble::AScramBall* BallClass);
        void BB_CHG_GetBallList();
        void Initialize();
        void UserConstructionScript();
        void BB_CHG_ShowScoreboardAnimation(BB_ScoreboardVideos::EBB_ScoreboardVideos Animation);
        void BB_CHG_SetScoreMaterialAndFont(int32_t FontSize);
        void BB_CHG_SetScoreVisibility(UMG::ESlateVisibility Visibility);
        void BB_CHG_AttachTrainingScoreboard();
        void SetScoreTimerTime(int32_t Seconds, int32_t FontSize);
        void AttachTopTimer();
        void BaseballGameCompleted(bool LocalPlayerVictory, int32_t AwayScore, int32_t HomeScore);
        void ReceiveBeginPlay();
        void EndOfGame();
        void ShowBaseballBallIcon();
        void BB_StartIntroCadence(bool UseChallengeMusic, bool UseCountdown, bool HomeTeam);
        void BB_TriggerCountdown();
        void ShowBaseballInstrumentIcon();
        void BB_ShowInstrumentAndBallIcons(BB_ScramIconSetting::EBB_ScramIconSetting Settings);
        void TriggerAlternateCadence();
        void ExecuteUbergraph_BB_Challenge_Base(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Challenges/Baseball/BB_Challenge_Base.BB_Challenge_Base_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
