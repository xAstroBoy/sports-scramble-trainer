#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FBox.h"
#include "Engine_AActor.h"
#include "SportsScramble_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::BB_Mitt { class ABB_Mitt_C; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };
namespace CG::BB_Strikezone { class ABB_Strikezone_C; };
namespace CG::BB_PitchTarget { class ABB_PitchTarget_C; };
namespace CG::BallLauncher { class ABallLauncher_C; };
namespace CG::BB_Equipment_Set { class ABB_Equipment_Set_C; };
namespace CG::BB_PitchingPropManager { class ABB_PitchingPropManager_C; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::SportsScramble { class AScramPrimitiveActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BB_Minigame_Pitching_Base
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Minigames/Baseball/BB_Minigame_Pitching_Base.BB_Minigame_Pitching_Base_C
     * Size -> 0x0119 (FullSize[0x0441] - InheritedSize[0x0328])
     */
    class ABB_Minigame_Pitching_Base_C : public Engine::AActor
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::USceneComponent*                                     DefaultSceneRoot;                                        //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          GameElements;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        ScramGameInstance::UScramGameInstance_C*                     GameInstance;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_Strikezone::ABB_Strikezone_C*                             strikeZone;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Strikes;                                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Balls;                                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_PitchTarget::ABB_PitchTarget_C*                           PitchTarget;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         ShowBallCount;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         ResetScoreOnBall;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         UpdateScoreBoard;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BallLauncher::ABallLauncher_C*                               BallLauncher;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        delayBeforeThrow;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::AActor*                                              CurrentBallInPlay;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_Equipment_Set::ABB_Equipment_Set_C*                       EquipmentSet;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         EquipmentGrabbed;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        float                                                        DelayAfterThrow;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         LauncherCanLaunch;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      TargetsHit;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         UpdateTargetsHitScore;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      CurrentBallMaxBounces;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      CurrentBallBounces;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         Player;                                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0004[0xC];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      PitchingLocation;                                        //  Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FBox                                            PitchingMinArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FBox                                            PitchingMaxArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        BB_PitchingPropManager::ABB_PitchingPropManager_C*           PitchingPropManager;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         CurrentBallRollingPitch;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

    public:
        void AddActorToGameElementList(Engine::AActor* Actor, bool* Callback);
        void ShutDown(bool* ShutdownBegun);
        void ClearCurrentBall();
        void GetMaxBounces(Engine::AActor* Actor, int32_t* Result, bool* RollingPitch);
        void UpdatePitchTargetScoreboard();
        void ResetPitchingScoreboard(bool ShowBallCount);
        void CleanupScoreboards();
        void SpawnGameElements(bool UseStrikeZone, bool PlayStrikezoneSounds, bool SpawnTargets, bool DisplayStrikezoneText, bool ShowQuad);
        void UpdatePitchingScoreboard(bool ShowBallCount);
        void Initialize();
        void UserConstructionScript();
        void ReceiveBeginPlay();
        void DelayDestroy();
        void ThrowBallAtPlayer(float delayBeforeThrow, float DelayAfterThrow);
        void BallLaunched(Engine::AActor* Ball);
        void EquipmentGrabbedByPlayer(Engine::AActor* DominantHand, BB_Mitt::ABB_Mitt_C* Mitt);
        void TeleportComplete();
        void NoTeleport();
        void SpawnEquipmentSet();
        void GameReadyRunOperations();
        void ActiveBallScramHit(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void BallCaughtEvent(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void StrikeZoneHit(SportsScramble::ABaseballBall* Ball, SportsScramble::EScramStrikeResult Result);
        void BallThrown(SportsScramble::ABaseballBall* Ball);
        void CurrentBallInvalidated(CoreUObject::UObject* WorldContextObject);
        void BallDropped(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void ActiveBallDestroyed(SportsScramble::AScramPrimitiveActor* DestroyedPrimitive);
        void ExecuteUbergraph_BB_Minigame_Pitching_Base(int32_t EntryPoint);
        void EquipmentGrabbed__DelegateSignature();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Minigames/Baseball/BB_Minigame_Pitching_Base.BB_Minigame_Pitching_Base_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
