#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FBox.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_TMap.h"
#include "GameResult_ENUMS.h"
#include "BasicTypes_FName.h"
#include "TrainingBase_ATrainingBase_C.h"
#include "SportsScramble_ENUMS.h"
#include "BB_ScoreboardVideos_ENUMS.h"
#include "UMG_ENUMS.h"
#include "InputCore_FKey.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAudioComponent; };
namespace CG::Engine { class AActor; };
namespace CG::BB_Strikezone { class ABB_Strikezone_C; };
namespace CG::BB_Equipment_Set { class ABB_Equipment_Set_C; };
namespace CG::SportsScramble { class AScramPlayerHand; };
namespace CG::BB_Minigame_PracticeSportManager { class ABB_Minigame_PracticeSportManager_C; };
namespace CG::BB_Mitt { class ABB_Mitt_C; };
namespace CG::BaseballAICatcher_Blueprint { class ABaseballAICatcher_Blueprint_C; };
namespace CG::BB_Scoreboard_Training_BP { class ABB_Scoreboard_Training_BP_C; };
namespace CG::BaseballBallSelector_BP { class ABaseballBallSelector_BP_C; };
namespace CG::BattingTee { class ABattingTee_C; };
namespace CG::BB_BallLauncher { class ABB_BallLauncher_C; };
namespace CG::BB_StadiumWindowSpawner { class ABB_StadiumWindowSpawner_C; };
namespace CG::BB_BattingTarget { class ABB_BattingTarget_C; };
namespace CG::BB_Scoreboard_Large_BP { class ABB_Scoreboard_Large_BP_C; };
namespace CG::TennisTrainingScrambleTargetGroup { class ATennisTrainingScrambleTargetGroup_C; };
namespace CG::LauncherBarrier_Blueprint { class ALauncherBarrier_Blueprint_C; };
namespace CG::BaseballBallScrambleDisplay_BP { class ABaseballBallScrambleDisplay_BP_C; };
namespace CG::BB_BasketBall { class ABB_BasketBall_C; };
namespace CG::BaseballAIBatter_NeverMiss_Blueprint { class ABaseballAIBatter_NeverMiss_Blueprint_C; };
namespace CG::BallSelector_Listener { class ABallSelector_Listener_C; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::BB_Ball_Base { class ABB_Ball_Base_C; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BB_Train_Base
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Training/Baseball/BB_Train_Base.BB_Train_Base_C
     * Size -> 0x0217 (FullSize[0x0630] - InheritedSize[0x0419])
     */
    class ABB_Train_Base_C : public TrainingBase::ATrainingBase_C
    {
    public:
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UAudioComponent*                                     Audio_Scored;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          Scoreboards;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        bool                                                         PitchingTraining;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0001[0xF];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      PitchingLocation;                                        //  Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FBox                                            PitchingMinArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FBox                                            PitchingMaxArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        BB_Strikezone::ABB_Strikezone_C*                             strikeZone;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_Equipment_Set::ABB_Equipment_Set_C*                       EquipmentSet;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::AScramPlayerHand*                            PreferredHand;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         LeftHanded;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_Minigame_PracticeSportManager::ABB_Minigame_PracticeSportManager_C* SportManager;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_Mitt::ABB_Mitt_C*                                         PitchersMitt;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BaseballAICatcher_Blueprint::ABaseballAICatcher_Blueprint_C* CatcherActor;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<BB_Scoreboard_Training_BP::ABB_Scoreboard_Training_BP_C*> TrainingScorebards;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BaseballBallSelector_BP::ABaseballBallSelector_BP_C*         PitchTarget;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BattingTee::ABattingTee_C*                                   BattingTee;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_BallLauncher::ABB_BallLauncher_C*                         BallLauncher;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        horizontalVariance;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        verticalVariance;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TargetRegionLeftMargin;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TargetRegionRightMargin;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TargetRegionTopMargin;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TargetRegionBottomMargin;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_StadiumWindowSpawner::ABB_StadiumWindowSpawner_C*         WindowSpawner;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      OutfieldTargetScoreAmt;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0003[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_BattingTarget::ABB_BattingTarget_C*                       OutfieldTargetSpawner;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0004[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      BattingLocation;                                         //  Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor
        BB_Scoreboard_Large_BP::ABB_Scoreboard_Large_BP_C*           LargeScoreboard;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        TennisTrainingScrambleTargetGroup::ATennisTrainingScrambleTargetGroup_C* BB_ScrambleTargetGroup;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        LauncherBarrier_Blueprint::ALauncherBarrier_Blueprint_C*     LauncherBarrier;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BaseballBallScrambleDisplay_BP::ABaseballBallScrambleDisplay_BP_C* BallScrambleDisplay;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         LaunchTargetLocation;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         TrainingModeIsBatting;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         CatcherPresent;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0005[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TMap<Engine::AActor*, int32_t>                   BounceCounts;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BB_BasketBall::ABB_BasketBall_C*                             TheBasketball;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        GameResult::EGameResult                                      TrainingResult;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0006[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BaseballAIBatter_NeverMiss_Blueprint::ABaseballAIBatter_NeverMiss_Blueprint_C* NeverMissBatter;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BallSelector_Listener::ABallSelector_Listener_C*             PitchingTargetListener;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         TimerExposed;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0007[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            PrefaceScoreText;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void AddActorToGameElementList(Engine::AActor* Actor, bool* Callback);
        void ShutDown(bool* ShutdownBegun);
        void BB_SpawnPitchTargetListener();
        void BB_TNG_SpawnNeverMissBatter();
        void BB_TNG_TrackBasketballBounces(BB_BasketBall::ABB_BasketBall_C* Basketball, bool* DestroyBasketball);
        void BB_SpawnPitchingEquipment();
        void BB_SpawnBBScrambleDisplay();
        void BB_SpawnLauncherBarrier();
        void BB_SpawnScrambleTargets();
        void BB_GetBattingSide(SportsScramble::EBattingSide* Side);
        void BB_UpdateLargeScoreboardScore(int32_t score, bool Player2);
        void BB_TeleportBatter();
        void BB_SpawnOutfieldTarget();
        void BB_SpawnWindows(bool ShowTargetScore);
        void BB_SpawnBattingCage();
        void BB_SpawnLauncher();
        void BB_SpawnPitchTarget();
        void BB_MakeStrikezoneVisible();
        void BB_UpdateTrainingScoreboardCount(int32_t score);
        void BB_UpdateTrainingScoreboardScore(int32_t score);
        void BB_CalculateEndScore();
        void SpawnPitchingEquipment_DEPRECATED();
        void ClearScoreboards();
        void Initialize();
        void UserConstructionScript();
        void ShowScoreboardAnimation(BB_ScoreboardVideos::EBB_ScoreboardVideos Animation);
        void SetScoreMaterialAndFont(int32_t FontSize);
        void SetScoreVisibility(UMG::ESlateVisibility Visibility);
        void AttachTrainingScoreboard();
        void BindToScoring();
        void PlayerHitSingle();
        void PlayerHitDouble();
        void PlayerHitTriple();
        void PlayerHitHomerun(bool BasesLoaded);
        void UnbindScoring();
        void TrainingTargetHit(SportsScramble::EBaseballScrambleTargetLocations Location);
        void BB_OutfieldTargetHit(SportsScramble::AScramBall* Ball, int32_t TargetId);
        void BB_BallLaunched(Engine::AActor* LaunchedBall);
        void Strikezone_Strike();
        void Strikezone_Ball();
        void SportMgr_CatcherThrewBall(SportsScramble::ABaseballBall* Ball);
        void SportMgr_PitcherReady();
        void HitFloorCollision(BB_Ball_Base::ABB_Ball_Base_C* Ball, const CoreUObject::FVector& HitLocation);
        void CatcherCaughtBall();
        void PitchTargetHit();
        void ReceiveBeginPlay();
        void EndOfGame();
        void PlayerMoved();
        void NoTeleport();
        void ReadyForTraining();
        void BB_EquipmentGrabbed(Engine::AActor* DominantHand, BB_Mitt::ABB_Mitt_C* Mitt);
        void PitcherCaughtSomething(SportsScramble::UScramEventBasePayload* Payload);
        void BB_ResetScoreboards();
        void LargeScoreboard_TrainingProgress();
        void PitcherMittReleasedBall(Engine::AActor* TouchedActor, const InputCore::FKey& ButtonReleased);
        void OpenTravelCapsule(float Delay);
        void CloseTravelCapsule();
        void ExecuteUbergraph_BB_Train_Base(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Training/Baseball/BB_Train_Base.BB_Train_Base_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
