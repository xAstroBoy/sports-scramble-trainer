#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "Engine_ENUMS.h"
#include "Engine_FDataTableRowHandle.h"
#include "CoreUObject_FVector.h"
#include "SportsScramble_ENUMS.h"
#include "BP_TrophyGrabbableBase_ABP_TrophyGrabbableBase_C.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::Engine { class USceneComponent; };
namespace CG::UMG { class UWidgetComponent; };
namespace CG::Engine { class UBoxComponent; };
namespace CG::Engine { class UTimelineComponent; };
namespace CG::InfoDisplay { class AInfoDisplay_C; };
namespace CG::BP_TrophyRoomMonitorDisplay { class ABP_TrophyRoomMonitorDisplay_C; };
namespace CG::CubbyEffect { class ACubbyEffect_C; };
namespace CG::TrophyProp_Base { class ATrophyProp_Base_C; };
namespace CG::SportsScramble { class ATrophyAwardListenerBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BP_TrophyGrabbable
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Trophy/BP_TrophyGrabbable.BP_TrophyGrabbable_C
     * Size -> 0x00B8 (FullSize[0x0C20] - InheritedSize[0x0B68])
     */
    class ABP_TrophyGrabbable_C : public BP_TrophyGrabbableBase::ABP_TrophyGrabbableBase_C
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UStaticMeshComponent*                                Cubbie;                                                  //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     Pivot;                                                   //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        UMG::UWidgetComponent*                                       Widget;                                                  //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UBoxComponent*                                       Box;                                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        float                                                        Timeline_0_0_NewTrack_0_B5FAF22A4DFEB85A4A7758BB4FF27E7B; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::ETimelineDirection                                   Timeline_0_0__Direction_B5FAF22A4DFEB85A4A7758BB4FF27E7B; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTimelineComponent*                                  Timeline_0_1;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        InfoDisplay::AInfoDisplay_C*                                 DisplayActor;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BP_TrophyRoomMonitorDisplay::ABP_TrophyRoomMonitorDisplay_C* MonitorDisplay;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CubbyEffect::ACubbyEffect_C*                                 CubbyEffect;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CubbyEffect::ACubbyEffect_C*                                 CubbyEffectClass;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::FDataTableRowHandle                                  TrophyDataEntry;                                         //  Edit, BlueprintVisible, NoDestructor
        bool                                                         ForceTrophyEarn;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         ForceShowTrophy;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        TrophyProp_Base::ATrophyProp_Base_C*                         TrophyProp;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         PivotRotationOffset;                                     //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         CubbiePositionLoc;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         SportColor;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::EScramSport                                  SportType;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::ATrophyAwardListenerBase*                    trophyaward;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      CurrentProgress;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      TrophyRequirement;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         respawning;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        HapticScale;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void PlayHaptic();
        void GetTrophyAwardListener(SportsScramble::ATrophyAwardListenerBase* trophyaward);
        void InitializeCubbieMaterial();
        void InitColor();
        void InitializeWidget();
        void SpawnTrophyProp(bool* wasCreated);
        void SpawnHighlighters();
        void SetTrophyInstanceVisibility(bool instanceVisible);
        void GetIntegerRowInDataTable(const BasicTypes::FName& Name, int32_t* Order);
        void DoRespawn();
        void CheckTrophyEarned();
        void HideDisplay();
        void ShowInfoOnDisplay();
        void SetHighlight(bool lightOn);
        void InitializeDataTable();
        void UserConstructionScript();
        void Timeline_0_0__FinishedFunc();
        void Timeline_0_0__UpdateFunc();
        void OnStopPointingAt();
        void OnStartPointingAt();
        void OnTrophyRespawnToOriginalPosition();
        void SetVisibility(bool visible);
        void OnTrophyGrabbed();
        void OnTrophyReleased();
        void Play_SFX_Highlight();
        void Init();
        void Play_Grab_SFX();
        void DestroyTrophy();
        void ExecuteUbergraph_BP_TrophyGrabbable(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Trophy/BP_TrophyGrabbable.BP_TrophyGrabbable_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
