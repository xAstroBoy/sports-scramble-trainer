#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::BasicTypes
{
    /**
     * 
     * Size -> 0x0000
     */
    template<typename ElementType, int32_t MaxTotalElements, int32_t ElementsPerChunk>
    class TStaticIndirectArrayThreadSafeRead
    {
    private:
        static const constexpr int32_t                               ChunkTableSize = (MaxTotalElements + ElementsPerChunk - 1) / ElementsPerChunk;
        ElementType**                                                Chunks[ChunkTableSize];
        int32_t                                                      NumElements;
        int32_t                                                      NumChunks;

    private:
        ElementType* GetItemPtr(int32_t index) const
        {
            int32_t ChunkIndex = index / ElementsPerChunk;
            int32_t WithinChunkIndex = index % ElementsPerChunk;
            ElementType* Chunk = (*Chunks)[ChunkIndex];
            int offset = WithinChunkIndex * 0x8;
            uintptr_t ptrAddress = *reinterpret_cast<uintptr_t*>(reinterpret_cast<uint8_t*>(Chunk) + offset);
            ElementType* ItemPtr = reinterpret_cast<ElementType*>(ptrAddress);
            return ItemPtr;
        }
    public:
        int32_t Count()
        {
            return NumElements;
        }
        bool IsValidIndex(int32_t index) const
        {
            return index < Count() && index >= 0;
        }
        ElementType* operator[](int32_t index) const
        {
            ElementType* ItemPtr = GetItemPtr(index);
            return ItemPtr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
