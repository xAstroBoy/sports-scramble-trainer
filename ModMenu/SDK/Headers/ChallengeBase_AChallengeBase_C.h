#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_FName.h"
#include "TN_RuleTypes_ENUMS.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_AScramActor.h"
#include "BB_ScramIconSetting_ENUMS.h"
#include "Engine_ENUMS.h"
#include "ResultsData_FResultsData.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAudioComponent; };
namespace CG::Engine { class USceneComponent; };
namespace CG::InfoDisplay { class AInfoDisplay_C; };
namespace CG::Announcer_BP { class AAnnouncer_BP_C; };
namespace CG::Engine { class AActor; };
namespace CG::Countdown { class ACountdown_C; };
namespace CG::Engine { class USoundBase; };
namespace CG::TN_PassNPlay_ScrambleTargetGroup { class ATN_PassNPlay_ScrambleTargetGroup_C; };
namespace CG::Announcer_AnimBP { class UAnnouncer_AnimBP_C; };
namespace CG::BW_PassNPlay_ScrambleTargetGroup { class ABW_PassNPlay_ScrambleTargetGroup_C; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };
namespace CG::BB_PassNPlay_ScrambleTargetGroup { class ABB_PassNPlay_ScrambleTargetGroup_C; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ChallengeBase
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Challenges/ChallengeBase.ChallengeBase_C
     * Size -> 0x0150 (FullSize[0x0498] - InheritedSize[0x0348])
     */
    class AChallengeBase_C : public SportsScramble::AScramActor
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UAudioComponent*                                     Audio_MaxFastness;                                       //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_MoreFaster;                                        //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_Faster;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_ChallengeMusic;                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_Countdown;                                         //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_BackgroundMusic;                                   //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     Root;                                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         ChallengeLevelComplete;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        InfoDisplay::AInfoDisplay_C*                                 InfoPanel;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Announcer_BP::AAnnouncer_BP_C*                               Announcer;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          GameElements;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        Countdown::ACountdown_C*                                     CountdownActor;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          Audio_TryAgain;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::FText                                            InstructionalText01;                                     //  Edit, BlueprintVisible, DisableEditOnInstance
        BasicTypes::FText                                            InstructionalText02;                                     //  Edit, BlueprintVisible, DisableEditOnInstance
        Engine::USoundBase*                                          SFX_StartOfMatchMusic;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      TargetScore;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      CurrentScore;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<BasicTypes::FName>                        AnnouncerAudioList;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        bool                                                         AnnouncerSitIdle;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        TN_PassNPlay_ScrambleTargetGroup::ATN_PassNPlay_ScrambleTargetGroup_C* TN_IconGroup;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Announcer_AnimBP::UAnnouncer_AnimBP_C*                       AnnouncerAnimBP;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        LoopingMusicDelay;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BW_PassNPlay_ScrambleTargetGroup::ABW_PassNPlay_ScrambleTargetGroup_C* BW_IconGroup;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ScramGameInstance::UScramGameInstance_C*                     GameInstance;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         TrophyRequirementMet;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_PassNPlay_ScrambleTargetGroup::ABB_PassNPlay_ScrambleTargetGroup_C* BB_IconGroup;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         OpenCapsuleOnSpawn;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USoundBase*                                          SFX_StingerLose;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          SFX_StingerWin;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         RestartedChallenge;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_TN_SF_ScramBalls;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_TN_SF_ScramRackets;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_TN_SF_ScramCourt;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        TN_RuleTypes::ETN_RuleTypes                                  Save_TN_SF_Ruleset;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      Save_TN_SF_GamesToWin;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         Save_BW_SF_ScramBalls;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_BW_SF_ScramLanes;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_BW_SF_SpecialBalls;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        TN_RuleTypes::ETN_RuleTypes                                  Save_BW_SF_Ruleset;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         Save_BB_FilterScramBalls;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_BB_FilterScramBats;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         Save_BB_QP_HomeTeam;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0005[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      Save_BB_FilterStrikeoutCount;                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Save_BB_FilterWalkCount;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Save_BB_FilterInnings;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Save_TN_SF_PointsToWin;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::EDifficulty                                  Save_TN_SF_AI_Difficulty;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::EDifficulty                                  Save_BW_SF_AI_Difficulty;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::EDifficulty                                  Save_BB_AI_Difficulty;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::EDifficulty                                  Challenge_AI_Difficulty;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void PlayResultMusic(bool Succeeded);
        void EarnChallengeTrophy();
        void SaveIntroHasPlayed();
        void CheckIntroHasPlayed(bool* IntroHasPlayed);
        void DestroyAllBalls();
        void BB_SpawnScrambleIcon(BB_ScramIconSetting::EBB_ScramIconSetting Settings);
        void AwardTrophy(int32_t CurrentScore);
        void SpawnAnnouncerPaired(BasicTypes::TArray<BasicTypes::FName>* AnnouncerPairedList);
        void VerifyNotMultiplayerGame(bool* NotMultiplayer);
        void BW_SpawnScrambleIcon();
        void DestroyPopupInfo();
        void DemoDisplayInfo(float Display_Time, const BasicTypes::FText& Display_Text);
        void SpawnDemoCountdown();
        void SetAnnouncerIdle();
        void TN_SpawnScrambleIcons();
        void CleanUpGameElements();
        void SpawnCountDown(float CountdownDelay, float GoShrinkDelay, Countdown::ACountdown_C** CountdownActor);
        void SpawnAnnouncerActor(BasicTypes::TArray<BasicTypes::FName>* AnnouncerAudioList);
        void SpawnPopupInfo(const BasicTypes::FText& Text, float DisplayTime);
        void UserConstructionScript();
        void RestoreAllSportSettings();
        void SetTempChallengeSettings();
        void AnnouncerReady();
        void DisplayStartOfMatchInfo(bool FadeInOutMusic);
        void ReceiveBeginPlay();
        void EndOfGame();
        void MusicFadeOut();
        void MusicFadeIn();
        void VoiceClipEnd();
        void ResumeAnnouncer();
        void AnnouncerPaused();
        void SaveAllSportSettings();
        void AnnouncerPresenting();
        void AnnouncerDonePresenting();
        void AnnouncerPlayingSequence(const BasicTypes::FName& SequenceName);
        void NotifyChallengeContinue(Engine::AActor* DestroyedActor);
        void ShowDemoInstructions();
        void AnnouncerPairedComplete();
        void AnnouncerExitSequenceComplete();
        void HandleSuccess(int32_t CurrentScore);
        void HandleFailure();
        void CloseTravelCapsule();
        void ReceiveEndPlay(Engine::EEndPlayReason EndPlayReason);
        void ExecuteUbergraph_ChallengeBase(int32_t EntryPoint);
        void ChallengeLevelComplete__DelegateSignature(const ResultsData::FResultsData& Results);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Challenges/ChallengeBase.ChallengeBase_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
