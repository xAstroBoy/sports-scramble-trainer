#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::CoreUObject
{
    /**
     * ScriptStruct /Script/CoreUObject.Vector
     * Size -> 0x000C
     */
    struct FVector
    {
    public:
        float                                                        X;                                                       //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Y;                                                       //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Z;                                                       //  Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

    public:
        FVector();
        FVector(float x, float y, float z);
        CoreUObject::FVector operator +(float scalar) const;
        CoreUObject::FVector operator +(const CoreUObject::FVector& other) const;
        CoreUObject::FVector operator -(float scalar) const;
        CoreUObject::FVector operator -(const CoreUObject::FVector& other) const;
        CoreUObject::FVector operator *(float scalar) const;
        CoreUObject::FVector operator *(const CoreUObject::FVector& other) const;
        CoreUObject::FVector operator /(float scalar) const;
        CoreUObject::FVector operator /(const CoreUObject::FVector& other) const;
        CoreUObject::FVector& operator =(const CoreUObject::FVector& other);
        CoreUObject::FVector& operator +=(float scalar);
        CoreUObject::FVector& operator +=(const CoreUObject::FVector& other);
        CoreUObject::FVector& operator -=(float scalar);
        CoreUObject::FVector& operator -=(const CoreUObject::FVector& other);
        CoreUObject::FVector& operator *=(const CoreUObject::FVector& other);
        CoreUObject::FVector& operator *=(float scalar);
        bool IsValid();
        void Normalize360(CoreUObject::FVector& angle);
        float Dot(const CoreUObject::FVector& b) const;
        float MagnitudeSqr() const;
        float Magnitude() const;
        CoreUObject::FVector Unit() const;
        CoreUObject::FRotator ToRotator() const;
        float Distance(const CoreUObject::FVector& v) const;
        float DistanceMeter(CoreUObject::FVector& v) const;
        friend bool operator ==(const CoreUObject::FVector& first, const CoreUObject::FVector& second)
        {
            return first.X == second.X && first.Y == second.Y && first.Z == second.Z;
        }
        friend bool operator !=(const CoreUObject::FVector& first, const CoreUObject::FVector& second)
        {
            return !(first == second);
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
