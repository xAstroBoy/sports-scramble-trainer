#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_TArray.h"
#include "InstrumentSFXOverride_FInstrumentSFXOverride.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_ADodgeballInstrument.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAudioComponent; };
namespace CG::Engine { class UTimelineComponent; };
namespace CG::Engine { class USoundBase; };
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::DB_Instrument_Base
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Instruments/Dodgeball/DB_Instrument_Base.DB_Instrument_Base_C
     * Size -> 0x006A (FullSize[0x0DAA] - InheritedSize[0x0D40])
     */
    class ADB_Instrument_Base_C : public SportsScramble::ADodgeballInstrument
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UAudioComponent*                                     AudioBallHit;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        float                                                        Grow_Scale_B0F8A0DC4B690B959BF5D69DC73F0AB2;             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::ETimelineDirection                                   Grow__Direction_B0F8A0DC4B690B959BF5D69DC73F0AB2;        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTimelineComponent*                                  Grow;                                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        Shrink_Scale_EA95E14D4B3913E8ED8DD1939D3C6505;           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::ETimelineDirection                                   Shrink__Direction_EA95E14D4B3913E8ED8DD1939D3C6505;      //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTimelineComponent*                                  Shrink;                                                  //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         InitialScale;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USoundBase*                                          DefaultBallHItSFX;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          DefaultBallHItHardSFX;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        HardHitSpeedThreshold;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        MinimumHitSpeedThreshold;                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<InstrumentSFXOverride::FInstrumentSFXOverride> SFXOverrides;                                            //  Edit, BlueprintVisible, ZeroConstructor
        bool                                                         InitialPhysicsOff;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        SportsScramble::EScramInstrumentHitPhysics                   OldHitPhysics;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void BallHitRacket(float BallSpeed, Engine::AActor* BallClass, SportsScramble::AScramBall* Ball, bool* Callback);
        void SetSFXOverride(Engine::AActor* BallClass, bool HardHit);
        void PlayBallHitSound(float BallSpeed, Engine::AActor* BallClass);
        void InitInstrument();
        void UserConstructionScript();
        void Grow__FinishedFunc();
        void Grow__UpdateFunc();
        void Shrink__FinishedFunc();
        void Shrink__UpdateFunc();
        void ShowInstrument();
        void ShrinkRemoveInstrument();
        void ReceiveBeginPlay();
        void InstrumentReleased(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void DestroyPrimitive(bool playOut, float Delay);
        void ExecuteUbergraph_DB_Instrument_Base(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Instruments/Dodgeball/DB_Instrument_Base.DB_Instrument_Base_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
