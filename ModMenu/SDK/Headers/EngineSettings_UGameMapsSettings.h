#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FSoftObjectPath.h"
#include "BasicTypes_FString.h"
#include "EngineSettings_ENUMS.h"
#include "CoreUObject_FSoftClassPath.h"
#include "BasicTypes_TArray.h"
#include "EngineSettings_FGameModeName.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::EngineSettings
{
    /**
     * Class /Script/EngineSettings.GameMapsSettings
     * Size -> 0x00E0 (FullSize[0x0108] - InheritedSize[0x0028])
     */
    class UGameMapsSettings : public CoreUObject::UObject
    {
    public:
        CoreUObject::FSoftObjectPath                                 EditorStartupMap;                                        //  Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FString                                          LocalMapOptions;                                         //  Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FSoftObjectPath                                 TransitionMap;                                           //  Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseSplitscreen;                                         //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        EngineSettings::ETwoPlayerSplitScreenType                    TwoPlayerSplitscreenLayout;                              //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        EngineSettings::EThreePlayerSplitScreenType                  ThreePlayerSplitscreenLayout;                            //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        EngineSettings::EFourPlayerSplitScreenType                   FourPlayerSplitscreenLayout;                             //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bOffsetPlayerGamepadIds;                                 //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FSoftClassPath                                  GameInstanceClass;                                       //  Edit, ZeroConstructor, Config, NoClear, NativeAccessSpecifierPublic
        CoreUObject::FSoftObjectPath                                 GameDefaultMap;                                          //  Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftObjectPath                                 ServerDefaultMap;                                        //  Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FSoftClassPath                                  GlobalDefaultGameMode;                                   //  Edit, ZeroConstructor, Config, NoClear, NativeAccessSpecifierPrivate
        CoreUObject::FSoftClassPath                                  GlobalDefaultServerGameMode;                             //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPrivate
        BasicTypes::TArray<EngineSettings::FGameModeName>            GameModeMapPrefixes;                                     //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPrivate
        BasicTypes::TArray<EngineSettings::FGameModeName>            GameModeClassAliases;                                    //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPrivate

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/EngineSettings.GameMapsSettings");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
