#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FActorTickFunction.h"
#include "Engine_ENUMS.h"
#include "Engine_FRepMovement.h"
#include "Engine_FRepAttachment.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TWeakObjectPtr.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "CoreUObject_UObject.h"
#include "CoreUObject_FVector.h"
#include "Engine_FHitResult.h"
#include "InputCore_FKey.h"
#include "InputCore_ENUMS.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UInputComponent; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class AMatineeActor; };
namespace CG::Engine { class UChildActorComponent; };
namespace CG::Engine { class UActorComponent; };
namespace CG::Engine { class UDamageType; };
namespace CG::Engine { class AController; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.Actor
     * Size -> 0x0300 (FullSize[0x0328] - InheritedSize[0x0028])
     */
    class AActor : public CoreUObject::UObject
    {
    public:
        Engine::FActorTickFunction                                   PrimaryActorTick;                                        //  Edit, DisableEditOnInstance, NativeAccessSpecifierPublic
        bool                                                         bHidden : 1;                                             //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNetTemporary : 1;                                       //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNetStartup : 1;                                         //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bOnlyRelevantToOwner : 1;                                //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAlwaysRelevant : 1;                                     //  BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bReplicateMovement : 1;                                  //  BIT_FIELD Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bTearOff : 1;                                            //  BIT_FIELD Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bExchangedRoles : 1;                                     //  BIT_FIELD Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCanBeDamaged : 1;                                       //  BIT_FIELD Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bBlockInput : 1;                                         //  BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoDestroyWhenFinished : 1;                            //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAllowTickBeforeBeginPlay : 1;                           //  BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNetUseOwnerRelevancy : 1;                               //  BIT_FIELD Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bRelevantForNetworkReplays : 1;                          //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNetLoadOnClient : 1;                                    //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bReplayRewindable : 1;                                   //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIsEditorOnlyActor : 1;                                  //  BIT_FIELD Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bReplicates : 1;                                         //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bActorSeamlessTraveled : 1;                              //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableAutoLODGeneration : 1;                            //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bGenerateOverlapEventsDuringLevelStreaming : 1;          //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bFindCameraComponentWhenViewTarget : 1;                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCollideWhenPlacing : 1;                                 //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIgnoresOriginShifting : 1;                              //  BIT_FIELD Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCanBeInCluster : 1;                                     //  BIT_FIELD Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bAllowReceiveTickEventOnDedicatedServer : 1;             //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         UnknownData_0000 : 6;                                    //  BIT_FIELD (PADDING)
        bool                                                         bActorEnableCollision : 1;                               //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bActorIsBeingDestroyed : 1;                              //  BIT_FIELD Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::ENetRole                                             RemoteRole;                                              //  Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FRepMovement                                         ReplicatedMovement;                                      //  Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic
        float                                                        InitialLifeSpan;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        CustomTimeDilation;                                      //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FRepAttachment                                       AttachmentReplication;                                   //  Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        Engine::AActor*                                              Owner;                                                   //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::FName                                            NetDriverName;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::ENetRole                                             Role;                                                    //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ENetDormancy                                         NetDormancy;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ESpawnActorCollisionHandlingMethod                   SpawnCollisionHandlingMethod;                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::EAutoReceiveInput                                    AutoReceiveInput;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      InputPriority;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UInputComponent*                                     InputComponent;                                          //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        NetCullDistanceSquared;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      NetTag;                                                  //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        NetUpdateFrequency;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        MinNetUpdateFrequency;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        NetPriority;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::APawn*                                               Instigator;                                              //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::AActor*>                          Children;                                                //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        Engine::USceneComponent*                                     RootComponent;                                           //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::AMatineeActor*>                   ControllingMatineeActors;                                //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        Layers;                                                  //  ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TWeakObjectPtr<Engine::UChildActorComponent>     ParentComponent;                                         //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<BasicTypes::FName>                        Tags;                                                    //  Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnTakeAnyDamage;                                         //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnTakePointDamage;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnTakeRadialDamage;                                      //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnActorBeginOverlap;                                     //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnActorEndOverlap;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnBeginCursorOver;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnEndCursorOver;                                         //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnClicked;                                               //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnReleased;                                              //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnInputTouchBegin;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnInputTouchEnd;                                         //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnInputTouchEnter;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnInputTouchLeave;                                       //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnActorHit;                                              //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnDestroyed;                                             //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::UScriptMulticastDelegate                         OnEndPlay;                                               //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x60];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::UActorComponent*>                 InstanceComponents;                                      //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UActorComponent*>                 BlueprintCreatedComponents;                              //  ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0006[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        bool WasRecentlyRendered(float Tolerance);
        void UserConstructionScript();
        void TearOff();
        void SnapRootComponentTo(Engine::AActor* InParentActor, const BasicTypes::FName& InSocketName);
        void SetTickGroup(Engine::ETickingGroup NewTickGroup);
        void SetTickableWhenPaused(bool bTickableWhenPaused);
        void SetReplicates(bool bInReplicates);
        void SetReplicateMovement(bool bInReplicateMovement);
        void SetOwner(Engine::AActor* NewOwner);
        void SetNetDormancy(Engine::ENetDormancy NewDormancy);
        void SetLifeSpan(float InLifespan);
        void SetActorTickInterval(float TickInterval);
        void SetActorTickEnabled(bool bEnabled);
        void SetActorScale3D(const CoreUObject::FVector& NewScale3D);
        void SetActorRelativeScale3D(const CoreUObject::FVector& NewRelativeScale);
        void SetActorHiddenInGame(bool bNewHidden);
        void SetActorEnableCollision(bool bNewActorEnableCollision);
        void RemoveTickPrerequisiteComponent(Engine::UActorComponent* PrerequisiteComponent);
        void RemoveTickPrerequisiteActor(Engine::AActor* PrerequisiteActor);
        void ReceiveTick(float DeltaSeconds);
        void ReceiveRadialDamage(float DamageReceived, Engine::UDamageType* DamageType, const CoreUObject::FVector& Origin, const Engine::FHitResult& HitInfo, Engine::AController* InstigatedBy, Engine::AActor* DamageCauser);
        void ReceivePointDamage(float Damage, Engine::UDamageType* DamageType, const CoreUObject::FVector& HitLocation, const CoreUObject::FVector& HitNormal, Engine::UPrimitiveComponent* HitComponent, const BasicTypes::FName& BoneName, const CoreUObject::FVector& ShotFromDirection, Engine::AController* InstigatedBy, Engine::AActor* DamageCauser, const Engine::FHitResult& HitInfo);
        void ReceiveHit(Engine::UPrimitiveComponent* MyComp, Engine::AActor* Other, Engine::UPrimitiveComponent* OtherComp, bool bSelfMoved, const CoreUObject::FVector& HitLocation, const CoreUObject::FVector& HitNormal, const CoreUObject::FVector& NormalImpulse, const Engine::FHitResult& Hit);
        void ReceiveEndPlay(Engine::EEndPlayReason EndPlayReason);
        void ReceiveDestroyed();
        void ReceiveBeginPlay();
        void ReceiveAnyDamage(float Damage, Engine::UDamageType* DamageType, Engine::AController* InstigatedBy, Engine::AActor* DamageCauser);
        void ReceiveActorOnReleased(const InputCore::FKey& ButtonReleased);
        void ReceiveActorOnInputTouchLeave(InputCore::ETouchIndex FingerIndex);
        void ReceiveActorOnInputTouchEnter(InputCore::ETouchIndex FingerIndex);
        void ReceiveActorOnInputTouchEnd(InputCore::ETouchIndex FingerIndex);
        void ReceiveActorOnInputTouchBegin(InputCore::ETouchIndex FingerIndex);
        void ReceiveActorOnClicked(const InputCore::FKey& ButtonPressed);
        void ReceiveActorEndOverlap(Engine::AActor* OtherActor);
        void ReceiveActorEndCursorOver();
        void ReceiveActorBeginOverlap(Engine::AActor* OtherActor);
        void ReceiveActorBeginCursorOver();
        void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);
        void OnRep_ReplicateMovement();
        void OnRep_ReplicatedMovement();
        void OnRep_Owner();
        void OnRep_Instigator();
        void OnRep_AttachmentReplication();
        void MakeNoise(float Loudness, Engine::APawn* NoiseInstigator, const CoreUObject::FVector& NoiseLocation, float MaxRange, const BasicTypes::FName& Tag);
        Engine::UMaterialInstanceDynamic* MakeMIDForMaterial(Engine::UMaterialInterface* Parent);
        bool K2_TeleportTo(const CoreUObject::FVector& DestLocation, const CoreUObject::FRotator& DestRotation);
        bool K2_SetActorTransform(const CoreUObject::FTransform& NewTransform, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        bool K2_SetActorRotation(const CoreUObject::FRotator& NewRotation, bool bTeleportPhysics);
        void K2_SetActorRelativeTransform(const CoreUObject::FTransform& NewRelativeTransform, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_SetActorRelativeRotation(const CoreUObject::FRotator& NewRelativeRotation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_SetActorRelativeLocation(const CoreUObject::FVector& NewRelativeLocation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        bool K2_SetActorLocationAndRotation(const CoreUObject::FVector& NewLocation, const CoreUObject::FRotator& NewRotation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        bool K2_SetActorLocation(const CoreUObject::FVector& NewLocation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_OnReset();
        void K2_OnEndViewTarget(Engine::APlayerController* PC);
        void K2_OnBecomeViewTarget(Engine::APlayerController* PC);
        Engine::USceneComponent* K2_GetRootComponent();
        CoreUObject::FRotator K2_GetActorRotation();
        CoreUObject::FVector K2_GetActorLocation();
        void K2_DetachFromActor(Engine::EDetachmentRule LocationRule, Engine::EDetachmentRule RotationRule, Engine::EDetachmentRule ScaleRule);
        void K2_DestroyComponent(Engine::UActorComponent* Component);
        void K2_DestroyActor();
        void K2_AttachToComponent(Engine::USceneComponent* Parent, const BasicTypes::FName& SocketName, Engine::EAttachmentRule LocationRule, Engine::EAttachmentRule RotationRule, Engine::EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
        void K2_AttachToActor(Engine::AActor* ParentActor, const BasicTypes::FName& SocketName, Engine::EAttachmentRule LocationRule, Engine::EAttachmentRule RotationRule, Engine::EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
        void K2_AttachRootComponentToActor(Engine::AActor* InParentActor, const BasicTypes::FName& InSocketName, Engine::EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
        void K2_AttachRootComponentTo(Engine::USceneComponent* InParent, const BasicTypes::FName& InSocketName, Engine::EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
        void K2_AddActorWorldTransform(const CoreUObject::FTransform& DeltaTransform, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_AddActorWorldRotation(const CoreUObject::FRotator& DeltaRotation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_AddActorWorldOffset(const CoreUObject::FVector& DeltaLocation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_AddActorLocalTransform(const CoreUObject::FTransform& NewTransform, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_AddActorLocalRotation(const CoreUObject::FRotator& DeltaRotation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        void K2_AddActorLocalOffset(const CoreUObject::FVector& DeltaLocation, bool bSweep, Engine::FHitResult* SweepHitResult, bool bTeleport);
        bool IsOverlappingActor(Engine::AActor* Other);
        bool IsChildActor();
        bool IsActorTickEnabled();
        bool IsActorBeingDestroyed();
        bool HasAuthority();
        float GetVerticalDistanceTo(Engine::AActor* OtherActor);
        CoreUObject::FVector GetVelocity();
        CoreUObject::FTransform GetTransform();
        bool GetTickableWhenPaused();
        float GetSquaredDistanceTo(Engine::AActor* OtherActor);
        Engine::ENetRole GetRemoteRole();
        Engine::UChildActorComponent* GetParentComponent();
        Engine::AActor* GetParentActor();
        Engine::AActor* GetOwner();
        void GetOverlappingComponents(BasicTypes::TArray<Engine::UPrimitiveComponent*>* OverlappingComponents);
        void GetOverlappingActors(BasicTypes::TArray<Engine::AActor*>* OverlappingActors, Engine::AActor* ClassFilter);
        Engine::ENetRole GetLocalRole();
        float GetLifeSpan();
        Engine::AController* GetInstigatorController();
        Engine::APawn* GetInstigator();
        CoreUObject::FVector GetInputVectorAxisValue(const InputCore::FKey& InputAxisKey);
        float GetInputAxisValue(const BasicTypes::FName& InputAxisName);
        float GetInputAxisKeyValue(const InputCore::FKey& InputAxisKey);
        float GetHorizontalDotProductTo(Engine::AActor* OtherActor);
        float GetHorizontalDistanceTo(Engine::AActor* OtherActor);
        float GetGameTimeSinceCreation();
        float GetDotProductTo(Engine::AActor* OtherActor);
        float GetDistanceTo(Engine::AActor* OtherActor);
        BasicTypes::TArray<Engine::UActorComponent*> GetComponentsByTag(Engine::UActorComponent* ComponentClass, const BasicTypes::FName& Tag);
        BasicTypes::TArray<Engine::UActorComponent*> GetComponentsByClass(Engine::UActorComponent* ComponentClass);
        Engine::UActorComponent* GetComponentByClass(Engine::UActorComponent* ComponentClass);
        BasicTypes::FName GetAttachParentSocketName();
        Engine::AActor* GetAttachParentActor();
        void GetAttachedActors(BasicTypes::TArray<Engine::AActor*>* OutActors);
        void GetAllChildActors(BasicTypes::TArray<Engine::AActor*>* ChildActors, bool bIncludeDescendants);
        CoreUObject::FVector GetActorUpVector();
        float GetActorTimeDilation();
        float GetActorTickInterval();
        CoreUObject::FVector GetActorScale3D();
        CoreUObject::FVector GetActorRightVector();
        CoreUObject::FVector GetActorRelativeScale3D();
        CoreUObject::FVector GetActorForwardVector();
        void GetActorEyesViewPoint(CoreUObject::FVector* OutLocation, CoreUObject::FRotator* OutRotation);
        bool GetActorEnableCollision();
        void GetActorBounds(bool bOnlyCollidingComponents, CoreUObject::FVector* Origin, CoreUObject::FVector* BoxExtent);
        void ForceNetUpdate();
        void FlushNetDormancy();
        void EnableInput(Engine::APlayerController* PlayerController);
        void DisableInput(Engine::APlayerController* PlayerController);
        void DetachRootComponentFromParent(bool bMaintainWorldPosition);
        void AddTickPrerequisiteComponent(Engine::UActorComponent* PrerequisiteComponent);
        void AddTickPrerequisiteActor(Engine::AActor* PrerequisiteActor);
        Engine::UActorComponent* AddComponent(const BasicTypes::FName& TemplateName, bool bManualAttachment, const CoreUObject::FTransform& RelativeTransform, CoreUObject::UObject* ComponentTemplateContext);
        bool ActorHasTag(const BasicTypes::FName& Tag);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.Actor");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
