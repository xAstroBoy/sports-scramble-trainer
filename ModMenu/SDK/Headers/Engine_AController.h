#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FRotator.h"
#include "Engine_AActor.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerState; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class ACharacter; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UDamageType; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.Controller
     * Size -> 0x0080 (FullSize[0x03A8] - InheritedSize[0x0328])
     */
    class AController : public Engine::AActor
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::APlayerState*                                        PlayerState;                                             //  BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UScriptMulticastDelegate                         OnInstigatedAnyDamage;                                   //  ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic
        BasicTypes::FName                                            StateName;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APawn*                                               Pawn;                                                    //  Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::ACharacter*                                          Character;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        Engine::USceneComponent*                                     TransformComponent;                                      //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FRotator                                        ControlRotation;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected
        bool                                                         bAttachToPawn : 1;                                       //  BIT_FIELD Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bIsPlayerController : 1;                                 //  BIT_FIELD NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0004[0xB];                                   //  MISSED OFFSET (PADDING)

    public:
        void UnPossess();
        void StopMovement();
        void SetInitialLocationAndRotation(const CoreUObject::FVector& NewLocation, const CoreUObject::FRotator& NewRotation);
        void SetIgnoreMoveInput(bool bNewMoveInput);
        void SetIgnoreLookInput(bool bNewLookInput);
        void SetControlRotation(const CoreUObject::FRotator& NewRotation);
        void ResetIgnoreMoveInput();
        void ResetIgnoreLookInput();
        void ResetIgnoreInputFlags();
        void ReceiveInstigatedAnyDamage(float Damage, Engine::UDamageType* DamageType, Engine::AActor* DamagedActor, Engine::AActor* DamageCauser);
        void Possess(Engine::APawn* InPawn);
        void OnRep_PlayerState();
        void OnRep_Pawn();
        bool LineOfSightTo(Engine::AActor* Other, const CoreUObject::FVector& ViewPoint, bool bAlternateChecks);
        Engine::APawn* K2_GetPawn();
        bool IsPlayerController();
        bool IsMoveInputIgnored();
        bool IsLookInputIgnored();
        bool IsLocalPlayerController();
        bool IsLocalController();
        Engine::AActor* GetViewTarget();
        CoreUObject::FRotator GetDesiredRotation();
        CoreUObject::FRotator GetControlRotation();
        void ClientSetRotation(const CoreUObject::FRotator& NewRotation, bool bResetCamera);
        void ClientSetLocation(const CoreUObject::FVector& NewLocation, const CoreUObject::FRotator& NewRotation);
        Engine::APlayerController* CastToPlayerController();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.Controller");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
