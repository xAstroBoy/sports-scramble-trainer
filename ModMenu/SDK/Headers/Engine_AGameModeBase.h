#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FString.h"
#include "BasicTypes_FText.h"
#include "Engine_AInfo.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AGameSession; };
namespace CG::Engine { class AGameStateBase; };
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class APlayerState; };
namespace CG::Engine { class AHUD; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class ASpectatorPawn; };
namespace CG::Engine { class AServerStatReplicator; };
namespace CG::Engine { class AController; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.GameModeBase
     * Size -> 0x00A0 (FullSize[0x03C8] - InheritedSize[0x0328])
     */
    class AGameModeBase : public Engine::AInfo
    {
    public:
        BasicTypes::FString                                          OptionsString;                                           //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AGameSession*                                        GameSessionClass;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AGameStateBase*                                      GameStateClass;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APlayerController*                                   PlayerControllerClass;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APlayerState*                                        PlayerStateClass;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AHUD*                                                HUDClass;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APawn*                                               DefaultPawnClass;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ASpectatorPawn*                                      SpectatorClass;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::APlayerController*                                   ReplaySpectatorPlayerControllerClass;                    //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AServerStatReplicator*                               ServerStatReplicatorClass;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AGameSession*                                        GameSession;                                             //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AGameStateBase*                                      GameState;                                               //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AServerStatReplicator*                               ServerStatReplicator;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FText                                            DefaultPlayerName;                                       //  Edit, NativeAccessSpecifierPublic
        bool                                                         bUseSeamlessTravel : 1;                                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStartPlayersAsSpectators : 1;                           //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bPauseable : 1;                                          //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x17];                                  //  MISSED OFFSET (PADDING)

    public:
        void StartPlay();
        Engine::APawn* SpawnDefaultPawnFor(Engine::AController* NewPlayer, Engine::AActor* StartSpot);
        Engine::APawn* SpawnDefaultPawnAtTransform(Engine::AController* NewPlayer, const CoreUObject::FTransform& SpawnTransform);
        bool ShouldReset(Engine::AActor* ActorToReset);
        void ReturnToMainMenuHost();
        void RestartPlayerAtTransform(Engine::AController* NewPlayer, const CoreUObject::FTransform& SpawnTransform);
        void RestartPlayerAtPlayerStart(Engine::AController* NewPlayer, Engine::AActor* StartSpot);
        void RestartPlayer(Engine::AController* NewPlayer);
        void ResetLevel();
        bool PlayerCanRestart(Engine::APlayerController* Player);
        bool MustSpectate(Engine::APlayerController* NewPlayerController);
        void K2_PostLogin(Engine::APlayerController* NewPlayer);
        void K2_OnSwapPlayerControllers(Engine::APlayerController* OldPC, Engine::APlayerController* NewPC);
        void K2_OnRestartPlayer(Engine::AController* NewPlayer);
        void K2_OnLogout(Engine::AController* ExitingController);
        void K2_OnChangeName(Engine::AController* Other, const BasicTypes::FString& NewName, bool bNameChange);
        Engine::AActor* K2_FindPlayerStart(Engine::AController* Player, const BasicTypes::FString& IncomingName);
        void InitStartSpot(Engine::AActor* StartSpot, Engine::AController* NewPlayer);
        void InitializeHUDForPlayer(Engine::APlayerController* NewPlayer);
        bool HasMatchStarted();
        void HandleStartingNewPlayer(Engine::APlayerController* NewPlayer);
        int32_t GetNumSpectators();
        int32_t GetNumPlayers();
        CoreUObject::UObject* GetDefaultPawnClassForController(Engine::AController* InController);
        Engine::AActor* FindPlayerStart(Engine::AController* Player, const BasicTypes::FString& IncomingName);
        Engine::AActor* ChoosePlayerStart(Engine::AController* Player);
        void ChangeName(Engine::AController* Controller, const BasicTypes::FString& NewName, bool bNameChange);
        bool CanSpectate(Engine::APlayerController* Viewer, Engine::APlayerState* ViewTarget);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.GameModeBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
