#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "Engine_FDebugTextInfo.h"
#include "Engine_AActor.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class UFont; };
namespace CG::Engine { class UCanvas; };
namespace CG::Engine { class APawn; };
namespace CG::Engine { class UTexture; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.HUD
     * Size -> 0x00F0 (FullSize[0x0418] - InheritedSize[0x0328])
     */
    class AHUD : public Engine::AActor
    {
    public:
        Engine::APlayerController*                                   PlayerOwner;                                             //  BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bLostFocusPaused : 1;                                    //  BIT_FIELD BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowHUD : 1;                                            //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowDebugInfo : 1;                                      //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      CurrentTargetIndex;                                      //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowHitBoxDebugInfo : 1;                                //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowOverlays : 1;                                       //  BIT_FIELD BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableDebugTextShadow : 1;                              //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::AActor*>                          PostRenderedActors;                                      //  ZeroConstructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        DebugDisplay;                                            //  ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic
        BasicTypes::TArray<BasicTypes::FName>                        ToggledDebugCategories;                                  //  ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic
        Engine::UCanvas*                                             Canvas;                                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCanvas*                                             DebugCanvas;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::FDebugTextInfo>                   DebugTextList;                                           //  ZeroConstructor, Protected, NativeAccessSpecifierProtected
        Engine::AActor*                                              ShowDebugTargetDesiredClass;                             //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::AActor*                                              ShowDebugTargetActor;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x70];                                  //  MISSED OFFSET (PADDING)

    public:
        void ShowHUD();
        void ShowDebugToggleSubCategory(const BasicTypes::FName& Category);
        void ShowDebugForReticleTargetToggle(Engine::AActor* DesiredClass);
        void ShowDebug(const BasicTypes::FName& DebugType);
        void RemoveDebugText(Engine::AActor* SrcActor, bool bLeaveDurationText);
        void RemoveAllDebugStrings();
        void ReceiveHitBoxRelease(const BasicTypes::FName& BoxName);
        void ReceiveHitBoxEndCursorOver(const BasicTypes::FName& BoxName);
        void ReceiveHitBoxClick(const BasicTypes::FName& BoxName);
        void ReceiveHitBoxBeginCursorOver(const BasicTypes::FName& BoxName);
        void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);
        CoreUObject::FVector Project(const CoreUObject::FVector& Location);
        void PreviousDebugTarget();
        void NextDebugTarget();
        void GetTextSize(const BasicTypes::FString& Text, float* OutWidth, float* OutHeight, Engine::UFont* Font, float Scale);
        Engine::APlayerController* GetOwningPlayerController();
        Engine::APawn* GetOwningPawn();
        void GetActorsInSelectionRectangle(Engine::AActor* ClassFilter, const CoreUObject::FVector2D& FirstPoint, const CoreUObject::FVector2D& SecondPoint, BasicTypes::TArray<Engine::AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
        void DrawTextureSimple(Engine::UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
        void DrawTexture(Engine::UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const CoreUObject::FLinearColor& TintColor, Engine::EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, const CoreUObject::FVector2D& RotPivot);
        void DrawText(const BasicTypes::FString& Text, const CoreUObject::FLinearColor& TextColor, float ScreenX, float ScreenY, Engine::UFont* Font, float Scale, bool bScalePosition);
        void DrawRect(const CoreUObject::FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
        void DrawMaterialTriangle(Engine::UMaterialInterface* Material, const CoreUObject::FVector2D& V0_Pos, const CoreUObject::FVector2D& V1_Pos, const CoreUObject::FVector2D& V2_Pos, const CoreUObject::FVector2D& V0_UV, const CoreUObject::FVector2D& V1_UV, const CoreUObject::FVector2D& V2_UV, const CoreUObject::FLinearColor& V0_Color, const CoreUObject::FLinearColor& V1_Color, const CoreUObject::FLinearColor& V2_Color);
        void DrawMaterialSimple(Engine::UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
        void DrawMaterial(Engine::UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const CoreUObject::FVector2D& RotPivot);
        void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const CoreUObject::FLinearColor& LineColor, float LineThickness);
        void Deproject(float ScreenX, float ScreenY, CoreUObject::FVector* WorldPosition, CoreUObject::FVector* WorldDirection);
        void AddHitBox(const CoreUObject::FVector2D& Position, const CoreUObject::FVector2D& Size, const BasicTypes::FName& InName, bool bConsumesInput, int32_t Priority);
        void AddDebugText(const BasicTypes::FString& DebugText, Engine::AActor* SrcActor, float Duration, const CoreUObject::FVector& Offset, const CoreUObject::FVector& DesiredOffset, const CoreUObject::FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Engine::UFont* InFont, float FontScale, bool bDrawShadow);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.HUD");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
