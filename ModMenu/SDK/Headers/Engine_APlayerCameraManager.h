#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FCameraCacheEntry.h"
#include "Engine_FTViewTarget.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector.h"
#include "Engine_FPostProcessSettings.h"
#include "Engine_AActor.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UCameraModifier; };
namespace CG::Engine { class AEmitterCameraLensEffectBase; };
namespace CG::Engine { class UCameraModifier_CameraShake; };
namespace CG::Engine { class UCameraAnimInst; };
namespace CG::Engine { class ACameraActor; };
namespace CG::Engine { class UCameraShake; };
namespace CG::Engine { class UCameraAnim; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.PlayerCameraManager
     * Size -> 0x2148 (FullSize[0x2470] - InheritedSize[0x0328])
     */
    class APlayerCameraManager : public Engine::AActor
    {
    public:
        Engine::APlayerController*                                   PCOwner;                                                 //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::USceneComponent*                                     TransformComponent;                                      //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DefaultFOV;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DefaultOrthoWidth;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DefaultAspectRatio;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x4C];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FCameraCacheEntry                                    CameraCache;                                             //  Transient, NativeAccessSpecifierPublic
        Engine::FCameraCacheEntry                                    LastFrameCameraCache;                                    //  Transient, NativeAccessSpecifierPublic
        Engine::FTViewTarget                                         ViewTarget;                                              //  Transient, NativeAccessSpecifierPublic
        Engine::FTViewTarget                                         PendingViewTarget;                                       //  Transient, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FCameraCacheEntry                                    CameraCachePrivate;                                      //  Transient, NativeAccessSpecifierPrivate
        Engine::FCameraCacheEntry                                    LastFrameCameraCachePrivate;                             //  Transient, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UCameraModifier*>                 ModifierList;                                            //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::UCameraModifier*>                 DefaultModifiers;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic
        float                                                        FreeCamDistance;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         FreeCamOffset;                                           //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         ViewTargetOffset;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x14];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::AEmitterCameraLensEffectBase*>    CameraLensEffects;                                       //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        Engine::UCameraModifier_CameraShake*                         CachedCameraShakeMod;                                    //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCameraAnimInst*                                     AnimInstPool[0x8];                                       //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::FPostProcessSettings>             PostProcessBlendCache;                                   //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0006[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::UCameraAnimInst*>                 ActiveAnims;                                             //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::UCameraAnimInst*>                 FreeAnims;                                               //  ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected
        Engine::ACameraActor*                                        AnimCameraActor;                                         //  ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bUseClientSideCameraUpdates : 1;                         //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         UnknownData_0007 : 4;                                    //  BIT_FIELD (PADDING)
        bool                                                         bClientSimulatingViewTarget : 1;                         //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIsOrthographic : 1;                                     //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDefaultConstrainAspectRatio : 1;                        //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         UnknownData_0008 : 2;                                    //  BIT_FIELD (PADDING)
        bool                                                         bGameCameraCutThisFrame : 1;                             //  BIT_FIELD BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0009[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ViewPitchMin;                                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ViewPitchMax;                                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ViewYawMin;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ViewYawMax;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ViewRollMin;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ViewRollMax;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0010[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void StopCameraShake(Engine::UCameraShake* ShakeInstance, bool bImmediately);
        void StopCameraFade();
        void StopCameraAnimInst(Engine::UCameraAnimInst* AnimInst, bool bImmediate);
        void StopAllInstancesOfCameraShake(Engine::UCameraShake* Shake, bool bImmediately);
        void StopAllInstancesOfCameraAnim(Engine::UCameraAnim* Anim, bool bImmediate);
        void StopAllCameraShakes(bool bImmediately);
        void StopAllCameraAnims(bool bImmediate);
        void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const CoreUObject::FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
        void SetManualCameraFade(float InFadeAmount, const CoreUObject::FLinearColor& Color, bool bInFadeAudio);
        bool RemoveCameraModifier(Engine::UCameraModifier* ModifierToRemove);
        void RemoveCameraLensEffect(Engine::AEmitterCameraLensEffectBase* Emitter);
        Engine::UCameraShake* PlayCameraShake(Engine::UCameraShake* ShakeClass, float Scale, Engine::ECameraAnimPlaySpace PlaySpace, const CoreUObject::FRotator& UserPlaySpaceRot);
        Engine::UCameraAnimInst* PlayCameraAnim(Engine::UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, Engine::ECameraAnimPlaySpace PlaySpace, const CoreUObject::FRotator& UserPlaySpaceRot);
        void PhotographyCameraModify(const CoreUObject::FVector& NewCameraLocation, const CoreUObject::FVector& PreviousCameraLocation, const CoreUObject::FVector& OriginalCameraLocation, CoreUObject::FVector* ResultCameraLocation);
        void OnPhotographySessionStart();
        void OnPhotographySessionEnd();
        void OnPhotographyMultiPartCaptureStart();
        void OnPhotographyMultiPartCaptureEnd();
        Engine::APlayerController* GetOwningPlayerController();
        float GetFOVAngle();
        CoreUObject::FRotator GetCameraRotation();
        CoreUObject::FVector GetCameraLocation();
        Engine::UCameraModifier* FindCameraModifierByClass(Engine::UCameraModifier* ModifierClass);
        void ClearCameraLensEffects();
        bool BlueprintUpdateCamera(Engine::AActor* CameraTarget, CoreUObject::FVector* NewCameraLocation, CoreUObject::FRotator* NewCameraRotation, float* NewCameraFOV);
        Engine::UCameraModifier* AddNewCameraModifier(Engine::UCameraModifier* ModifierClass);
        Engine::AEmitterCameraLensEffectBase* AddCameraLensEffect(Engine::AEmitterCameraLensEffectBase* LensEffectEmitterClass);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.PlayerCameraManager");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
