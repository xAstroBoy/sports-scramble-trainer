#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FLinearConstraint.h"
#include "Engine_FConeConstraint.h"
#include "Engine_FTwistConstraint.h"
#include "Engine_FLinearDriveConstraint.h"
#include "Engine_FAngularDriveConstraint.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * ScriptStruct /Script/Engine.ConstraintProfileProperties
     * Size -> 0x0104
     */
    struct FConstraintProfileProperties
    {
    public:
        float                                                        ProjectionLinearTolerance;                               //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ProjectionAngularTolerance;                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        LinearBreakThreshold;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        AngularBreakThreshold;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FLinearConstraint                                    LinearLimit;                                             //  Edit, NoDestructor, NativeAccessSpecifierPublic
        Engine::FConeConstraint                                      ConeLimit;                                               //  Edit, NoDestructor, NativeAccessSpecifierPublic
        Engine::FTwistConstraint                                     TwistLimit;                                              //  Edit, NoDestructor, NativeAccessSpecifierPublic
        Engine::FLinearDriveConstraint                               LinearDrive;                                             //  Edit, NoDestructor, NativeAccessSpecifierPublic
        Engine::FAngularDriveConstraint                              AngularDrive;                                            //  Edit, NoDestructor, NativeAccessSpecifierPublic
        bool                                                         bDisableCollision : 1;                                   //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bParentDominates : 1;                                    //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableProjection : 1;                                   //  BIT_FIELD Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAngularBreakable : 1;                                   //  BIT_FIELD Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bLinearBreakable : 1;                                    //  BIT_FIELD Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (PADDING)
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
