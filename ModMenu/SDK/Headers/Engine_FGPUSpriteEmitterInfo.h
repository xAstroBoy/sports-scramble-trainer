#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FGPUSpriteLocalVectorFieldInfo.h"
#include "Engine_FFloatDistribution.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "Engine_ENUMS.h"
#include "Engine_FRawDistributionVector.h"
#include "Engine_FRawDistributionFloat.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UParticleModuleRequired; };
namespace CG::Engine { class UParticleModuleSpawn; };
namespace CG::Engine { class UParticleModuleSpawnPerUnit; };
namespace CG::Engine { class UParticleModule; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * ScriptStruct /Script/Engine.GPUSpriteEmitterInfo
     * Size -> 0x02C0
     */
    struct FGPUSpriteEmitterInfo
    {
    public:
        Engine::UParticleModuleRequired*                             RequiredModule;                                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UParticleModuleSpawn*                                SpawnModule;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UParticleModuleSpawnPerUnit*                         SpawnPerUnitModule;                                      //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::UParticleModule*>                 SpawnModules;                                            //  ZeroConstructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::FGPUSpriteLocalVectorFieldInfo                       LocalVectorField;                                        //  NoDestructor, NativeAccessSpecifierPublic
        Engine::FFloatDistribution                                   VectorFieldScale;                                        //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FFloatDistribution                                   DragCoefficient;                                         //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FFloatDistribution                                   PointAttractorStrength;                                  //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FFloatDistribution                                   Resilience;                                              //  ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         ConstantAcceleration;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         PointAttractorPosition;                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        PointAttractorRadiusSq;                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         OrbitOffsetBase;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         OrbitOffsetRange;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector2D                                       InvMaxSize;                                              //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        InvRotationRateScale;                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        MaxLifetime;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      MaxParticleCount;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::EParticleScreenAlignment                             ScreenAlignment;                                         //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::EParticleAxisLock                                    LockAxisFlag;                                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bEnableCollision : 1;                                    //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::EParticleCollisionMode                               CollisionMode;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         bRemoveHMDRoll : 1;                                      //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        MinFacingCameraBlendDistance;                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        MaxFacingCameraBlendDistance;                            //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::FRawDistributionVector                               DynamicColor;                                            //  ContainsInstancedReference, NativeAccessSpecifierPublic
        Engine::FRawDistributionFloat                                DynamicAlpha;                                            //  ContainsInstancedReference, NativeAccessSpecifierPublic
        Engine::FRawDistributionVector                               DynamicColorScale;                                       //  ContainsInstancedReference, NativeAccessSpecifierPublic
        Engine::FRawDistributionFloat                                DynamicAlphaScale;                                       //  ContainsInstancedReference, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0005[0x10];                                  //  MISSED OFFSET (PADDING)
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
