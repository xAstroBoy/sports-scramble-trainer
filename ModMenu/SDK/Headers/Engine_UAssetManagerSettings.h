#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FPrimaryAssetTypeInfo.h"
#include "Engine_FDirectoryPath.h"
#include "Engine_FPrimaryAssetRulesOverride.h"
#include "Engine_FAssetManagerRedirect.h"
#include "BasicTypes_TSet.h"
#include "BasicTypes_FName.h"
#include "Engine_UDeveloperSettings.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.AssetManagerSettings
     * Size -> 0x00B8 (FullSize[0x00F0] - InheritedSize[0x0038])
     */
    class UAssetManagerSettings : public Engine::UDeveloperSettings
    {
    public:
        BasicTypes::TArray<Engine::FPrimaryAssetTypeInfo>            PrimaryAssetTypesToScan;                                 //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FDirectoryPath>                   DirectoriesToExclude;                                    //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FPrimaryAssetRulesOverride>       PrimaryAssetRules;                                       //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        bool                                                         bOnlyCookProductionAssets;                               //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShouldManagerDetermineTypeAndName;                      //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShouldGuessTypeAndNameInEditor;                         //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShouldAcquireMissingChunksOnLoad;                       //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::FAssetManagerRedirect>            PrimaryAssetIdRedirects;                                 //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FAssetManagerRedirect>            PrimaryAssetTypeRedirects;                               //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FAssetManagerRedirect>            AssetPathRedirects;                                      //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TSet<BasicTypes::FName>                          MetaDataTagsForAssetRegistry;                            //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic

    public:
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.AssetManagerSettings");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
