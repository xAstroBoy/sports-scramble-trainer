#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FColor.h"
#include "CoreUObject_FPlane.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_TArray.h"
#include "Engine_FCanvasUVTri.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTexture2D; };
namespace CG::Engine { class UReporterGraph; };
namespace CG::Engine { class UFont; };
namespace CG::Engine { class UTexture; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.Canvas
     * Size -> 0x02A8 (FullSize[0x02D0] - InheritedSize[0x0028])
     */
    class UCanvas : public CoreUObject::UObject
    {
    public:
        float                                                        OrgX;                                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        OrgY;                                                    //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ClipX;                                                   //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        ClipY;                                                   //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FColor                                          DrawColor;                                               //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCenterX : 1;                                            //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCenterY : 1;                                            //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bNoSmooth : 1;                                           //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      SizeX;                                                   //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      SizeY;                                                   //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FPlane                                          ColorModulate;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        Engine::UTexture2D*                                          DefaultTexture;                                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UTexture2D*                                          GradientTexture0;                                        //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UReporterGraph*                                      ReporterGraph;                                           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x258];                                 //  MISSED OFFSET (PADDING)

    public:
        CoreUObject::FVector2D K2_TextSize(Engine::UFont* RenderFont, const BasicTypes::FString& RenderText, const CoreUObject::FVector2D& Scale);
        CoreUObject::FVector2D K2_StrLen(Engine::UFont* RenderFont, const BasicTypes::FString& RenderText);
        CoreUObject::FVector K2_Project(const CoreUObject::FVector& WorldLocation);
        void K2_DrawTriangle(Engine::UTexture* RenderTexture, BasicTypes::TArray<Engine::FCanvasUVTri> Triangles);
        void K2_DrawTexture(Engine::UTexture* RenderTexture, const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& ScreenSize, const CoreUObject::FVector2D& CoordinatePosition, const CoreUObject::FVector2D& CoordinateSize, const CoreUObject::FLinearColor& RenderColor, Engine::EBlendMode BlendMode, float Rotation, const CoreUObject::FVector2D& PivotPoint);
        void K2_DrawText(Engine::UFont* RenderFont, const BasicTypes::FString& RenderText, const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& Scale, const CoreUObject::FLinearColor& RenderColor, float Kerning, const CoreUObject::FLinearColor& ShadowColor, const CoreUObject::FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const CoreUObject::FLinearColor& OutlineColor);
        void K2_DrawPolygon(Engine::UTexture* RenderTexture, const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& Radius, int32_t NumberOfSides, const CoreUObject::FLinearColor& RenderColor);
        void K2_DrawMaterialTriangle(Engine::UMaterialInterface* RenderMaterial, BasicTypes::TArray<Engine::FCanvasUVTri> Triangles);
        void K2_DrawMaterial(Engine::UMaterialInterface* RenderMaterial, const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& ScreenSize, const CoreUObject::FVector2D& CoordinatePosition, const CoreUObject::FVector2D& CoordinateSize, float Rotation, const CoreUObject::FVector2D& PivotPoint);
        void K2_DrawLine(const CoreUObject::FVector2D& ScreenPositionA, const CoreUObject::FVector2D& ScreenPositionB, float Thickness, const CoreUObject::FLinearColor& RenderColor);
        void K2_DrawBox(const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& ScreenSize, float Thickness, const CoreUObject::FLinearColor& RenderColor);
        void K2_DrawBorder(Engine::UTexture* BorderTexture, Engine::UTexture* BackgroundTexture, Engine::UTexture* LeftBorderTexture, Engine::UTexture* RightBorderTexture, Engine::UTexture* TopBorderTexture, Engine::UTexture* BottomBorderTexture, const CoreUObject::FVector2D& ScreenPosition, const CoreUObject::FVector2D& ScreenSize, const CoreUObject::FVector2D& CoordinatePosition, const CoreUObject::FVector2D& CoordinateSize, const CoreUObject::FLinearColor& RenderColor, const CoreUObject::FVector2D& BorderScale, const CoreUObject::FVector2D& BackgroundScale, float Rotation, const CoreUObject::FVector2D& PivotPoint, const CoreUObject::FVector2D& CornerSize);
        void K2_Deproject(const CoreUObject::FVector2D& ScreenPosition, CoreUObject::FVector* WorldOrigin, CoreUObject::FVector* WorldDirection);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.Canvas");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
