#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_UObject.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class ADebugCameraController; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class APawn; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.CheatManager
     * Size -> 0x0050 (FullSize[0x0078] - InheritedSize[0x0028])
     */
    class UCheatManager : public CoreUObject::UObject
    {
    public:
        Engine::ADebugCameraController*                              DebugCameraControllerRef;                                //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::ADebugCameraController*                              DebugCameraControllerClass;                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x40];                                  //  MISSED OFFSET (PADDING)

    public:
        void Walk();
        void ViewSelf();
        void ViewPlayer(const BasicTypes::FString& S);
        void ViewClass(Engine::AActor* DesiredClass);
        void ViewActor(const BasicTypes::FName& ActorName);
        void UpdateSafeArea();
        void ToggleServerStatReplicatorUpdateStatNet();
        void ToggleServerStatReplicatorClientOverwrite();
        void ToggleDebugCamera();
        void ToggleAILogging();
        void TestCollisionDistance();
        void Teleport();
        void Summon(const BasicTypes::FString& ClassName);
        void StreamLevelOut(const BasicTypes::FName& PackageName);
        void StreamLevelIn(const BasicTypes::FName& PackageName);
        void SpawnServerStatReplicator();
        void Slomo(float NewTimeDilation);
        void SetWorldOrigin();
        void SetMouseSensitivityToDefault();
        void ServerToggleAILogging();
        void ReceiveInitCheatManager();
        void ReceiveEndPlay();
        void PlayersOnly();
        void OnlyLoadLevel(const BasicTypes::FName& PackageName);
        void LogLoc();
        void InvertMouse();
        void God();
        void Ghost();
        void FreezeFrame(float Delay);
        void Fly();
        void FlushLog();
        void EnableDebugCamera();
        void DumpVoiceMutingState();
        void DumpPartyState();
        void DumpOnlineSessionState();
        void DumpChatState();
        void DisableDebugCamera();
        void DestroyTarget();
        void DestroyServerStatReplicator();
        void DestroyPawns(Engine::APawn* aClass);
        void DestroyAllPawnsExceptTarget();
        void DestroyAll(Engine::AActor* aClass);
        void DebugCapsuleSweepSize(float HalfHeight, float Radius);
        void DebugCapsuleSweepPawn();
        void DebugCapsuleSweepComplex(bool bTraceComplex);
        void DebugCapsuleSweepClear();
        void DebugCapsuleSweepChannel(Engine::ECollisionChannel Channel);
        void DebugCapsuleSweepCapture();
        void DebugCapsuleSweep();
        void DamageTarget(float DamageAmount);
        void CheatScript(const BasicTypes::FString& ScriptName);
        void ChangeSize(float F);
        void BugItStringCreator(const CoreUObject::FVector& ViewLocation, const CoreUObject::FRotator& ViewRotation, BasicTypes::FString* GoString, BasicTypes::FString* LocString);
        void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
        void BugIt(const BasicTypes::FString& ScreenShotDescription);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.CheatManager");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
