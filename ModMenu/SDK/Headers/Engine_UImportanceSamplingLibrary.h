#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "Engine_ENUMS.h"
#include "Engine_FImportanceTexture.h"
#include "CoreUObject_FLinearColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTexture2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.ImportanceSamplingLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UImportanceSamplingLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        float STATIC_RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);
        CoreUObject::FVector STATIC_RandomSobolCell3D(int32_t Index, int32_t NumCells, const CoreUObject::FVector& Cell, const CoreUObject::FVector& Seed);
        CoreUObject::FVector2D STATIC_RandomSobolCell2D(int32_t Index, int32_t NumCells, const CoreUObject::FVector2D& Cell, const CoreUObject::FVector2D& Seed);
        float STATIC_NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);
        CoreUObject::FVector STATIC_NextSobolCell3D(int32_t Index, int32_t NumCells, const CoreUObject::FVector& PreviousValue);
        CoreUObject::FVector2D STATIC_NextSobolCell2D(int32_t Index, int32_t NumCells, const CoreUObject::FVector2D& PreviousValue);
        Engine::FImportanceTexture STATIC_MakeImportanceTexture(Engine::UTexture2D* Texture, Engine::EImportanceWeight WeightingFunc);
        void STATIC_ImportanceSample(const Engine::FImportanceTexture& Texture, const CoreUObject::FVector2D& Rand, int32_t Samples, float Intensity, CoreUObject::FVector2D* SamplePosition, CoreUObject::FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);
        void STATIC_BreakImportanceTexture(const Engine::FImportanceTexture& ImportanceTexture, Engine::UTexture2D** Texture, Engine::EImportanceWeight* WeightingFunc);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.ImportanceSamplingLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
