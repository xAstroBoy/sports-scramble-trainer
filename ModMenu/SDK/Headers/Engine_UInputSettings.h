#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FInputAxisConfigEntry.h"
#include "BasicTypes_FString.h"
#include "Engine_ENUMS.h"
#include "Engine_FInputActionKeyMapping.h"
#include "Engine_FInputAxisKeyMapping.h"
#include "CoreUObject_FSoftObjectPath.h"
#include "InputCore_FKey.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UInputSettings; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.InputSettings
     * Size -> 0x00B8 (FullSize[0x00E0] - InheritedSize[0x0028])
     */
    class UInputSettings : public CoreUObject::UObject
    {
    public:
        BasicTypes::TArray<Engine::FInputAxisConfigEntry>            AxisConfig;                                              //  Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic
        bool                                                         bAltEnterTogglesFullscreen : 1;                          //  BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bF11TogglesFullscreen : 1;                               //  BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseMouseForTouch : 1;                                   //  BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableMouseSmoothing : 1;                               //  BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableFOVScaling : 1;                                   //  BIT_FIELD Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bCaptureMouseOnLaunch : 1;                               //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDefaultViewportMouseLock : 1;                           //  BIT_FIELD Config, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAlwaysShowTouchInterface : 1;                           //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bShowConsoleOnFourFingerTap : 1;                         //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bEnableGestureRecognizer : 1;                            //  BIT_FIELD Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseAutocorrect;                                         //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FString>                      ExcludedAutocorrectOS;                                   //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic
        BasicTypes::TArray<BasicTypes::FString>                      ExcludedAutocorrectCultures;                             //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic
        BasicTypes::TArray<BasicTypes::FString>                      ExcludedAutocorrectDeviceModels;                         //  Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic
        Engine::EMouseCaptureMode                                    DefaultViewportMouseCaptureMode;                         //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::EMouseLockMode                                       DefaultViewportMouseLockMode;                            //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        FOVScale;                                                //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        DoubleClickTime;                                         //  Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::FInputActionKeyMapping>           ActionMappings;                                          //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        BasicTypes::TArray<Engine::FInputAxisKeyMapping>             AxisMappings;                                            //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic
        CoreUObject::FSoftObjectPath                                 DefaultTouchInterface;                                   //  Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic
        InputCore::FKey                                              ConsoleKey;                                              //  Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<InputCore::FKey>                          ConsoleKeys;                                             //  Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic

    public:
        void SaveKeyMappings();
        void RemoveAxisMapping(const Engine::FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
        void RemoveActionMapping(const Engine::FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
        Engine::UInputSettings* STATIC_GetInputSettings();
        void GetAxisNames(BasicTypes::TArray<BasicTypes::FName>* AxisNames);
        void GetAxisMappingByName(const BasicTypes::FName& InAxisName, BasicTypes::TArray<Engine::FInputAxisKeyMapping>* OutMappings);
        void GetActionNames(BasicTypes::TArray<BasicTypes::FName>* ActionNames);
        void GetActionMappingByName(const BasicTypes::FName& InActionName, BasicTypes::TArray<Engine::FInputActionKeyMapping>* OutMappings);
        void ForceRebuildKeymaps();
        void AddAxisMapping(const Engine::FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
        void AddActionMapping(const Engine::FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.InputSettings");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
