#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_FInstancedStaticMeshInstanceData.h"
#include "Engine_FInstancedStaticMeshMappingInfo.h"
#include "Engine_UStaticMeshComponent.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FBox.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.InstancedStaticMeshComponent
     * Size -> 0x0098 (FullSize[0x0690] - InheritedSize[0x05F8])
     */
    class UInstancedStaticMeshComponent : public Engine::UStaticMeshComponent
    {
    public:
        BasicTypes::TArray<Engine::FInstancedStaticMeshInstanceData> PerInstanceSMData;                                       //  Edit, ZeroConstructor, NativeAccessSpecifierPublic, CPF_SkipSerialization
        int32_t                                                      InstancingRandomSeed;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      InstanceStartCullDistance;                               //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      InstanceEndCullDistance;                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<int32_t>                                  InstanceReorderTable;                                    //  ZeroConstructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x48];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      NumPendingLightmaps;                                     //  ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::FInstancedStaticMeshMappingInfo>  CachedMappings;                                          //  ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        bool UpdateInstanceTransform(int32_t InstanceIndex, const CoreUObject::FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
        bool UpdateInstanceFloatValue(int32_t InstanceIndex, float FloatValue);
        void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);
        bool RemoveInstance(int32_t InstanceIndex);
        bool GetInstanceTransform(int32_t InstanceIndex, CoreUObject::FTransform* OutInstanceTransform, bool bWorldSpace);
        BasicTypes::TArray<int32_t> GetInstancesOverlappingSphere(const CoreUObject::FVector& Center, float Radius, bool bSphereInWorldSpace);
        BasicTypes::TArray<int32_t> GetInstancesOverlappingBox(const CoreUObject::FBox& Box, bool bBoxInWorldSpace);
        int32_t GetInstanceCount();
        void ClearInstances();
        int32_t AddInstanceWorldSpace(const CoreUObject::FTransform& WorldTransform);
        int32_t AddInstanceWithFloatParam(const CoreUObject::FTransform& InstanceTransform, float FloatValue);
        int32_t AddInstance(const CoreUObject::FTransform& InstanceTransform);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.InstancedStaticMeshComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
