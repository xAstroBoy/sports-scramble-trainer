#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetArrayLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetArrayLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetArrayPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, BasicTypes::TArray<int32_t> Value);
        void STATIC_FilterArray(BasicTypes::TArray<Engine::AActor*> TargetArray, Engine::AActor* FilterClass, BasicTypes::TArray<Engine::AActor*>* FilteredArray);
        void STATIC_Array_Swap(BasicTypes::TArray<int32_t> TargetArray, int32_t FirstIndex, int32_t SecondIndex);
        void STATIC_Array_Shuffle(BasicTypes::TArray<int32_t> TargetArray);
        void STATIC_Array_Set(BasicTypes::TArray<int32_t> TargetArray, int32_t Index, int32_t Item, bool bSizeToFit);
        void STATIC_Array_Resize(BasicTypes::TArray<int32_t> TargetArray, int32_t Size);
        bool STATIC_Array_RemoveItem(BasicTypes::TArray<int32_t> TargetArray, int32_t Item);
        void STATIC_Array_Remove(BasicTypes::TArray<int32_t> TargetArray, int32_t IndexToRemove);
        int32_t STATIC_Array_Length(BasicTypes::TArray<int32_t> TargetArray);
        int32_t STATIC_Array_LastIndex(BasicTypes::TArray<int32_t> TargetArray);
        bool STATIC_Array_IsValidIndex(BasicTypes::TArray<int32_t> TargetArray, int32_t IndexToTest);
        void STATIC_Array_Insert(BasicTypes::TArray<int32_t> TargetArray, int32_t NewItem, int32_t Index);
        void STATIC_Array_Get(BasicTypes::TArray<int32_t> TargetArray, int32_t Index, int32_t* Item);
        int32_t STATIC_Array_Find(BasicTypes::TArray<int32_t> TargetArray, int32_t ItemToFind);
        bool STATIC_Array_Contains(BasicTypes::TArray<int32_t> TargetArray, int32_t ItemToFind);
        void STATIC_Array_Clear(BasicTypes::TArray<int32_t> TargetArray);
        void STATIC_Array_Append(BasicTypes::TArray<int32_t> TargetArray, BasicTypes::TArray<int32_t> SourceArray);
        int32_t STATIC_Array_AddUnique(BasicTypes::TArray<int32_t> TargetArray, int32_t NewItem);
        int32_t STATIC_Array_Add(BasicTypes::TArray<int32_t> TargetArray, int32_t NewItem);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetArrayLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
