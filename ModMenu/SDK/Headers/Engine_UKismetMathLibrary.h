#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "Engine_FVectorSpringState.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FDateTime.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FTimespan.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FRandomStream.h"
#include "CoreUObject_FLinearColor.h"
#include "Engine_FFloatSpringState.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FMatrix.h"
#include "CoreUObject_FFrameNumber.h"
#include "CoreUObject_FFrameRate.h"
#include "CoreUObject_FQualifiedFrameTime.h"
#include "CoreUObject_FPlane.h"
#include "CoreUObject_FBox2D.h"
#include "CoreUObject_FBox.h"
#include "CoreUObject_FIntVector.h"
#include "CoreUObject_FColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetMathLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetMathLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        int32_t STATIC_Xor_IntInt(int32_t A, int32_t B);
        float STATIC_VSizeXY(const CoreUObject::FVector& A);
        float STATIC_VSizeSquared(const CoreUObject::FVector& A);
        float STATIC_VSize2DSquared(const CoreUObject::FVector2D& A);
        float STATIC_VSize2D(const CoreUObject::FVector2D& A);
        float STATIC_VSize(const CoreUObject::FVector& A);
        CoreUObject::FVector STATIC_VLerp(const CoreUObject::FVector& A, const CoreUObject::FVector& B, float Alpha);
        CoreUObject::FVector STATIC_VInterpTo_Constant(const CoreUObject::FVector& Current, const CoreUObject::FVector& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FVector STATIC_VInterpTo(const CoreUObject::FVector& Current, const CoreUObject::FVector& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FVector STATIC_VectorSpringInterp(const CoreUObject::FVector& Current, const CoreUObject::FVector& Target, Engine::FVectorSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
        CoreUObject::FVector2D STATIC_Vector2DInterpTo_Constant(const CoreUObject::FVector2D& Current, const CoreUObject::FVector2D& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FVector2D STATIC_Vector2DInterpTo(const CoreUObject::FVector2D& Current, const CoreUObject::FVector2D& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FVector STATIC_VEase(const CoreUObject::FVector& A, const CoreUObject::FVector& B, float Alpha, Engine::EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
        CoreUObject::FDateTime STATIC_UtcNow();
        CoreUObject::FRotator STATIC_TransformRotation(const CoreUObject::FTransform& T, const CoreUObject::FRotator& Rotation);
        CoreUObject::FVector STATIC_TransformLocation(const CoreUObject::FTransform& T, const CoreUObject::FVector& Location);
        CoreUObject::FVector STATIC_TransformDirection(const CoreUObject::FTransform& T, const CoreUObject::FVector& Direction);
        float STATIC_Transform_Determinant(const CoreUObject::FTransform& Transform);
        CoreUObject::FDateTime STATIC_Today();
        CoreUObject::FTransform STATIC_TLerp(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B, float Alpha, Engine::ELerpInterpolationMode InterpMode);
        CoreUObject::FTransform STATIC_TInterpTo(const CoreUObject::FTransform& Current, const CoreUObject::FTransform& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FTimespan STATIC_TimespanZeroValue();
        float STATIC_TimespanRatio(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        CoreUObject::FTimespan STATIC_TimespanMinValue();
        CoreUObject::FTimespan STATIC_TimespanMaxValue();
        bool STATIC_TimespanFromString(const BasicTypes::FString& TimespanString, CoreUObject::FTimespan* Result);
        CoreUObject::FTransform STATIC_TEase(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B, float Alpha, Engine::EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
        float STATIC_Tan(float A);
        CoreUObject::FVector STATIC_Subtract_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_Subtract_VectorInt(const CoreUObject::FVector& A, int32_t B);
        CoreUObject::FVector STATIC_Subtract_VectorFloat(const CoreUObject::FVector& A, float B);
        CoreUObject::FVector2D STATIC_Subtract_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        CoreUObject::FVector2D STATIC_Subtract_Vector2DFloat(const CoreUObject::FVector2D& A, float B);
        CoreUObject::FTimespan STATIC_Subtract_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        int32_t STATIC_Subtract_IntInt(int32_t A, int32_t B);
        float STATIC_Subtract_FloatFloat(float A, float B);
        CoreUObject::FDateTime STATIC_Subtract_DateTimeTimespan(const CoreUObject::FDateTime& A, const CoreUObject::FTimespan& B);
        CoreUObject::FTimespan STATIC_Subtract_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        uint8_t STATIC_Subtract_ByteByte(uint8_t A, uint8_t B);
        float STATIC_Square(float A);
        float STATIC_Sqrt(float A);
        float STATIC_Sin(float A);
        int32_t STATIC_SignOfInteger(int32_t A);
        float STATIC_SignOfFloat(float A);
        void STATIC_SetRandomStreamSeed(CoreUObject::FRandomStream* Stream, int32_t NewSeed);
        CoreUObject::FVector STATIC_SelectVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B, bool bPickA);
        CoreUObject::FTransform STATIC_SelectTransform(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B, bool bPickA);
        BasicTypes::FString STATIC_SelectString(const BasicTypes::FString& A, const BasicTypes::FString& B, bool bPickA);
        CoreUObject::FRotator STATIC_SelectRotator(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B, bool bPickA);
        CoreUObject::UObject* STATIC_SelectObject(CoreUObject::UObject* A, CoreUObject::UObject* B, bool bSelectA);
        int32_t STATIC_SelectInt(int32_t A, int32_t B, bool bPickA);
        float STATIC_SelectFloat(float A, float B, bool bPickA);
        CoreUObject::FLinearColor STATIC_SelectColor(const CoreUObject::FLinearColor& A, const CoreUObject::FLinearColor& B, bool bPickA);
        CoreUObject::UObject* STATIC_SelectClass(CoreUObject::UObject* A, CoreUObject::UObject* B, bool bSelectA);
        void STATIC_SeedRandomStream(CoreUObject::FRandomStream* Stream);
        int32_t STATIC_Round(float A);
        CoreUObject::FRotator STATIC_RotatorFromAxisAndAngle(const CoreUObject::FVector& Axis, float Angle);
        CoreUObject::FVector STATIC_RotateAngleAxis(const CoreUObject::FVector& InVect, float AngleDeg, const CoreUObject::FVector& Axis);
        CoreUObject::FRotator STATIC_RLerp(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B, float Alpha, bool bShortestPath);
        CoreUObject::FRotator STATIC_RInterpTo_Constant(const CoreUObject::FRotator& Current, const CoreUObject::FRotator& Target, float DeltaTime, float InterpSpeed);
        CoreUObject::FRotator STATIC_RInterpTo(const CoreUObject::FRotator& Current, const CoreUObject::FRotator& Target, float DeltaTime, float InterpSpeed);
        void STATIC_RGBToHSV_Vector(const CoreUObject::FLinearColor& RGB, CoreUObject::FLinearColor* HSV);
        void STATIC_RGBToHSV(const CoreUObject::FLinearColor& InColor, float* H, float* S, float* V, float* A);
        void STATIC_ResetVectorSpringState(Engine::FVectorSpringState* SpringState);
        void STATIC_ResetRandomStream(const CoreUObject::FRandomStream& Stream);
        void STATIC_ResetFloatSpringState(Engine::FFloatSpringState* SpringState);
        CoreUObject::FRotator STATIC_REase(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B, float Alpha, bool bShortestPath, Engine::EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
        CoreUObject::FVector STATIC_RandomUnitVectorInEllipticalConeInRadiansFromStream(const CoreUObject::FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const CoreUObject::FRandomStream& Stream);
        CoreUObject::FVector STATIC_RandomUnitVectorInEllipticalConeInRadians(const CoreUObject::FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
        CoreUObject::FVector STATIC_RandomUnitVectorInEllipticalConeInDegreesFromStream(const CoreUObject::FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const CoreUObject::FRandomStream& Stream);
        CoreUObject::FVector STATIC_RandomUnitVectorInEllipticalConeInDegrees(const CoreUObject::FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
        CoreUObject::FVector STATIC_RandomUnitVectorInConeInRadiansFromStream(const CoreUObject::FVector& ConeDir, float ConeHalfAngleInRadians, const CoreUObject::FRandomStream& Stream);
        CoreUObject::FVector STATIC_RandomUnitVectorInConeInRadians(const CoreUObject::FVector& ConeDir, float ConeHalfAngleInRadians);
        CoreUObject::FVector STATIC_RandomUnitVectorInConeInDegreesFromStream(const CoreUObject::FVector& ConeDir, float ConeHalfAngleInDegrees, const CoreUObject::FRandomStream& Stream);
        CoreUObject::FVector STATIC_RandomUnitVectorInConeInDegrees(const CoreUObject::FVector& ConeDir, float ConeHalfAngleInDegrees);
        CoreUObject::FVector STATIC_RandomUnitVectorFromStream(const CoreUObject::FRandomStream& Stream);
        CoreUObject::FVector STATIC_RandomUnitVector();
        CoreUObject::FRotator STATIC_RandomRotatorFromStream(bool bRoll, const CoreUObject::FRandomStream& Stream);
        CoreUObject::FRotator STATIC_RandomRotator(bool bRoll);
        CoreUObject::FVector STATIC_RandomPointInBoundingBox(const CoreUObject::FVector& Origin, const CoreUObject::FVector& BoxExtent);
        int32_t STATIC_RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, const CoreUObject::FRandomStream& Stream);
        int32_t STATIC_RandomIntegerInRange(int32_t Min, int32_t Max);
        int32_t STATIC_RandomIntegerFromStream(int32_t Max, const CoreUObject::FRandomStream& Stream);
        int32_t STATIC_RandomInteger(int32_t Max);
        float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const CoreUObject::FRandomStream& Stream);
        float STATIC_RandomFloatInRange(float Min, float Max);
        float STATIC_RandomFloatFromStream(const CoreUObject::FRandomStream& Stream);
        float STATIC_RandomFloat();
        bool STATIC_RandomBoolWithWeightFromStream(float Weight, const CoreUObject::FRandomStream& RandomStream);
        bool STATIC_RandomBoolWithWeight(float Weight);
        bool STATIC_RandomBoolFromStream(const CoreUObject::FRandomStream& Stream);
        bool STATIC_RandomBool();
        float STATIC_RadiansToDegrees(float A);
        CoreUObject::FVector STATIC_ProjectVectorOnToVector(const CoreUObject::FVector& V, const CoreUObject::FVector& Target);
        CoreUObject::FVector STATIC_ProjectVectorOnToPlane(const CoreUObject::FVector& V, const CoreUObject::FVector& PlaneNormal);
        CoreUObject::FVector STATIC_ProjectPointOnToPlane(const CoreUObject::FVector& Point, const CoreUObject::FVector& PlaneBase, const CoreUObject::FVector& PlaneNormal);
        bool STATIC_PointsAreCoplanar(BasicTypes::TArray<CoreUObject::FVector> Points, float Tolerance);
        float STATIC_PerlinNoise1D(float Value);
        int32_t STATIC_Percent_IntInt(int32_t A, int32_t B);
        float STATIC_Percent_FloatFloat(float A, float B);
        uint8_t STATIC_Percent_ByteByte(uint8_t A, uint8_t B);
        int32_t STATIC_Or_IntInt(int32_t A, int32_t B);
        CoreUObject::FDateTime STATIC_Now();
        bool STATIC_NotEqual_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B, float ErrorTolerance);
        bool STATIC_NotEqual_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B, float ErrorTolerance);
        bool STATIC_NotEqual_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_NotEqual_RotatorRotator(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B, float ErrorTolerance);
        bool STATIC_NotEqual_ObjectObject(CoreUObject::UObject* A, CoreUObject::UObject* B);
        bool STATIC_NotEqual_NameName(const BasicTypes::FName& A, const BasicTypes::FName& B);
        bool STATIC_NotEqual_IntInt(int32_t A, int32_t B);
        bool STATIC_NotEqual_FloatFloat(float A, float B);
        bool STATIC_NotEqual_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_NotEqual_ClassClass(CoreUObject::UObject* A, CoreUObject::UObject* B);
        bool STATIC_NotEqual_ByteByte(uint8_t A, uint8_t B);
        bool STATIC_NotEqual_BoolBool(bool A, bool B);
        bool STATIC_Not_PreBool(bool A);
        int32_t STATIC_Not_Int(int32_t A);
        float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
        CoreUObject::FRotator STATIC_NormalizedDeltaRotator(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B);
        float STATIC_NormalizeAxis(float Angle);
        CoreUObject::FVector2D STATIC_Normal2D(const CoreUObject::FVector2D& A);
        CoreUObject::FVector STATIC_Normal(const CoreUObject::FVector& A);
        CoreUObject::FVector STATIC_NegateVector(const CoreUObject::FVector& A);
        CoreUObject::FRotator STATIC_NegateRotator(const CoreUObject::FRotator& A);
        bool STATIC_NearlyEqual_TransformTransform(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
        bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
        float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
        float STATIC_MultiplyByPi(float Value);
        CoreUObject::FVector STATIC_Multiply_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_Multiply_VectorInt(const CoreUObject::FVector& A, int32_t B);
        CoreUObject::FVector STATIC_Multiply_VectorFloat(const CoreUObject::FVector& A, float B);
        CoreUObject::FVector2D STATIC_Multiply_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        CoreUObject::FVector2D STATIC_Multiply_Vector2DFloat(const CoreUObject::FVector2D& A, float B);
        CoreUObject::FTimespan STATIC_Multiply_TimespanFloat(const CoreUObject::FTimespan& A, float Scalar);
        CoreUObject::FRotator STATIC_Multiply_RotatorInt(const CoreUObject::FRotator& A, int32_t B);
        CoreUObject::FRotator STATIC_Multiply_RotatorFloat(const CoreUObject::FRotator& A, float B);
        CoreUObject::FLinearColor STATIC_Multiply_LinearColorLinearColor(const CoreUObject::FLinearColor& A, const CoreUObject::FLinearColor& B);
        CoreUObject::FLinearColor STATIC_Multiply_LinearColorFloat(const CoreUObject::FLinearColor& A, float B);
        int32_t STATIC_Multiply_IntInt(int32_t A, int32_t B);
        float STATIC_Multiply_IntFloat(int32_t A, float B);
        float STATIC_Multiply_FloatFloat(float A, float B);
        uint8_t STATIC_Multiply_ByteByte(uint8_t A, uint8_t B);
        CoreUObject::FVector STATIC_MirrorVectorByNormal(const CoreUObject::FVector& InVect, const CoreUObject::FVector& InNormal);
        void STATIC_MinOfIntArray(BasicTypes::TArray<int32_t> IntArray, int32_t* IndexOfMinValue, int32_t* MinValue);
        void STATIC_MinOfFloatArray(BasicTypes::TArray<float> FloatArray, int32_t* IndexOfMinValue, float* MinValue);
        void STATIC_MinOfByteArray(BasicTypes::TArray<uint8_t> ByteArray, int32_t* IndexOfMinValue, uint8_t* MinValue);
        void STATIC_MinimumAreaRectangle(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<CoreUObject::FVector> InVerts, const CoreUObject::FVector& SampleSurfaceNormal, CoreUObject::FVector* OutRectCenter, CoreUObject::FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
        int32_t STATIC_Min(int32_t A, int32_t B);
        void STATIC_MaxOfIntArray(BasicTypes::TArray<int32_t> IntArray, int32_t* IndexOfMaxValue, int32_t* MaxValue);
        void STATIC_MaxOfFloatArray(BasicTypes::TArray<float> FloatArray, int32_t* IndexOfMaxValue, float* MaxValue);
        void STATIC_MaxOfByteArray(BasicTypes::TArray<uint8_t> ByteArray, int32_t* IndexOfMaxValue, uint8_t* MaxValue);
        int32_t STATIC_Max(int32_t A, int32_t B);
        CoreUObject::FVector STATIC_Matrix_GetOrigin(const CoreUObject::FMatrix& InMatrix);
        float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
        float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
        CoreUObject::FVector2D STATIC_MakeVector2D(float X, float Y);
        CoreUObject::FVector STATIC_MakeVector(float X, float Y, float Z);
        CoreUObject::FTransform STATIC_MakeTransform(const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation, const CoreUObject::FVector& Scale);
        CoreUObject::FTimespan STATIC_MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);
        CoreUObject::FTimespan STATIC_MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);
        CoreUObject::FRotator STATIC_MakeRotFromZY(const CoreUObject::FVector& Z, const CoreUObject::FVector& Y);
        CoreUObject::FRotator STATIC_MakeRotFromZX(const CoreUObject::FVector& Z, const CoreUObject::FVector& X);
        CoreUObject::FRotator STATIC_MakeRotFromZ(const CoreUObject::FVector& Z);
        CoreUObject::FRotator STATIC_MakeRotFromYZ(const CoreUObject::FVector& Y, const CoreUObject::FVector& Z);
        CoreUObject::FRotator STATIC_MakeRotFromYX(const CoreUObject::FVector& Y, const CoreUObject::FVector& X);
        CoreUObject::FRotator STATIC_MakeRotFromY(const CoreUObject::FVector& Y);
        CoreUObject::FRotator STATIC_MakeRotFromXZ(const CoreUObject::FVector& X, const CoreUObject::FVector& Z);
        CoreUObject::FRotator STATIC_MakeRotFromXY(const CoreUObject::FVector& X, const CoreUObject::FVector& Y);
        CoreUObject::FRotator STATIC_MakeRotFromX(const CoreUObject::FVector& X);
        CoreUObject::FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);
        CoreUObject::FRotator STATIC_MakeRotationFromAxes(const CoreUObject::FVector& Forward, const CoreUObject::FVector& Right, const CoreUObject::FVector& Up);
        CoreUObject::FRandomStream STATIC_MakeRandomStream(int32_t InitialSeed);
        CoreUObject::FQualifiedFrameTime STATIC_MakeQualifiedFrameTime(const CoreUObject::FFrameNumber& Frame, const CoreUObject::FFrameRate& FrameRate, float SubFrame);
        float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
        CoreUObject::FPlane STATIC_MakePlaneFromPointAndNormal(const CoreUObject::FVector& Point, const CoreUObject::FVector& Normal);
        CoreUObject::FFrameRate STATIC_MakeFrameRate(int32_t Numerator, int32_t Denominator);
        CoreUObject::FDateTime STATIC_MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond);
        CoreUObject::FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
        CoreUObject::FBox2D STATIC_MakeBox2D(const CoreUObject::FVector2D& Min, const CoreUObject::FVector2D& Max);
        CoreUObject::FBox STATIC_MakeBox(const CoreUObject::FVector& Min, const CoreUObject::FVector& Max);
        float STATIC_Loge(float A);
        float STATIC_Log(float A, float Base);
        bool STATIC_LinePlaneIntersection_OriginNormal(const CoreUObject::FVector& LineStart, const CoreUObject::FVector& LineEnd, const CoreUObject::FVector& PlaneOrigin, const CoreUObject::FVector& PlaneNormal, float* T, CoreUObject::FVector* Intersection);
        bool STATIC_LinePlaneIntersection(const CoreUObject::FVector& LineStart, const CoreUObject::FVector& LineEnd, const CoreUObject::FPlane& APlane, float* T, CoreUObject::FVector* Intersection);
        CoreUObject::FLinearColor STATIC_LinearColorLerpUsingHSV(const CoreUObject::FLinearColor& A, const CoreUObject::FLinearColor& B, float Alpha);
        CoreUObject::FLinearColor STATIC_LinearColorLerp(const CoreUObject::FLinearColor& A, const CoreUObject::FLinearColor& B, float Alpha);
        CoreUObject::FVector STATIC_LessLess_VectorRotator(const CoreUObject::FVector& A, const CoreUObject::FRotator& B);
        bool STATIC_LessEqual_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_LessEqual_IntInt(int32_t A, int32_t B);
        bool STATIC_LessEqual_FloatFloat(float A, float B);
        bool STATIC_LessEqual_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_LessEqual_ByteByte(uint8_t A, uint8_t B);
        bool STATIC_Less_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_Less_IntInt(int32_t A, int32_t B);
        bool STATIC_Less_FloatFloat(float A, float B);
        bool STATIC_Less_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_Less_ByteByte(uint8_t A, uint8_t B);
        float STATIC_Lerp(float A, float B, float Alpha);
        bool STATIC_IsPointInBoxWithTransform(const CoreUObject::FVector& Point, const CoreUObject::FTransform& BoxWorldTransform, const CoreUObject::FVector& BoxExtent);
        bool STATIC_IsPointInBox(const CoreUObject::FVector& Point, const CoreUObject::FVector& BoxOrigin, const CoreUObject::FVector& BoxExtent);
        bool STATIC_IsMorning(const CoreUObject::FDateTime& A);
        bool STATIC_IsLeapYear(int32_t Year);
        bool STATIC_IsAfternoon(const CoreUObject::FDateTime& A);
        CoreUObject::FTransform STATIC_InvertTransform(const CoreUObject::FTransform& T);
        CoreUObject::FRotator STATIC_InverseTransformRotation(const CoreUObject::FTransform& T, const CoreUObject::FRotator& Rotation);
        CoreUObject::FVector STATIC_InverseTransformLocation(const CoreUObject::FTransform& T, const CoreUObject::FVector& Location);
        CoreUObject::FVector STATIC_InverseTransformDirection(const CoreUObject::FTransform& T, const CoreUObject::FVector& Direction);
        bool STATIC_InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);
        bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
        float STATIC_Hypotenuse(float Width, float Height);
        void STATIC_HSVToRGB_Vector(const CoreUObject::FLinearColor& HSV, CoreUObject::FLinearColor* RGB);
        CoreUObject::FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
        float STATIC_GridSnap_Float(float Location, float GridSize);
        CoreUObject::FVector STATIC_GreaterGreater_VectorRotator(const CoreUObject::FVector& A, const CoreUObject::FRotator& B);
        bool STATIC_GreaterEqual_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_GreaterEqual_IntInt(int32_t A, int32_t B);
        bool STATIC_GreaterEqual_FloatFloat(float A, float B);
        bool STATIC_GreaterEqual_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_GreaterEqual_ByteByte(uint8_t A, uint8_t B);
        bool STATIC_Greater_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_Greater_IntInt(int32_t A, int32_t B);
        bool STATIC_Greater_FloatFloat(float A, float B);
        bool STATIC_Greater_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_Greater_ByteByte(uint8_t A, uint8_t B);
        int32_t STATIC_GetYear(const CoreUObject::FDateTime& A);
        void STATIC_GetYawPitchFromVector(const CoreUObject::FVector& InVec, float* Yaw, float* Pitch);
        CoreUObject::FVector STATIC_GetVectorArrayAverage(BasicTypes::TArray<CoreUObject::FVector> Vectors);
        CoreUObject::FVector STATIC_GetUpVector(const CoreUObject::FRotator& InRot);
        float STATIC_GetTotalSeconds(const CoreUObject::FTimespan& A);
        float STATIC_GetTotalMinutes(const CoreUObject::FTimespan& A);
        float STATIC_GetTotalMilliseconds(const CoreUObject::FTimespan& A);
        float STATIC_GetTotalHours(const CoreUObject::FTimespan& A);
        float STATIC_GetTotalDays(const CoreUObject::FTimespan& A);
        CoreUObject::FTimespan STATIC_GetTimeOfDay(const CoreUObject::FDateTime& A);
        float STATIC_GetTAU();
        void STATIC_GetSlopeDegreeAngles(const CoreUObject::FVector& MyRightYAxis, const CoreUObject::FVector& FloorNormal, const CoreUObject::FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);
        int32_t STATIC_GetSeconds(const CoreUObject::FTimespan& A);
        int32_t STATIC_GetSecond(const CoreUObject::FDateTime& A);
        CoreUObject::FVector STATIC_GetRightVector(const CoreUObject::FRotator& InRot);
        CoreUObject::FVector STATIC_GetReflectionVector(const CoreUObject::FVector& Direction, const CoreUObject::FVector& SurfaceNormal);
        float STATIC_GetPointDistanceToSegment(const CoreUObject::FVector& Point, const CoreUObject::FVector& SegmentStart, const CoreUObject::FVector& SegmentEnd);
        float STATIC_GetPointDistanceToLine(const CoreUObject::FVector& Point, const CoreUObject::FVector& LineOrigin, const CoreUObject::FVector& LineDirection);
        float STATIC_GetPI();
        int32_t STATIC_GetMonth(const CoreUObject::FDateTime& A);
        int32_t STATIC_GetMinutes(const CoreUObject::FTimespan& A);
        int32_t STATIC_GetMinute(const CoreUObject::FDateTime& A);
        float STATIC_GetMinElement(const CoreUObject::FVector& A);
        int32_t STATIC_GetMilliseconds(const CoreUObject::FTimespan& A);
        int32_t STATIC_GetMillisecond(const CoreUObject::FDateTime& A);
        float STATIC_GetMaxElement(const CoreUObject::FVector& A);
        int32_t STATIC_GetHours(const CoreUObject::FTimespan& A);
        int32_t STATIC_GetHour12(const CoreUObject::FDateTime& A);
        int32_t STATIC_GetHour(const CoreUObject::FDateTime& A);
        CoreUObject::FVector STATIC_GetForwardVector(const CoreUObject::FRotator& InRot);
        CoreUObject::FTimespan STATIC_GetDuration(const CoreUObject::FTimespan& A);
        CoreUObject::FVector STATIC_GetDirectionUnitVector(const CoreUObject::FVector& From, const CoreUObject::FVector& To);
        int32_t STATIC_GetDays(const CoreUObject::FTimespan& A);
        int32_t STATIC_GetDayOfYear(const CoreUObject::FDateTime& A);
        int32_t STATIC_GetDay(const CoreUObject::FDateTime& A);
        CoreUObject::FDateTime STATIC_GetDate(const CoreUObject::FDateTime& A);
        void STATIC_GetAzimuthAndElevation(const CoreUObject::FVector& InDirection, const CoreUObject::FTransform& ReferenceFrame, float* Azimuth, float* Elevation);
        void STATIC_GetAxes(const CoreUObject::FRotator& A, CoreUObject::FVector* X, CoreUObject::FVector* Y, CoreUObject::FVector* Z);
        CoreUObject::FIntVector STATIC_FTruncVector(const CoreUObject::FVector& InVector);
        int32_t STATIC_FTrunc(float A);
        CoreUObject::FTimespan STATIC_FromSeconds(float Seconds);
        CoreUObject::FTimespan STATIC_FromMinutes(float Minutes);
        CoreUObject::FTimespan STATIC_FromMilliseconds(float Milliseconds);
        CoreUObject::FTimespan STATIC_FromHours(float Hours);
        CoreUObject::FTimespan STATIC_FromDays(float Days);
        float STATIC_Fraction(float A);
        int32_t STATIC_FMod(float Dividend, float Divisor, float* Remainder);
        float STATIC_FMin(float A, float B);
        float STATIC_FMax(float A, float B);
        float STATIC_FloatSpringInterp(float Current, float Target, Engine::FFloatSpringState* SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
        float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
        float STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
        float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
        float STATIC_FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
        void STATIC_FindNearestPointsOnLineSegments(const CoreUObject::FVector& Segment1Start, const CoreUObject::FVector& Segment1End, const CoreUObject::FVector& Segment2Start, const CoreUObject::FVector& Segment2End, CoreUObject::FVector* Segment1Point, CoreUObject::FVector* Segment2Point);
        CoreUObject::FRotator STATIC_FindLookAtRotation(const CoreUObject::FVector& Start, const CoreUObject::FVector& Target);
        CoreUObject::FVector STATIC_FindClosestPointOnSegment(const CoreUObject::FVector& Point, const CoreUObject::FVector& SegmentStart, const CoreUObject::FVector& SegmentEnd);
        CoreUObject::FVector STATIC_FindClosestPointOnLine(const CoreUObject::FVector& Point, const CoreUObject::FVector& LineOrigin, const CoreUObject::FVector& LineDirection);
        int32_t STATIC_FFloor(float A);
        float STATIC_FClamp(float Value, float Min, float Max);
        int32_t STATIC_FCeil(float A);
        float STATIC_Exp(float A);
        bool STATIC_EqualEqual_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B, float ErrorTolerance);
        bool STATIC_EqualEqual_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B, float ErrorTolerance);
        bool STATIC_EqualEqual_TransformTransform(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B);
        bool STATIC_EqualEqual_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        bool STATIC_EqualEqual_RotatorRotator(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B, float ErrorTolerance);
        bool STATIC_EqualEqual_ObjectObject(CoreUObject::UObject* A, CoreUObject::UObject* B);
        bool STATIC_EqualEqual_NameName(const BasicTypes::FName& A, const BasicTypes::FName& B);
        bool STATIC_EqualEqual_IntInt(int32_t A, int32_t B);
        bool STATIC_EqualEqual_FloatFloat(float A, float B);
        bool STATIC_EqualEqual_DateTimeDateTime(const CoreUObject::FDateTime& A, const CoreUObject::FDateTime& B);
        bool STATIC_EqualEqual_ClassClass(CoreUObject::UObject* A, CoreUObject::UObject* B);
        bool STATIC_EqualEqual_ByteByte(uint8_t A, uint8_t B);
        bool STATIC_EqualEqual_BoolBool(bool A, bool B);
        float STATIC_Ease(float A, float B, float Alpha, Engine::EEasingFunc EasingFunc, float BlendExp, int32_t Steps);
        float STATIC_DotProduct2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        float STATIC_Dot_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_Divide_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_Divide_VectorInt(const CoreUObject::FVector& A, int32_t B);
        CoreUObject::FVector STATIC_Divide_VectorFloat(const CoreUObject::FVector& A, float B);
        CoreUObject::FVector2D STATIC_Divide_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        CoreUObject::FVector2D STATIC_Divide_Vector2DFloat(const CoreUObject::FVector2D& A, float B);
        CoreUObject::FTimespan STATIC_Divide_TimespanFloat(const CoreUObject::FTimespan& A, float Scalar);
        int32_t STATIC_Divide_IntInt(int32_t A, int32_t B);
        float STATIC_Divide_FloatFloat(float A, float B);
        uint8_t STATIC_Divide_ByteByte(uint8_t A, uint8_t B);
        float STATIC_DegTan(float A);
        float STATIC_DegSin(float A);
        float STATIC_DegreesToRadians(float A);
        float STATIC_DegCos(float A);
        float STATIC_DegAtan2(float A, float B);
        float STATIC_DegAtan(float A);
        float STATIC_DegAsin(float A);
        float STATIC_DegAcos(float A);
        int32_t STATIC_DaysInYear(int32_t Year);
        int32_t STATIC_DaysInMonth(int32_t Year, int32_t Month);
        CoreUObject::FDateTime STATIC_DateTimeMinValue();
        CoreUObject::FDateTime STATIC_DateTimeMaxValue();
        bool STATIC_DateTimeFromString(const BasicTypes::FString& DateTimeString, CoreUObject::FDateTime* Result);
        bool STATIC_DateTimeFromIsoString(const BasicTypes::FString& IsoString, CoreUObject::FDateTime* Result);
        float STATIC_CrossProduct2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        CoreUObject::FVector STATIC_Cross_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
        float STATIC_Cos(float A);
        CoreUObject::FTransform STATIC_ConvertTransformToRelative(const CoreUObject::FTransform& Transform, const CoreUObject::FTransform& ParentTransform);
        CoreUObject::FVector2D STATIC_Conv_VectorToVector2D(const CoreUObject::FVector& InVector);
        CoreUObject::FTransform STATIC_Conv_VectorToTransform(const CoreUObject::FVector& InLocation);
        CoreUObject::FRotator STATIC_Conv_VectorToRotator(const CoreUObject::FVector& InVec);
        CoreUObject::FLinearColor STATIC_Conv_VectorToLinearColor(const CoreUObject::FVector& InVec);
        CoreUObject::FVector STATIC_Conv_Vector2DToVector(const CoreUObject::FVector2D& InVector2D, float Z);
        CoreUObject::FVector STATIC_Conv_RotatorToVector(const CoreUObject::FRotator& InRot);
        CoreUObject::FTransform STATIC_Conv_RotatorToTransform(const CoreUObject::FRotator& InRotator);
        CoreUObject::FTransform STATIC_Conv_MatrixToTransform(const CoreUObject::FMatrix& InMatrix);
        CoreUObject::FRotator STATIC_Conv_MatrixToRotator(const CoreUObject::FMatrix& InMatrix);
        CoreUObject::FVector STATIC_Conv_LinearColorToVector(const CoreUObject::FLinearColor& InLinearColor);
        CoreUObject::FColor STATIC_Conv_LinearColorToColor(const CoreUObject::FLinearColor& InLinearColor);
        CoreUObject::FVector STATIC_Conv_IntVectorToVector(const CoreUObject::FIntVector& InIntVector);
        CoreUObject::FIntVector STATIC_Conv_IntToIntVector(int32_t inInt);
        float STATIC_Conv_IntToFloat(int32_t inInt);
        uint8_t STATIC_Conv_IntToByte(int32_t inInt);
        bool STATIC_Conv_IntToBool(int32_t inInt);
        CoreUObject::FVector STATIC_Conv_FloatToVector(float InFloat);
        CoreUObject::FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
        CoreUObject::FLinearColor STATIC_Conv_ColorToLinearColor(const CoreUObject::FColor& InColor);
        int32_t STATIC_Conv_ByteToInt(uint8_t InByte);
        float STATIC_Conv_ByteToFloat(uint8_t InByte);
        int32_t STATIC_Conv_BoolToInt(bool InBool);
        float STATIC_Conv_BoolToFloat(bool InBool);
        uint8_t STATIC_Conv_BoolToByte(bool InBool);
        CoreUObject::FTransform STATIC_ComposeTransforms(const CoreUObject::FTransform& A, const CoreUObject::FTransform& B);
        CoreUObject::FRotator STATIC_ComposeRotators(const CoreUObject::FRotator& A, const CoreUObject::FRotator& B);
        bool STATIC_ClassIsChildOf(CoreUObject::UObject* TestClass, CoreUObject::UObject* ParentClass);
        CoreUObject::FVector STATIC_ClampVectorSize(const CoreUObject::FVector& A, float Min, float Max);
        float STATIC_ClampAxis(float Angle);
        float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
        int32_t STATIC_Clamp(int32_t Value, int32_t Min, int32_t Max);
        CoreUObject::FLinearColor STATIC_CInterpTo(const CoreUObject::FLinearColor& Current, const CoreUObject::FLinearColor& Target, float DeltaTime, float InterpSpeed);
        void STATIC_BreakVector2D(const CoreUObject::FVector2D& InVec, float* X, float* Y);
        void STATIC_BreakVector(const CoreUObject::FVector& InVec, float* X, float* Y, float* Z);
        void STATIC_BreakTransform(const CoreUObject::FTransform& InTransform, CoreUObject::FVector* Location, CoreUObject::FRotator* Rotation, CoreUObject::FVector* Scale);
        void STATIC_BreakTimespan2(const CoreUObject::FTimespan& InTimespan, int32_t* Days, int32_t* Hours, int32_t* Minutes, int32_t* Seconds, int32_t* FractionNano);
        void STATIC_BreakTimespan(const CoreUObject::FTimespan& InTimespan, int32_t* Days, int32_t* Hours, int32_t* Minutes, int32_t* Seconds, int32_t* Milliseconds);
        void STATIC_BreakRotIntoAxes(const CoreUObject::FRotator& InRot, CoreUObject::FVector* X, CoreUObject::FVector* Y, CoreUObject::FVector* Z);
        void STATIC_BreakRotator(const CoreUObject::FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
        void STATIC_BreakRandomStream(const CoreUObject::FRandomStream& InRandomStream, int32_t* InitialSeed);
        void STATIC_BreakQualifiedFrameTime(const CoreUObject::FQualifiedFrameTime& InFrameTime, CoreUObject::FFrameNumber* Frame, CoreUObject::FFrameRate* FrameRate, float* SubFrame);
        void STATIC_BreakFrameRate(const CoreUObject::FFrameRate& InFrameRate, int32_t* Numerator, int32_t* Denominator);
        void STATIC_BreakDateTime(const CoreUObject::FDateTime& InDateTime, int32_t* Year, int32_t* Month, int32_t* Day, int32_t* Hour, int32_t* Minute, int32_t* Second, int32_t* Millisecond);
        void STATIC_BreakColor(const CoreUObject::FLinearColor& InColor, float* R, float* G, float* B, float* A);
        bool STATIC_BooleanXOR(bool A, bool B);
        bool STATIC_BooleanOR(bool A, bool B);
        bool STATIC_BooleanNOR(bool A, bool B);
        bool STATIC_BooleanNAND(bool A, bool B);
        bool STATIC_BooleanAND(bool A, bool B);
        uint8_t STATIC_BMin(uint8_t A, uint8_t B);
        uint8_t STATIC_BMax(uint8_t A, uint8_t B);
        float STATIC_Atan2(float A, float B);
        float STATIC_Atan(float A);
        float STATIC_Asin(float A);
        int32_t STATIC_And_IntInt(int32_t A, int32_t B);
        CoreUObject::FVector STATIC_Add_VectorVector(const CoreUObject::FVector& A, const CoreUObject::FVector& B);
        CoreUObject::FVector STATIC_Add_VectorInt(const CoreUObject::FVector& A, int32_t B);
        CoreUObject::FVector STATIC_Add_VectorFloat(const CoreUObject::FVector& A, float B);
        CoreUObject::FVector2D STATIC_Add_Vector2DVector2D(const CoreUObject::FVector2D& A, const CoreUObject::FVector2D& B);
        CoreUObject::FVector2D STATIC_Add_Vector2DFloat(const CoreUObject::FVector2D& A, float B);
        CoreUObject::FTimespan STATIC_Add_TimespanTimespan(const CoreUObject::FTimespan& A, const CoreUObject::FTimespan& B);
        int32_t STATIC_Add_IntInt(int32_t A, int32_t B);
        float STATIC_Add_FloatFloat(float A, float B);
        CoreUObject::FDateTime STATIC_Add_DateTimeTimespan(const CoreUObject::FDateTime& A, const CoreUObject::FTimespan& B);
        uint8_t STATIC_Add_ByteByte(uint8_t A, uint8_t B);
        float STATIC_Acos(float A);
        int32_t STATIC_Abs_Int(int32_t A);
        float STATIC_Abs(float A);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetMathLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
