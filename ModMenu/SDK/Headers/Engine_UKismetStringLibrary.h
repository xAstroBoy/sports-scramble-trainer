#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FRotator.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FLinearColor.h"
#include "CoreUObject_FIntVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetStringLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetStringLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        BasicTypes::FString STATIC_TrimTrailing(const BasicTypes::FString& SourceString);
        BasicTypes::FString STATIC_Trim(const BasicTypes::FString& SourceString);
        BasicTypes::FString STATIC_ToUpper(const BasicTypes::FString& SourceString);
        BasicTypes::FString STATIC_ToLower(const BasicTypes::FString& SourceString);
        BasicTypes::FString STATIC_TimeSecondsToString(float InSeconds);
        bool STATIC_StartsWith(const BasicTypes::FString& SourceString, const BasicTypes::FString& InPrefix, CoreUObject::ESearchCase SearchCase);
        bool STATIC_Split(const BasicTypes::FString& SourceString, const BasicTypes::FString& InStr, BasicTypes::FString* LeftS, BasicTypes::FString* RightS, CoreUObject::ESearchCase SearchCase, CoreUObject::ESearchDir SearchDir);
        BasicTypes::FString STATIC_RightPad(const BasicTypes::FString& SourceString, int32_t ChCount);
        BasicTypes::FString STATIC_RightChop(const BasicTypes::FString& SourceString, int32_t Count);
        BasicTypes::FString STATIC_Right(const BasicTypes::FString& SourceString, int32_t Count);
        BasicTypes::FString STATIC_Reverse(const BasicTypes::FString& SourceString);
        int32_t STATIC_ReplaceInline(BasicTypes::FString* SourceString, const BasicTypes::FString& SearchText, const BasicTypes::FString& ReplacementText, CoreUObject::ESearchCase SearchCase);
        BasicTypes::FString STATIC_Replace(const BasicTypes::FString& SourceString, const BasicTypes::FString& From, const BasicTypes::FString& To, CoreUObject::ESearchCase SearchCase);
        BasicTypes::TArray<BasicTypes::FString> STATIC_ParseIntoArray(const BasicTypes::FString& SourceString, const BasicTypes::FString& Delimiter, bool CullEmptyStrings);
        bool STATIC_NotEqual_StrStr(const BasicTypes::FString& A, const BasicTypes::FString& B);
        bool STATIC_NotEqual_StriStri(const BasicTypes::FString& A, const BasicTypes::FString& B);
        BasicTypes::FString STATIC_Mid(const BasicTypes::FString& SourceString, int32_t Start, int32_t Count);
        bool STATIC_MatchesWildcard(const BasicTypes::FString& SourceString, const BasicTypes::FString& Wildcard, CoreUObject::ESearchCase SearchCase);
        int32_t STATIC_Len(const BasicTypes::FString& S);
        BasicTypes::FString STATIC_LeftPad(const BasicTypes::FString& SourceString, int32_t ChCount);
        BasicTypes::FString STATIC_LeftChop(const BasicTypes::FString& SourceString, int32_t Count);
        BasicTypes::FString STATIC_Left(const BasicTypes::FString& SourceString, int32_t Count);
        BasicTypes::FString STATIC_JoinStringArray(BasicTypes::TArray<BasicTypes::FString> SourceArray, const BasicTypes::FString& Separator);
        bool STATIC_IsNumeric(const BasicTypes::FString& SourceString);
        BasicTypes::FString STATIC_GetSubstring(const BasicTypes::FString& SourceString, int32_t StartIndex, int32_t Length);
        int32_t STATIC_GetCharacterAsNumber(const BasicTypes::FString& SourceString, int32_t Index);
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetCharacterArrayFromString(const BasicTypes::FString& SourceString);
        int32_t STATIC_FindSubstring(const BasicTypes::FString& SearchIn, const BasicTypes::FString& Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);
        bool STATIC_EqualEqual_StrStr(const BasicTypes::FString& A, const BasicTypes::FString& B);
        bool STATIC_EqualEqual_StriStri(const BasicTypes::FString& A, const BasicTypes::FString& B);
        bool STATIC_EndsWith(const BasicTypes::FString& SourceString, const BasicTypes::FString& InSuffix, CoreUObject::ESearchCase SearchCase);
        int32_t STATIC_CullArray(const BasicTypes::FString& SourceString, BasicTypes::TArray<BasicTypes::FString>* inArray);
        BasicTypes::FString STATIC_Conv_VectorToString(const CoreUObject::FVector& InVec);
        BasicTypes::FString STATIC_Conv_Vector2dToString(const CoreUObject::FVector2D& InVec);
        BasicTypes::FString STATIC_Conv_TransformToString(const CoreUObject::FTransform& InTrans);
        void STATIC_Conv_StringToVector2D(const BasicTypes::FString& inString, CoreUObject::FVector2D* OutConvertedVector2D, bool* OutIsValid);
        void STATIC_Conv_StringToVector(const BasicTypes::FString& inString, CoreUObject::FVector* OutConvertedVector, bool* OutIsValid);
        void STATIC_Conv_StringToRotator(const BasicTypes::FString& inString, CoreUObject::FRotator* OutConvertedRotator, bool* OutIsValid);
        BasicTypes::FName STATIC_Conv_StringToName(const BasicTypes::FString& inString);
        int32_t STATIC_Conv_StringToInt(const BasicTypes::FString& inString);
        float STATIC_Conv_StringToFloat(const BasicTypes::FString& inString);
        void STATIC_Conv_StringToColor(const BasicTypes::FString& inString, CoreUObject::FLinearColor* OutConvertedColor, bool* OutIsValid);
        BasicTypes::FString STATIC_Conv_RotatorToString(const CoreUObject::FRotator& InRot);
        BasicTypes::FString STATIC_Conv_ObjectToString(CoreUObject::UObject* InObj);
        BasicTypes::FString STATIC_Conv_NameToString(const BasicTypes::FName& InName);
        BasicTypes::FString STATIC_Conv_IntVectorToString(const CoreUObject::FIntVector& InIntVec);
        BasicTypes::FString STATIC_Conv_IntToString(int32_t inInt);
        BasicTypes::FString STATIC_Conv_FloatToString(float InFloat);
        BasicTypes::FString STATIC_Conv_ColorToString(const CoreUObject::FLinearColor& InColor);
        BasicTypes::FString STATIC_Conv_ByteToString(uint8_t InByte);
        BasicTypes::FString STATIC_Conv_BoolToString(bool InBool);
        bool STATIC_Contains(const BasicTypes::FString& SearchIn, const BasicTypes::FString& Substring, bool bUseCase, bool bSearchFromEnd);
        BasicTypes::FString STATIC_Concat_StrStr(const BasicTypes::FString& A, const BasicTypes::FString& B);
        BasicTypes::FString STATIC_BuildString_Vector2d(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const CoreUObject::FVector2D& InVector2D, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Vector(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const CoreUObject::FVector& InVector, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Rotator(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const CoreUObject::FRotator& InRot, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Object(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, CoreUObject::UObject* InObj, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Name(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const BasicTypes::FName& InName, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_IntVector(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const CoreUObject::FIntVector& InIntVector, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Int(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, int32_t inInt, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Float(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, float InFloat, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Color(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, const CoreUObject::FLinearColor& InColor, const BasicTypes::FString& Suffix);
        BasicTypes::FString STATIC_BuildString_Bool(const BasicTypes::FString& AppendTo, const BasicTypes::FString& Prefix, bool InBool, const BasicTypes::FString& Suffix);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetStringLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
