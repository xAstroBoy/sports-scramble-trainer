#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FPrimaryAssetId.h"
#include "CoreUObject_FVector.h"
#include "Engine_ENUMS.h"
#include "Engine_FHitResult.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FText.h"
#include "Engine_FUserActivity.h"
#include "CoreUObject_FTransform.h"
#include "Engine_FGenericStruct.h"
#include "BasicTypes_TSoftObjectPtr.h"
#include "CoreUObject_UObject.h"
#include "BasicTypes_TSoftClassPtr.h"
#include "CoreUObject_FRotator.h"
#include "BasicTypes_TScriptInterface.h"
#include "CoreUObject_IInterface.h"
#include "Engine_FCollisionProfileName.h"
#include "Engine_FLatentActionInfo.h"
#include "CoreUObject_FPrimaryAssetType.h"
#include "CoreUObject_FSoftObjectPath.h"
#include "CoreUObject_FSoftClassPath.h"
#include "BasicTypes_UScriptDelegate.h"
#include "Engine_FTimerHandle.h"
#include "CoreUObject_FIntPoint.h"
#include "CoreUObject_FPlane.h"
#include "Engine_FDebugFloatHistory.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class ACameraActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetSystemLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetSystemLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UnregisterForRemoteNotifications();
        void STATIC_UnloadPrimaryAssetList(BasicTypes::TArray<CoreUObject::FPrimaryAssetId> PrimaryAssetIdList);
        void STATIC_UnloadPrimaryAsset(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        void STATIC_TransactObject(CoreUObject::UObject* Object);
        void STATIC_StackTrace();
        bool STATIC_SphereTraceSingleForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereTraceSingleByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereTraceSingle(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereTraceMultiForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereTraceMultiByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereTraceMulti(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_SphereOverlapComponents(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& SpherePos, float SphereRadius, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ComponentClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComponents);
        bool STATIC_SphereOverlapActors(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& SpherePos, float SphereRadius, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ActorClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void STATIC_ShowPlatformSpecificLeaderboardScreen(const BasicTypes::FString& CategoryName);
        void STATIC_ShowPlatformSpecificAchievementsScreen(Engine::APlayerController* SpecificPlayer);
        void STATIC_ShowInterstitialAd();
        void STATIC_ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);
        void STATIC_SetWindowTitle(const BasicTypes::FText& Title);
        void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);
        void STATIC_SetVectorPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const CoreUObject::FVector& Value);
        void STATIC_SetUserActivity(const Engine::FUserActivity& UserActivity);
        void STATIC_SetTransformPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const CoreUObject::FTransform& Value);
        void STATIC_SetTextPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const BasicTypes::FText& Value);
        void STATIC_SetSuppressViewportTransitionMessage(CoreUObject::UObject* WorldContextObject, bool bState);
        void STATIC_SetStructurePropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const Engine::FGenericStruct& Value);
        void STATIC_SetStringPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const BasicTypes::FString& Value);
        void STATIC_SetSoftObjectPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, BasicTypes::TSoftObjectPtr<CoreUObject::UObject> Value);
        void STATIC_SetSoftClassPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, BasicTypes::TSoftClassPtr<CoreUObject::UObject> Value);
        void STATIC_SetRotatorPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const CoreUObject::FRotator& Value);
        void STATIC_SetObjectPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, CoreUObject::UObject* Value);
        void STATIC_SetNamePropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const BasicTypes::FName& Value);
        void STATIC_SetLinearColorPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const CoreUObject::FLinearColor& Value);
        void STATIC_SetIntPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, int32_t Value);
        void STATIC_SetInterfacePropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const BasicTypes::TScriptInterface<CoreUObject::IInterface>& Value);
        void STATIC_SetFloatPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, float Value);
        void STATIC_SetCollisionProfileNameProperty(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, const Engine::FCollisionProfileName& Value);
        void STATIC_SetClassPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, CoreUObject::UObject* Value);
        void STATIC_SetBytePropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, uint8_t Value);
        void STATIC_SetBoolPropertyByName(CoreUObject::UObject* Object, const BasicTypes::FName& PropertyName, bool Value);
        void STATIC_RetriggerableDelay(CoreUObject::UObject* WorldContextObject, float Duration, const Engine::FLatentActionInfo& LatentInfo);
        void STATIC_ResetGamepadAssignmentToController(int32_t ControllerId);
        void STATIC_ResetGamepadAssignments();
        void STATIC_RegisterForRemoteNotifications();
        void STATIC_QuitGame(CoreUObject::UObject* WorldContextObject, Engine::APlayerController* SpecificPlayer, Engine::EQuitPreference QuitPreference, bool bIgnorePlatformRestrictions);
        void STATIC_PrintWarning(const BasicTypes::FString& inString);
        void STATIC_PrintText(CoreUObject::UObject* WorldContextObject, const BasicTypes::FText& InText, bool bPrintToScreen, bool bPrintToLog, const CoreUObject::FLinearColor& TextColor, float Duration);
        void STATIC_PrintString(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& inString, bool bPrintToScreen, bool bPrintToLog, const CoreUObject::FLinearColor& TextColor, float Duration);
        void OnAssetLoaded__DelegateSignature(CoreUObject::UObject* Loaded);
        void OnAssetClassLoaded__DelegateSignature(CoreUObject::UObject* Loaded);
        bool STATIC_NotEqual_SoftObjectReference(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> A, BasicTypes::TSoftObjectPtr<CoreUObject::UObject> B);
        bool STATIC_NotEqual_SoftClassReference(BasicTypes::TSoftClassPtr<CoreUObject::UObject> A, BasicTypes::TSoftClassPtr<CoreUObject::UObject> B);
        bool STATIC_NotEqual_PrimaryAssetType(const CoreUObject::FPrimaryAssetType& A, const CoreUObject::FPrimaryAssetType& B);
        bool STATIC_NotEqual_PrimaryAssetId(const CoreUObject::FPrimaryAssetId& A, const CoreUObject::FPrimaryAssetId& B);
        BasicTypes::FString STATIC_NormalizeFilename(const BasicTypes::FString& InFilename);
        void STATIC_MoveComponentTo(Engine::USceneComponent* Component, const CoreUObject::FVector& TargetRelativeLocation, const CoreUObject::FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, Engine::EMoveComponentAction MoveAction, const Engine::FLatentActionInfo& LatentInfo);
        CoreUObject::FSoftObjectPath STATIC_MakeSoftObjectPath(const BasicTypes::FString& PathString);
        CoreUObject::FSoftClassPath STATIC_MakeSoftClassPath(const BasicTypes::FString& PathString);
        BasicTypes::FText STATIC_MakeLiteralText(const BasicTypes::FText& Value);
        BasicTypes::FString STATIC_MakeLiteralString(const BasicTypes::FString& Value);
        BasicTypes::FName STATIC_MakeLiteralName(const BasicTypes::FName& Value);
        int32_t STATIC_MakeLiteralInt(int32_t Value);
        float STATIC_MakeLiteralFloat(float Value);
        uint8_t STATIC_MakeLiteralByte(uint8_t Value);
        bool STATIC_MakeLiteralBool(bool Value);
        void STATIC_LoadInterstitialAd(int32_t AdIdIndex);
        void STATIC_LoadAssetClass(CoreUObject::UObject* WorldContextObject, BasicTypes::TSoftClassPtr<CoreUObject::UObject> AssetClass, const BasicTypes::UScriptDelegate& OnLoaded, const Engine::FLatentActionInfo& LatentInfo);
        void STATIC_LoadAsset(CoreUObject::UObject* WorldContextObject, BasicTypes::TSoftObjectPtr<CoreUObject::UObject> Asset, const BasicTypes::UScriptDelegate& OnLoaded, const Engine::FLatentActionInfo& LatentInfo);
        bool STATIC_LineTraceSingleForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_LineTraceSingleByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_LineTraceSingle(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_LineTraceMultiForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_LineTraceMultiByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_LineTraceMulti(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        void STATIC_LaunchURL(const BasicTypes::FString& URL);
        void STATIC_K2_UnPauseTimerHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        void STATIC_K2_UnPauseTimerDelegate(const BasicTypes::UScriptDelegate& Delegate);
        void STATIC_K2_UnPauseTimer(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        bool STATIC_K2_TimerExistsHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        bool STATIC_K2_TimerExistsDelegate(const BasicTypes::UScriptDelegate& Delegate);
        bool STATIC_K2_TimerExists(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        Engine::FTimerHandle STATIC_K2_SetTimerDelegate(const BasicTypes::UScriptDelegate& Delegate, float Time, bool bLooping);
        Engine::FTimerHandle STATIC_K2_SetTimer(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName, float Time, bool bLooping);
        void STATIC_K2_PauseTimerHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        void STATIC_K2_PauseTimerDelegate(const BasicTypes::UScriptDelegate& Delegate);
        void STATIC_K2_PauseTimer(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        bool STATIC_K2_IsValidTimerHandle(const Engine::FTimerHandle& Handle);
        bool STATIC_K2_IsTimerPausedHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        bool STATIC_K2_IsTimerPausedDelegate(const BasicTypes::UScriptDelegate& Delegate);
        bool STATIC_K2_IsTimerPaused(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        bool STATIC_K2_IsTimerActiveHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        bool STATIC_K2_IsTimerActiveDelegate(const BasicTypes::UScriptDelegate& Delegate);
        bool STATIC_K2_IsTimerActive(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        Engine::FTimerHandle STATIC_K2_InvalidateTimerHandle(Engine::FTimerHandle* Handle);
        float STATIC_K2_GetTimerRemainingTimeHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        float STATIC_K2_GetTimerRemainingTimeDelegate(const BasicTypes::UScriptDelegate& Delegate);
        float STATIC_K2_GetTimerRemainingTime(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        float STATIC_K2_GetTimerElapsedTimeHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        float STATIC_K2_GetTimerElapsedTimeDelegate(const BasicTypes::UScriptDelegate& Delegate);
        float STATIC_K2_GetTimerElapsedTime(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        void STATIC_K2_ClearTimerHandle(CoreUObject::UObject* WorldContextObject, const Engine::FTimerHandle& Handle);
        void STATIC_K2_ClearTimerDelegate(const BasicTypes::UScriptDelegate& Delegate);
        void STATIC_K2_ClearTimer(CoreUObject::UObject* Object, const BasicTypes::FString& FunctionName);
        void STATIC_K2_ClearAndInvalidateTimerHandle(CoreUObject::UObject* WorldContextObject, Engine::FTimerHandle* Handle);
        bool STATIC_IsValidSoftObjectReference(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> SoftObjectReference);
        bool STATIC_IsValidSoftClassReference(BasicTypes::TSoftClassPtr<CoreUObject::UObject> SoftClassReference);
        bool STATIC_IsValidPrimaryAssetType(const CoreUObject::FPrimaryAssetType& PrimaryAssetType);
        bool STATIC_IsValidPrimaryAssetId(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        bool STATIC_IsValidClass(CoreUObject::UObject* Class);
        bool STATIC_IsValid(CoreUObject::UObject* Object);
        bool STATIC_IsUnattended();
        bool STATIC_IsStandalone(CoreUObject::UObject* WorldContextObject);
        bool STATIC_IsServer(CoreUObject::UObject* WorldContextObject);
        bool STATIC_IsScreensaverEnabled();
        bool STATIC_IsPackagedForDistribution();
        bool STATIC_IsLoggedIn(Engine::APlayerController* SpecificPlayer);
        bool STATIC_IsInterstitialAdRequested();
        bool STATIC_IsInterstitialAdAvailable();
        bool STATIC_IsDedicatedServer(CoreUObject::UObject* WorldContextObject);
        bool STATIC_IsControllerAssignedToGamepad(int32_t ControllerId);
        void STATIC_HideAdBanner();
        bool STATIC_GetVolumeButtonsHandledBySystem();
        BasicTypes::FString STATIC_GetUniqueDeviceId();
        bool STATIC_GetSupportedFullscreenResolutions(BasicTypes::TArray<CoreUObject::FIntPoint>* Resolutions);
        BasicTypes::TSoftObjectPtr<CoreUObject::UObject> STATIC_GetSoftObjectReferenceFromPrimaryAssetId(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        BasicTypes::TSoftClassPtr<CoreUObject::UObject> STATIC_GetSoftClassReferenceFromPrimaryAssetId(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        int32_t STATIC_GetRenderingMaterialQualityLevel();
        int32_t STATIC_GetRenderingDetailMode();
        BasicTypes::FString STATIC_GetProjectSavedDirectory();
        BasicTypes::FString STATIC_GetProjectDirectory();
        BasicTypes::FString STATIC_GetProjectContentDirectory();
        void STATIC_GetPrimaryAssetsWithBundleState(BasicTypes::TArray<BasicTypes::FName> RequiredBundles, BasicTypes::TArray<BasicTypes::FName> ExcludedBundles, BasicTypes::TArray<CoreUObject::FPrimaryAssetType> ValidTypes, bool bForceCurrentState, BasicTypes::TArray<CoreUObject::FPrimaryAssetId>* OutPrimaryAssetIdList);
        void STATIC_GetPrimaryAssetIdList(const CoreUObject::FPrimaryAssetType& PrimaryAssetType, BasicTypes::TArray<CoreUObject::FPrimaryAssetId>* OutPrimaryAssetIdList);
        CoreUObject::FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftObjectReference(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> SoftObjectReference);
        CoreUObject::FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftClassReference(BasicTypes::TSoftClassPtr<CoreUObject::UObject> SoftClassReference);
        CoreUObject::FPrimaryAssetId STATIC_GetPrimaryAssetIdFromObject(CoreUObject::UObject* Object);
        CoreUObject::FPrimaryAssetId STATIC_GetPrimaryAssetIdFromClass(CoreUObject::UObject* Class);
        BasicTypes::TArray<BasicTypes::FString> STATIC_GetPreferredLanguages();
        BasicTypes::FString STATIC_GetPlatformUserName();
        BasicTypes::FString STATIC_GetPathName(CoreUObject::UObject* Object);
        BasicTypes::FString STATIC_GetObjectName(CoreUObject::UObject* Object);
        CoreUObject::UObject* STATIC_GetObjectFromPrimaryAssetId(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        int32_t STATIC_GetMinYResolutionForUI();
        int32_t STATIC_GetMinYResolutionFor3DView();
        BasicTypes::FString STATIC_GetLocalCurrencySymbol();
        BasicTypes::FString STATIC_GetLocalCurrencyCode();
        float STATIC_GetGameTimeInSeconds(CoreUObject::UObject* WorldContextObject);
        BasicTypes::FString STATIC_GetGameName();
        BasicTypes::FString STATIC_GetGameBundleId();
        BasicTypes::FString STATIC_GetEngineVersion();
        BasicTypes::FString STATIC_GetDisplayName(CoreUObject::UObject* Object);
        BasicTypes::FString STATIC_GetDeviceId();
        BasicTypes::FString STATIC_GetDefaultLocale();
        BasicTypes::FString STATIC_GetDefaultLanguage();
        bool STATIC_GetCurrentBundleState(const CoreUObject::FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, BasicTypes::TArray<BasicTypes::FName>* OutBundles);
        bool STATIC_GetConvenientWindowedResolutions(BasicTypes::TArray<CoreUObject::FIntPoint>* Resolutions);
        int32_t STATIC_GetConsoleVariableIntValue(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& VariableName);
        float STATIC_GetConsoleVariableFloatValue(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& VariableName);
        void STATIC_GetComponentBounds(Engine::USceneComponent* Component, CoreUObject::FVector* Origin, CoreUObject::FVector* BoxExtent, float* SphereRadius);
        BasicTypes::FString STATIC_GetCommandLine();
        CoreUObject::UObject* STATIC_GetClassFromPrimaryAssetId(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        BasicTypes::FString STATIC_GetClassDisplayName(CoreUObject::UObject* Class);
        int32_t STATIC_GetAdIDCount();
        void STATIC_GetActorListFromComponentList(BasicTypes::TArray<Engine::UPrimitiveComponent*> ComponentList, CoreUObject::UObject* ActorClassFilter, BasicTypes::TArray<Engine::AActor*>* OutActorList);
        void STATIC_GetActorBounds(Engine::AActor* Actor, CoreUObject::FVector* Origin, CoreUObject::FVector* BoxExtent);
        void STATIC_ForceCloseAdBanner();
        void STATIC_FlushPersistentDebugLines(CoreUObject::UObject* WorldContextObject);
        void STATIC_FlushDebugStrings(CoreUObject::UObject* WorldContextObject);
        void STATIC_ExecuteConsoleCommand(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& Command, Engine::APlayerController* SpecificPlayer);
        bool STATIC_EqualEqual_SoftObjectReference(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> A, BasicTypes::TSoftObjectPtr<CoreUObject::UObject> B);
        bool STATIC_EqualEqual_SoftClassReference(BasicTypes::TSoftClassPtr<CoreUObject::UObject> A, BasicTypes::TSoftClassPtr<CoreUObject::UObject> B);
        bool STATIC_EqualEqual_PrimaryAssetType(const CoreUObject::FPrimaryAssetType& A, const CoreUObject::FPrimaryAssetType& B);
        bool STATIC_EqualEqual_PrimaryAssetId(const CoreUObject::FPrimaryAssetId& A, const CoreUObject::FPrimaryAssetId& B);
        int32_t STATIC_EndTransaction();
        void STATIC_DrawDebugString(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& TextLocation, const BasicTypes::FString& Text, Engine::AActor* TestBaseActor, const CoreUObject::FLinearColor& TextColor, float Duration);
        void STATIC_DrawDebugSphere(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Center, float Radius, int32_t Segments, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugPoint(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Position, float Size, const CoreUObject::FLinearColor& PointColor, float Duration);
        void STATIC_DrawDebugPlane(CoreUObject::UObject* WorldContextObject, const CoreUObject::FPlane& PlaneCoordinates, const CoreUObject::FVector& Location, float Size, const CoreUObject::FLinearColor& PlaneColor, float Duration);
        void STATIC_DrawDebugLine(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& LineStart, const CoreUObject::FVector& LineEnd, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugFrustum(CoreUObject::UObject* WorldContextObject, const CoreUObject::FTransform& FrustumTransform, const CoreUObject::FLinearColor& FrustumColor, float Duration, float Thickness);
        void STATIC_DrawDebugFloatHistoryTransform(CoreUObject::UObject* WorldContextObject, const Engine::FDebugFloatHistory& FloatHistory, const CoreUObject::FTransform& DrawTransform, const CoreUObject::FVector2D& DrawSize, const CoreUObject::FLinearColor& DrawColor, float Duration);
        void STATIC_DrawDebugFloatHistoryLocation(CoreUObject::UObject* WorldContextObject, const Engine::FDebugFloatHistory& FloatHistory, const CoreUObject::FVector& DrawLocation, const CoreUObject::FVector2D& DrawSize, const CoreUObject::FLinearColor& DrawColor, float Duration);
        void STATIC_DrawDebugCylinder(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, int32_t Segments, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugCoordinateSystem(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& AxisLoc, const CoreUObject::FRotator& AxisRot, float Scale, float Duration, float Thickness);
        void STATIC_DrawDebugConeInDegrees(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Origin, const CoreUObject::FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugCone(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Origin, const CoreUObject::FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugCircle(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Center, float Radius, int32_t NumSegments, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness, const CoreUObject::FVector& YAxis, const CoreUObject::FVector& ZAxis, bool bDrawAxis);
        void STATIC_DrawDebugCapsule(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Center, float HalfHeight, float Radius, const CoreUObject::FRotator& Rotation, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        void STATIC_DrawDebugCamera(Engine::ACameraActor* CameraActor, const CoreUObject::FLinearColor& CameraColor, float Duration);
        void STATIC_DrawDebugBox(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Center, const CoreUObject::FVector& Extent, const CoreUObject::FLinearColor& LineColor, const CoreUObject::FRotator& Rotation, float Duration, float Thickness);
        void STATIC_DrawDebugArrow(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& LineStart, const CoreUObject::FVector& LineEnd, float ArrowSize, const CoreUObject::FLinearColor& LineColor, float Duration, float Thickness);
        bool STATIC_DoesImplementInterface(CoreUObject::UObject* TestObject, CoreUObject::IInterface* Interface);
        void STATIC_Delay(CoreUObject::UObject* WorldContextObject, float Duration, const Engine::FLatentActionInfo& LatentInfo);
        void STATIC_CreateCopyForUndoBuffer(CoreUObject::UObject* ObjectToModify);
        BasicTypes::FString STATIC_ConvertToRelativePath(const BasicTypes::FString& Filename);
        BasicTypes::FString STATIC_ConvertToAbsolutePath(const BasicTypes::FString& Filename);
        BasicTypes::FString STATIC_Conv_SoftObjectReferenceToString(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> SoftObjectReference);
        CoreUObject::UObject* STATIC_Conv_SoftObjectReferenceToObject(BasicTypes::TSoftObjectPtr<CoreUObject::UObject> SoftObject);
        BasicTypes::FString STATIC_Conv_SoftClassReferenceToString(BasicTypes::TSoftClassPtr<CoreUObject::UObject> SoftClassReference);
        CoreUObject::UObject* STATIC_Conv_SoftClassReferenceToClass(BasicTypes::TSoftClassPtr<CoreUObject::UObject> SoftClass);
        BasicTypes::FString STATIC_Conv_PrimaryAssetTypeToString(const CoreUObject::FPrimaryAssetType& PrimaryAssetType);
        BasicTypes::FString STATIC_Conv_PrimaryAssetIdToString(const CoreUObject::FPrimaryAssetId& PrimaryAssetId);
        BasicTypes::TSoftObjectPtr<CoreUObject::UObject> STATIC_Conv_ObjectToSoftObjectReference(CoreUObject::UObject* Object);
        CoreUObject::UObject* STATIC_Conv_InterfaceToObject(const BasicTypes::TScriptInterface<CoreUObject::IInterface>& Interface);
        BasicTypes::TSoftClassPtr<CoreUObject::UObject> STATIC_Conv_ClassToSoftClassReference(CoreUObject::UObject* Class);
        void STATIC_ControlScreensaver(bool bAllowScreenSaver);
        bool STATIC_ComponentOverlapComponents(Engine::UPrimitiveComponent* Component, const CoreUObject::FTransform& ComponentTransform, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ComponentClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComponents);
        bool STATIC_ComponentOverlapActors(Engine::UPrimitiveComponent* Component, const CoreUObject::FTransform& ComponentTransform, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ActorClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::AActor*>* OutActors);
        void STATIC_CollectGarbage();
        bool STATIC_CapsuleTraceSingleForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleTraceSingleByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleTraceSingle(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleTraceMultiForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleTraceMultiByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleTraceMulti(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, float Radius, float HalfHeight, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_CapsuleOverlapComponents(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& CapsulePos, float Radius, float HalfHeight, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ComponentClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComponents);
        bool STATIC_CapsuleOverlapActors(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& CapsulePos, float Radius, float HalfHeight, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ActorClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::AActor*>* OutActors);
        bool STATIC_CanLaunchURL(const BasicTypes::FString& URL);
        void STATIC_CancelTransaction(int32_t Index);
        void STATIC_BreakSoftObjectPath(const CoreUObject::FSoftObjectPath& InSoftObjectPath, BasicTypes::FString* PathString);
        void STATIC_BreakSoftClassPath(const CoreUObject::FSoftClassPath& InSoftClassPath, BasicTypes::FString* PathString);
        bool STATIC_BoxTraceSingleForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxTraceSingleByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxTraceSingle(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, Engine::FHitResult* OutHit, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxTraceMultiForObjects(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxTraceMultiByProfile(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, const BasicTypes::FName& ProfileName, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxTraceMulti(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& Start, const CoreUObject::FVector& End, const CoreUObject::FVector& HalfSize, const CoreUObject::FRotator& Orientation, Engine::ETraceTypeQuery TraceChannel, bool bTraceComplex, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, Engine::EDrawDebugTrace DrawDebugType, BasicTypes::TArray<Engine::FHitResult>* OutHits, bool bIgnoreSelf, const CoreUObject::FLinearColor& TraceColor, const CoreUObject::FLinearColor& TraceHitColor, float DrawTime);
        bool STATIC_BoxOverlapComponents(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& BoxPos, const CoreUObject::FVector& Extent, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ComponentClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::UPrimitiveComponent*>* OutComponents);
        bool STATIC_BoxOverlapActors(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& BoxPos, const CoreUObject::FVector& BoxExtent, BasicTypes::TArray<Engine::EObjectTypeQuery> ObjectTypes, CoreUObject::UObject* ActorClassFilter, BasicTypes::TArray<Engine::AActor*> ActorsToIgnore, BasicTypes::TArray<Engine::AActor*>* OutActors);
        int32_t STATIC_BeginTransaction(const BasicTypes::FString& Context, const BasicTypes::FText& Description, CoreUObject::UObject* PrimaryObject);
        Engine::FDebugFloatHistory STATIC_AddFloatHistorySample(float Value, const Engine::FDebugFloatHistory& FloatHistory);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetSystemLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
