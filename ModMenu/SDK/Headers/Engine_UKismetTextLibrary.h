#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FPolyglotTextData.h"
#include "BasicTypes_TArray.h"
#include "Engine_FFormatArgumentData.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FTransform.h"
#include "CoreUObject_FRotator.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FLinearColor.h"
#include "CoreUObject_FDateTime.h"
#include "CoreUObject_FTimespan.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.KismetTextLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetTextLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        BasicTypes::FText STATIC_TextTrimTrailing(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_TextTrimPrecedingAndTrailing(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_TextTrimPreceding(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_TextToUpper(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_TextToLower(const BasicTypes::FText& InText);
        bool STATIC_TextIsTransient(const BasicTypes::FText& InText);
        bool STATIC_TextIsFromStringTable(const BasicTypes::FText& Text);
        bool STATIC_TextIsEmpty(const BasicTypes::FText& InText);
        bool STATIC_TextIsCultureInvariant(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_TextFromStringTable(const BasicTypes::FName& TableId, const BasicTypes::FString& Key);
        bool STATIC_StringTableIdAndKeyFromText(const BasicTypes::FText& Text, BasicTypes::FName* OutTableId, BasicTypes::FString* OutKey);
        BasicTypes::FText STATIC_PolyglotDataToText(const CoreUObject::FPolyglotTextData& PolyglotData);
        bool STATIC_NotEqual_TextText(const BasicTypes::FText& A, const BasicTypes::FText& B);
        bool STATIC_NotEqual_IgnoreCase_TextText(const BasicTypes::FText& A, const BasicTypes::FText& B);
        void STATIC_IsPolyglotDataValid(const CoreUObject::FPolyglotTextData& PolyglotData, bool* IsValid, BasicTypes::FText* ErrorMessage);
        BasicTypes::FText STATIC_GetEmptyText();
        BasicTypes::FText STATIC_Format(const BasicTypes::FText& InPattern, BasicTypes::TArray<Engine::FFormatArgumentData> InArgs);
        bool STATIC_FindTextInLocalizationTable(const BasicTypes::FString& Namespace, const BasicTypes::FString& Key, BasicTypes::FText* OutText);
        bool STATIC_EqualEqual_TextText(const BasicTypes::FText& A, const BasicTypes::FText& B);
        bool STATIC_EqualEqual_IgnoreCase_TextText(const BasicTypes::FText& A, const BasicTypes::FText& B);
        BasicTypes::FText STATIC_Conv_VectorToText(const CoreUObject::FVector& InVec);
        BasicTypes::FText STATIC_Conv_Vector2dToText(const CoreUObject::FVector2D& InVec);
        BasicTypes::FText STATIC_Conv_TransformToText(const CoreUObject::FTransform& InTrans);
        BasicTypes::FString STATIC_Conv_TextToString(const BasicTypes::FText& InText);
        BasicTypes::FText STATIC_Conv_StringToText(const BasicTypes::FString& inString);
        BasicTypes::FText STATIC_Conv_RotatorToText(const CoreUObject::FRotator& InRot);
        BasicTypes::FText STATIC_Conv_ObjectToText(CoreUObject::UObject* InObj);
        BasicTypes::FText STATIC_Conv_NameToText(const BasicTypes::FName& InName);
        BasicTypes::FText STATIC_Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits);
        BasicTypes::FText STATIC_Conv_FloatToText(float Value, Engine::ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits);
        BasicTypes::FText STATIC_Conv_ColorToText(const CoreUObject::FLinearColor& InColor);
        BasicTypes::FText STATIC_Conv_ByteToText(uint8_t Value);
        BasicTypes::FText STATIC_Conv_BoolToText(bool InBool);
        BasicTypes::FText STATIC_AsTimeZoneTime_DateTime(const CoreUObject::FDateTime& InDateTime, const BasicTypes::FString& InTimeZone);
        BasicTypes::FText STATIC_AsTimeZoneDateTime_DateTime(const CoreUObject::FDateTime& InDateTime, const BasicTypes::FString& InTimeZone);
        BasicTypes::FText STATIC_AsTimeZoneDate_DateTime(const CoreUObject::FDateTime& InDateTime, const BasicTypes::FString& InTimeZone);
        BasicTypes::FText STATIC_AsTimespan_Timespan(const CoreUObject::FTimespan& InTimespan);
        BasicTypes::FText STATIC_AsTime_DateTime(const CoreUObject::FDateTime& In);
        BasicTypes::FText STATIC_AsPercent_Float(float Value, Engine::ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits);
        BasicTypes::FText STATIC_AsDateTime_DateTime(const CoreUObject::FDateTime& In);
        BasicTypes::FText STATIC_AsDate_DateTime(const CoreUObject::FDateTime& InDateTime);
        BasicTypes::FText STATIC_AsCurrencyBase(int32_t BaseValue, const BasicTypes::FString& CurrencyCode);
        BasicTypes::FText STATIC_AsCurrency_Integer(int32_t Value, Engine::ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, const BasicTypes::FString& CurrencyCode);
        BasicTypes::FText STATIC_AsCurrency_Float(float Value, Engine::ERoundingMode RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, const BasicTypes::FString& CurrencyCode);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.KismetTextLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
