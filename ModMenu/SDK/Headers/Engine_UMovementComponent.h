#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FVector.h"
#include "Engine_ENUMS.h"
#include "Engine_UActorComponent.h"
#include "CoreUObject_FRotator.h"
#include "Engine_FHitResult.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::Engine { class APhysicsVolume; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.MovementComponent
     * Size -> 0x0040 (FullSize[0x0130] - InheritedSize[0x00F0])
     */
    class UMovementComponent : public Engine::UActorComponent
    {
    public:
        Engine::USceneComponent*                                     UpdatedComponent;                                        //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UPrimitiveComponent*                                 UpdatedPrimitive;                                        //  BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FVector                                         Velocity;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         PlaneConstraintNormal;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FVector                                         PlaneConstraintOrigin;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         bComponentShouldUpdatePhysicsVolume : 1;                 //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoRegisterPhysicsVolumeUpdates : 1;                   //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bSnapToPlaneAtStart : 1;                                 //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bConstrainToPlane : 1;                                   //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bTickBeforeOwner : 1;                                    //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoUpdateTickRegistration : 1;                         //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUpdateOnlyIfRendered : 1;                               //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoRegisterUpdatedComponent : 1;                       //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::EPlaneConstraintAxisSetting                          PlaneConstraintAxisSetting;                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void StopMovementImmediately();
        void SnapUpdatedComponentToPlane();
        void SetUpdatedComponent(Engine::USceneComponent* NewUpdatedComponent);
        void SetPlaneConstraintOrigin(const CoreUObject::FVector& PlaneOrigin);
        void SetPlaneConstraintNormal(const CoreUObject::FVector& PlaneNormal);
        void SetPlaneConstraintFromVectors(const CoreUObject::FVector& Forward, const CoreUObject::FVector& Up);
        void SetPlaneConstraintEnabled(bool bEnabled);
        void SetPlaneConstraintAxisSetting(Engine::EPlaneConstraintAxisSetting NewAxisSetting);
        void PhysicsVolumeChanged(Engine::APhysicsVolume* NewVolume);
        bool K2_MoveUpdatedComponent(const CoreUObject::FVector& Delta, const CoreUObject::FRotator& NewRotation, Engine::FHitResult* OutHit, bool bSweep, bool bTeleport);
        float K2_GetModifiedMaxSpeed();
        float K2_GetMaxSpeedModifier();
        bool IsExceedingMaxSpeed(float MaxSpeed);
        CoreUObject::FVector GetPlaneConstraintOrigin();
        CoreUObject::FVector GetPlaneConstraintNormal();
        Engine::EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
        Engine::APhysicsVolume* GetPhysicsVolume();
        float GetMaxSpeed();
        float GetGravityZ();
        CoreUObject::FVector ConstrainNormalToPlane(const CoreUObject::FVector& Normal);
        CoreUObject::FVector ConstrainLocationToPlane(const CoreUObject::FVector& Location);
        CoreUObject::FVector ConstrainDirectionToPlane(const CoreUObject::FVector& Direction);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.MovementComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
