#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UNavMovementComponent.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APawn; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.PawnMovementComponent
     * Size -> 0x0008 (FullSize[0x0178] - InheritedSize[0x0170])
     */
    class UPawnMovementComponent : public Engine::UNavMovementComponent
    {
    public:
        Engine::APawn*                                               PawnOwner;                                               //  ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected

    public:
        CoreUObject::FVector K2_GetInputVector();
        bool IsMoveInputIgnored();
        CoreUObject::FVector GetPendingInputVector();
        Engine::APawn* GetPawnOwner();
        CoreUObject::FVector GetLastInputVector();
        CoreUObject::FVector ConsumeInputVector();
        void AddInputVector(const CoreUObject::FVector& WorldVector, bool bForce);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.PawnMovementComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
