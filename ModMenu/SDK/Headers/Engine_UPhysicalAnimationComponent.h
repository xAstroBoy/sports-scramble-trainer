#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UActorComponent.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FTransform.h"
#include "Engine_FPhysicalAnimationData.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.PhysicalAnimationComponent
     * Size -> 0x0038 (FullSize[0x0128] - InheritedSize[0x00F0])
     */
    class UPhysicalAnimationComponent : public Engine::UActorComponent
    {
    public:
        float                                                        StrengthMultiplyer;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USkeletalMeshComponent*                              SkeletalMeshComponent;                                   //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x28];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetStrengthMultiplyer(float InStrengthMultiplyer);
        void SetSkeletalMeshComponent(Engine::USkeletalMeshComponent* InSkeletalMeshComponent);
        CoreUObject::FTransform GetBodyTargetTransform(const BasicTypes::FName& BodyName);
        void ApplyPhysicalAnimationSettingsBelow(const BasicTypes::FName& BodyName, const Engine::FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
        void ApplyPhysicalAnimationSettings(const BasicTypes::FName& BodyName, const Engine::FPhysicalAnimationData& PhysicalAnimationData);
        void ApplyPhysicalAnimationProfileBelow(const BasicTypes::FName& BodyName, const BasicTypes::FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.PhysicalAnimationComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
