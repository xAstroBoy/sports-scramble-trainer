#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UActorComponent.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FVector.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UPrimitiveComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.PhysicsHandleComponent
     * Size -> 0x00B0 (FullSize[0x01A0] - InheritedSize[0x00F0])
     */
    class UPhysicsHandleComponent : public Engine::UActorComponent
    {
    public:
        Engine::UPrimitiveComponent*                                 GrabbedComponent;                                        //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         UnknownData_0001 : 1;                                    //  BIT_FIELD (PADDING)
        bool                                                         bSoftAngularConstraint : 1;                              //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bSoftLinearConstraint : 1;                               //  BIT_FIELD Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bInterpolateTarget : 1;                                  //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LinearDamping;                                           //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        LinearStiffness;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        AngularDamping;                                          //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        AngularStiffness;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x6C];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        InterpolationSpeed;                                      //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0004[0x1C];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetTargetRotation(const CoreUObject::FRotator& NewRotation);
        void SetTargetLocationAndRotation(const CoreUObject::FVector& NewLocation, const CoreUObject::FRotator& NewRotation);
        void SetTargetLocation(const CoreUObject::FVector& NewLocation);
        void SetLinearStiffness(float NewLinearStiffness);
        void SetLinearDamping(float NewLinearDamping);
        void SetInterpolationSpeed(float NewInterpolationSpeed);
        void SetAngularStiffness(float NewAngularStiffness);
        void SetAngularDamping(float NewAngularDamping);
        void ReleaseComponent();
        void GrabComponentAtLocationWithRotation(Engine::UPrimitiveComponent* Component, const BasicTypes::FName& InBoneName, const CoreUObject::FVector& Location, const CoreUObject::FRotator& Rotation);
        void GrabComponentAtLocation(Engine::UPrimitiveComponent* Component, const BasicTypes::FName& InBoneName, const CoreUObject::FVector& GrabLocation);
        void GrabComponent(Engine::UPrimitiveComponent* Component, const BasicTypes::FName& InBoneName, const CoreUObject::FVector& GrabLocation, bool bConstrainRotation);
        void GetTargetLocationAndRotation(CoreUObject::FVector* TargetLocation, CoreUObject::FRotator* TargetRotation);
        Engine::UPrimitiveComponent* GetGrabbedComponent();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.PhysicsHandleComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
