#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FSplineCurves.h"
#include "CoreUObject_FInterpCurveVector.h"
#include "CoreUObject_FInterpCurveQuat.h"
#include "CoreUObject_FInterpCurveFloat.h"
#include "CoreUObject_FVector.h"
#include "Engine_UPrimitiveComponent.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FTransform.h"
#include "Engine_FSplinePoint.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.SplineComponent
     * Size -> 0x00E8 (FullSize[0x0648] - InheritedSize[0x0560])
     */
    class USplineComponent : public Engine::UPrimitiveComponent
    {
    public:
        Engine::FSplineCurves                                        SplineCurves;                                            //  Edit, NativeAccessSpecifierPublic
        CoreUObject::FInterpCurveVector                              SplineInfo;                                              //  ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FInterpCurveQuat                                SplineRotInfo;                                           //  ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FInterpCurveVector                              SplineScaleInfo;                                         //  ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FInterpCurveFloat                               SplineReparamTable;                                      //  ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAllowSplineEditingPerInstance;                          //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      ReparamStepsPerSegment;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        Duration;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStationaryEndpoints;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bSplineHasBeenEdited;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bModifiedByConstructionScript;                           //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bInputSplinePointsToConstructionScript;                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bDrawDebug;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bClosedLoop;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         bLoopPositionOverride;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        LoopPosition;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         DefaultUpVector;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0003[0x4];                                   //  Fix size for supers

    public:
        void UpdateSpline();
        void SetWorldLocationAtSplinePoint(int32_t PointIndex, const CoreUObject::FVector& InLocation);
        void SetUpVectorAtSplinePoint(int32_t PointIndex, const CoreUObject::FVector& InUpVector, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void SetUnselectedSplineSegmentColor(const CoreUObject::FLinearColor& SegmentColor);
        void SetTangentsAtSplinePoint(int32_t PointIndex, const CoreUObject::FVector& InArriveTangent, const CoreUObject::FVector& InLeaveTangent, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void SetTangentAtSplinePoint(int32_t PointIndex, const CoreUObject::FVector& InTangent, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void SetSplineWorldPoints(BasicTypes::TArray<CoreUObject::FVector> Points);
        void SetSplinePointType(int32_t PointIndex, Engine::ESplinePointType Type, bool bUpdateSpline);
        void SetSplinePoints(BasicTypes::TArray<CoreUObject::FVector> Points, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void SetSplineLocalPoints(BasicTypes::TArray<CoreUObject::FVector> Points);
        void SetSelectedSplineSegmentColor(const CoreUObject::FLinearColor& SegmentColor);
        void SetLocationAtSplinePoint(int32_t PointIndex, const CoreUObject::FVector& InLocation, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void SetDrawDebug(bool bShow);
        void SetDefaultUpVector(const CoreUObject::FVector& UpVector, Engine::ESplineCoordinateSpace CoordinateSpace);
        void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
        void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
        void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);
        bool IsClosedLoop();
        CoreUObject::FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
        CoreUObject::FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
        CoreUObject::FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
        CoreUObject::FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
        CoreUObject::FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);
        CoreUObject::FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
        CoreUObject::FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
        CoreUObject::FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
        CoreUObject::FVector GetUpVectorAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FVector GetUpVectorAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetUpVectorAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FTransform GetTransformAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
        CoreUObject::FTransform GetTransformAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
        CoreUObject::FTransform GetTransformAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
        CoreUObject::FVector GetTangentAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FVector GetTangentAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetTangentAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        Engine::ESplinePointType GetSplinePointType(int32_t PointIndex);
        float GetSplineLength();
        CoreUObject::FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
        CoreUObject::FVector GetScaleAtSplinePoint(int32_t PointIndex);
        CoreUObject::FVector GetScaleAtDistanceAlongSpline(float Distance);
        CoreUObject::FRotator GetRotationAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FRotator GetRotationAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FRotator GetRotationAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        float GetRollAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        float GetRollAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        float GetRollAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetRightVectorAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FVector GetRightVectorAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetRightVectorAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        int32_t GetNumberOfSplinePoints();
        CoreUObject::FVector GetLocationAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FVector GetLocationAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetLocationAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, CoreUObject::FVector* Location, CoreUObject::FVector* Tangent, Engine::ESplineCoordinateSpace CoordinateSpace);
        void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, CoreUObject::FVector* LocalLocation, CoreUObject::FVector* LocalTangent);
        CoreUObject::FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        float GetInputKeyAtDistanceAlongSpline(float Distance);
        float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);
        CoreUObject::FVector GetDirectionAtTime(float Time, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
        CoreUObject::FVector GetDirectionAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetDirectionAtDistanceAlongSpline(float Distance, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetDefaultUpVector(Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector FindUpVectorClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FTransform FindTransformClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
        CoreUObject::FVector FindTangentClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector FindScaleClosestToWorldLocation(const CoreUObject::FVector& WorldLocation);
        CoreUObject::FRotator FindRotationClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        float FindRollClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector FindRightVectorClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        CoreUObject::FVector FindLocationClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        float FindInputKeyClosestToWorldLocation(const CoreUObject::FVector& WorldLocation);
        CoreUObject::FVector FindDirectionClosestToWorldLocation(const CoreUObject::FVector& WorldLocation, Engine::ESplineCoordinateSpace CoordinateSpace);
        void ClearSplinePoints(bool bUpdateSpline);
        void AddSplineWorldPoint(const CoreUObject::FVector& Position);
        void AddSplinePointAtIndex(const CoreUObject::FVector& Position, int32_t Index, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void AddSplinePoint(const CoreUObject::FVector& Position, Engine::ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
        void AddSplineLocalPoint(const CoreUObject::FVector& Position);
        void AddPoints(BasicTypes::TArray<Engine::FSplinePoint> Points, bool bUpdateSpline);
        void AddPoint(const Engine::FSplinePoint& Point, bool bUpdateSpline);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.SplineComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
