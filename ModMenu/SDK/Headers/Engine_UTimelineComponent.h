#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FTimeline.h"
#include "Engine_UActorComponent.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UCurveVector; };
namespace CG::Engine { class UCurveLinearColor; };
namespace CG::Engine { class UCurveFloat; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Engine
{
    /**
     * Class /Script/Engine.TimelineComponent
     * Size -> 0x00A0 (FullSize[0x0190] - InheritedSize[0x00F0])
     */
    class UTimelineComponent : public Engine::UActorComponent
    {
    public:
        Engine::FTimeline                                            TheTimeline;                                             //  Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate
        bool                                                         bIgnoreTimeDilation : 1;                                 //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (PADDING)

    public:
        void Stop();
        void SetVectorCurve(Engine::UCurveVector* NewVectorCurve, const BasicTypes::FName& VectorTrackName);
        void SetTimelineLengthMode(Engine::ETimelineLengthMode NewLengthMode);
        void SetTimelineLength(float NewLength);
        void SetPlayRate(float NewRate);
        void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
        void SetNewTime(float NewTime);
        void SetLooping(bool bNewLooping);
        void SetLinearColorCurve(Engine::UCurveLinearColor* NewLinearColorCurve, const BasicTypes::FName& LinearColorTrackName);
        void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
        void SetFloatCurve(Engine::UCurveFloat* NewFloatCurve, const BasicTypes::FName& FloatTrackName);
        void ReverseFromEnd();
        void Reverse();
        void PlayFromStart();
        void Play();
        void OnRep_Timeline();
        bool IsReversing();
        bool IsPlaying();
        bool IsLooping();
        float GetTimeLineLength();
        float GetPlayRate();
        float GetPlaybackPosition();
        bool GetIgnoreTimeDilation();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/Engine.TimelineComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
