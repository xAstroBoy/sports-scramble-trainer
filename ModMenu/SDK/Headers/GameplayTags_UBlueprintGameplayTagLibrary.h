#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "GameplayTags_FGameplayTagContainer.h"
#include "GameplayTags_FGameplayTag.h"
#include "BasicTypes_FString.h"
#include "GameplayTags_FGameplayTagQuery.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_TScriptInterface.h"
#include "GameplayTags_IGameplayTagAssetInterface.h"
#include "BasicTypes_FName.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::GameplayTags
{
    /**
     * Class /Script/GameplayTags.BlueprintGameplayTagLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UBlueprintGameplayTagLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        bool STATIC_RemoveGameplayTag(GameplayTags::FGameplayTagContainer* TagContainer, const GameplayTags::FGameplayTag& Tag);
        bool STATIC_NotEqual_TagTag(const GameplayTags::FGameplayTag& A, const BasicTypes::FString& B);
        bool STATIC_NotEqual_TagContainerTagContainer(const GameplayTags::FGameplayTagContainer& A, const BasicTypes::FString& B);
        bool STATIC_NotEqual_GameplayTagContainer(const GameplayTags::FGameplayTagContainer& A, const GameplayTags::FGameplayTagContainer& B);
        bool STATIC_NotEqual_GameplayTag(const GameplayTags::FGameplayTag& A, const GameplayTags::FGameplayTag& B);
        bool STATIC_MatchesTag(const GameplayTags::FGameplayTag& TagOne, const GameplayTags::FGameplayTag& TagTwo, bool bExactMatch);
        bool STATIC_MatchesAnyTags(const GameplayTags::FGameplayTag& TagOne, const GameplayTags::FGameplayTagContainer& OtherContainer, bool bExactMatch);
        GameplayTags::FGameplayTagContainer STATIC_MakeLiteralGameplayTagContainer(const GameplayTags::FGameplayTagContainer& Value);
        GameplayTags::FGameplayTag STATIC_MakeLiteralGameplayTag(const GameplayTags::FGameplayTag& Value);
        GameplayTags::FGameplayTagQuery STATIC_MakeGameplayTagQuery(const GameplayTags::FGameplayTagQuery& TagQuery);
        GameplayTags::FGameplayTagContainer STATIC_MakeGameplayTagContainerFromTag(const GameplayTags::FGameplayTag& SingleTag);
        GameplayTags::FGameplayTagContainer STATIC_MakeGameplayTagContainerFromArray(BasicTypes::TArray<GameplayTags::FGameplayTag> GameplayTags);
        bool STATIC_IsGameplayTagValid(const GameplayTags::FGameplayTag& GameplayTag);
        bool STATIC_HasTag(const GameplayTags::FGameplayTagContainer& TagContainer, const GameplayTags::FGameplayTag& Tag, bool bExactMatch);
        bool STATIC_HasAnyTags(const GameplayTags::FGameplayTagContainer& TagContainer, const GameplayTags::FGameplayTagContainer& OtherContainer, bool bExactMatch);
        bool STATIC_HasAllTags(const GameplayTags::FGameplayTagContainer& TagContainer, const GameplayTags::FGameplayTagContainer& OtherContainer, bool bExactMatch);
        bool STATIC_HasAllMatchingGameplayTags(const BasicTypes::TScriptInterface<GameplayTags::IGameplayTagAssetInterface>& TagContainerInterface, const GameplayTags::FGameplayTagContainer& OtherContainer);
        BasicTypes::FName STATIC_GetTagName(const GameplayTags::FGameplayTag& GameplayTag);
        int32_t STATIC_GetNumGameplayTagsInContainer(const GameplayTags::FGameplayTagContainer& TagContainer);
        BasicTypes::FString STATIC_GetDebugStringFromGameplayTagContainer(const GameplayTags::FGameplayTagContainer& TagContainer);
        BasicTypes::FString STATIC_GetDebugStringFromGameplayTag(const GameplayTags::FGameplayTag& GameplayTag);
        void STATIC_GetAllActorsOfClassMatchingTagQuery(CoreUObject::UObject* WorldContextObject, Engine::AActor* ActorClass, const GameplayTags::FGameplayTagQuery& GameplayTagQuery, BasicTypes::TArray<Engine::AActor*>* OutActors);
        bool STATIC_EqualEqual_GameplayTagContainer(const GameplayTags::FGameplayTagContainer& A, const GameplayTags::FGameplayTagContainer& B);
        bool STATIC_EqualEqual_GameplayTag(const GameplayTags::FGameplayTag& A, const GameplayTags::FGameplayTag& B);
        bool STATIC_DoesTagAssetInterfaceHaveTag(const BasicTypes::TScriptInterface<GameplayTags::IGameplayTagAssetInterface>& TagContainerInterface, const GameplayTags::FGameplayTag& Tag);
        bool STATIC_DoesContainerMatchTagQuery(const GameplayTags::FGameplayTagContainer& TagContainer, const GameplayTags::FGameplayTagQuery& TagQuery);
        void STATIC_BreakGameplayTagContainer(const GameplayTags::FGameplayTagContainer& GameplayTagContainer, BasicTypes::TArray<GameplayTags::FGameplayTag>* GameplayTags);
        void STATIC_AppendGameplayTagContainers(GameplayTags::FGameplayTagContainer* InOutTagContainer, const GameplayTags::FGameplayTagContainer& InTagContainer);
        void STATIC_AddGameplayTag(GameplayTags::FGameplayTagContainer* TagContainer, const GameplayTags::FGameplayTag& Tag);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/GameplayTags.BlueprintGameplayTagLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
