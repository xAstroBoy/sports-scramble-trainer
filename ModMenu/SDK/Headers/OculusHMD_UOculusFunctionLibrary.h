#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "OculusHMD_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FLinearColor.h"
#include "CoreUObject_FRotator.h"
#include "HeadMountedDisplay_ENUMS.h"
#include "OculusHMD_FHmdUserProfile.h"
#include "OculusHMD_FGuardianTestResult.h"
#include "CoreUObject_FTransform.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FVector2D.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UTexture2D; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::OculusHMD
{
    /**
     * Class /Script/OculusHMD.OculusFunctionLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UOculusFunctionLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SetTiledMultiresLevel(OculusHMD::ETiledMultiResLevel Level);
        void STATIC_SetReorientHMDOnControllerRecenter(bool recenterMode);
        void STATIC_SetPositionScale3D(const CoreUObject::FVector& PosScale3D);
        void STATIC_SetGuardianVisibility(bool GuardianVisible);
        void STATIC_SetDisplayFrequency(float RequestedFrequency);
        void STATIC_SetCPUAndGPULevels(int32_t CPULevel, int32_t GPULevel);
        void STATIC_SetColorScaleAndOffset(const CoreUObject::FLinearColor& ColorScale, const CoreUObject::FLinearColor& ColorOffset, bool bApplyToAllLayers);
        void STATIC_SetBaseRotationAndPositionOffset(const CoreUObject::FRotator& BaseRot, const CoreUObject::FVector& PosOffset, HeadMountedDisplay::EOrientPositionSelector Options);
        void STATIC_SetBaseRotationAndBaseOffsetInMeters(const CoreUObject::FRotator& Rotation, const CoreUObject::FVector& BaseOffsetInMeters, HeadMountedDisplay::EOrientPositionSelector Options);
        bool STATIC_IsGuardianDisplayed();
        bool STATIC_IsDeviceTracked(OculusHMD::ETrackedDeviceType DeviceType);
        bool STATIC_HasSystemOverlayPresent();
        bool STATIC_HasInputFocus();
        bool STATIC_GetUserProfile(OculusHMD::FHmdUserProfile* Profile);
        OculusHMD::ETiledMultiResLevel STATIC_GetTiledMultiresLevel();
        void STATIC_GetRawSensorData(CoreUObject::FVector* AngularAcceleration, CoreUObject::FVector* LinearAcceleration, CoreUObject::FVector* AngularVelocity, CoreUObject::FVector* LinearVelocity, float* TimeInSeconds, OculusHMD::ETrackedDeviceType DeviceType);
        void STATIC_GetPose(CoreUObject::FRotator* DeviceRotation, CoreUObject::FVector* DevicePosition, CoreUObject::FVector* NeckPosition, bool bUseOrienationForPlayerCamera, bool bUsePositionForPlayerCamera, const CoreUObject::FVector& PositionScale);
        OculusHMD::FGuardianTestResult STATIC_GetPointGuardianIntersection(const CoreUObject::FVector& Point, OculusHMD::EBoundaryType BoundaryType);
        CoreUObject::FTransform STATIC_GetPlayAreaTransform();
        OculusHMD::FGuardianTestResult STATIC_GetNodeGuardianIntersection(OculusHMD::ETrackedDeviceType DeviceType, OculusHMD::EBoundaryType BoundaryType);
        BasicTypes::TArray<CoreUObject::FVector> STATIC_GetGuardianPoints(OculusHMD::EBoundaryType BoundaryType, bool UsePawnSpace);
        CoreUObject::FVector STATIC_GetGuardianDimensions(OculusHMD::EBoundaryType BoundaryType);
        void STATIC_GetGPUUtilization(bool* IsGPUAvailable, float* GPUUtilization);
        float STATIC_GetGPUFrameTime();
        BasicTypes::FString STATIC_GetDeviceName();
        float STATIC_GetCurrentDisplayFrequency();
        void STATIC_GetBaseRotationAndPositionOffset(CoreUObject::FRotator* OutRot, CoreUObject::FVector* OutPosOffset);
        void STATIC_GetBaseRotationAndBaseOffsetInMeters(CoreUObject::FRotator* OutRotation, CoreUObject::FVector* OutBaseOffsetInMeters);
        BasicTypes::TArray<float> STATIC_GetAvailableDisplayFrequencies();
        void STATIC_EnablePositionTracking(bool bPositionTracking);
        void STATIC_EnableOrientationTracking(bool bOrientationTracking);
        void STATIC_ClearLoadingSplashScreens();
        void STATIC_AddLoadingSplashScreen(Engine::UTexture2D* Texture, const CoreUObject::FVector& TranslationInMeters, const CoreUObject::FRotator& Rotation, const CoreUObject::FVector2D& SizeInMeters, const CoreUObject::FRotator& DeltaRotation, bool bClearBeforeAdd);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/OculusHMD.OculusFunctionLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
