#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FVector.h"
#include "ProceduralMeshComponent_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FVector2D.h"
#include "ProceduralMeshComponent_FProcMeshTangent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::ProceduralMeshComponent { class UProceduralMeshComponent; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class UStaticMesh; };
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ProceduralMeshComponent
{
    /**
     * Class /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UKismetProceduralMeshLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_SliceProceduralMesh(ProceduralMeshComponent::UProceduralMeshComponent* InProcMesh, const CoreUObject::FVector& PlanePosition, const CoreUObject::FVector& PlaneNormal, bool bCreateOtherHalf, ProceduralMeshComponent::UProceduralMeshComponent** OutOtherHalfProcMesh, ProceduralMeshComponent::EProcMeshSliceCapOption CapOption, Engine::UMaterialInterface* CapMaterial);
        void STATIC_GetSectionFromStaticMesh(Engine::UStaticMesh* InMesh, int32_t LODIndex, int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector>* Vertices, BasicTypes::TArray<int32_t>* Triangles, BasicTypes::TArray<CoreUObject::FVector>* Normals, BasicTypes::TArray<CoreUObject::FVector2D>* UVs, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent>* Tangents);
        void STATIC_GetSectionFromProceduralMesh(ProceduralMeshComponent::UProceduralMeshComponent* InProcMesh, int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector>* Vertices, BasicTypes::TArray<int32_t>* Triangles, BasicTypes::TArray<CoreUObject::FVector>* Normals, BasicTypes::TArray<CoreUObject::FVector2D>* UVs, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent>* Tangents);
        void STATIC_GenerateBoxMesh(const CoreUObject::FVector& BoxRadius, BasicTypes::TArray<CoreUObject::FVector>* Vertices, BasicTypes::TArray<int32_t>* Triangles, BasicTypes::TArray<CoreUObject::FVector>* Normals, BasicTypes::TArray<CoreUObject::FVector2D>* UVs, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent>* Tangents);
        void STATIC_CreateGridMeshTriangles(int32_t NumX, int32_t NumY, bool bWinding, BasicTypes::TArray<int32_t>* Triangles);
        void STATIC_CopyProceduralMeshFromStaticMeshComponent(Engine::UStaticMeshComponent* StaticMeshComponent, int32_t LODIndex, ProceduralMeshComponent::UProceduralMeshComponent* ProcMeshComponent, bool bCreateCollision);
        void STATIC_ConvertQuadToTriangles(BasicTypes::TArray<int32_t>* Triangles, int32_t Vert0, int32_t Vert1, int32_t Vert2, int32_t Vert3);
        void STATIC_CalculateTangentsForMesh(BasicTypes::TArray<CoreUObject::FVector> Vertices, BasicTypes::TArray<int32_t> Triangles, BasicTypes::TArray<CoreUObject::FVector2D> UVs, BasicTypes::TArray<CoreUObject::FVector>* Normals, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent>* Tangents);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ProceduralMeshComponent.KismetProceduralMeshLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
