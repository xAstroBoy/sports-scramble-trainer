#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "ProceduralMeshComponent_FProcMeshSection.h"
#include "Engine_FKConvexElem.h"
#include "CoreUObject_FBoxSphereBounds.h"
#include "Engine_UMeshComponent.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FLinearColor.h"
#include "ProceduralMeshComponent_FProcMeshTangent.h"
#include "CoreUObject_FColor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UBodySetup; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ProceduralMeshComponent
{
    /**
     * Class /Script/ProceduralMeshComponent.ProceduralMeshComponent
     * Size -> 0x0068 (FullSize[0x05F0] - InheritedSize[0x0588])
     */
    class UProceduralMeshComponent : public Engine::UMeshComponent
    {
    public:
        uint8_t                                                      UnknownData_0002[0x8];                                   //  Fix Super Size
        bool                                                         bUseComplexAsSimpleCollision;                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bUseAsyncCooking;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UBodySetup*                                          ProcMeshBodySetup;                                       //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<ProceduralMeshComponent::FProcMeshSection> ProcMeshSections;                                        //  ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::FKConvexElem>                     CollisionConvexElems;                                    //  ZeroConstructor, NativeAccessSpecifierPrivate
        CoreUObject::FBoxSphereBounds                                LocalBounds;                                             //  ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::UBodySetup*>                      AsyncBodySetupQueue;                                     //  ZeroConstructor, Transient, NativeAccessSpecifierPrivate

    public:
        void UpdateMeshSection_LinearColor(int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector> Vertices, BasicTypes::TArray<CoreUObject::FVector> Normals, BasicTypes::TArray<CoreUObject::FVector2D> UV0, BasicTypes::TArray<CoreUObject::FVector2D> UV1, BasicTypes::TArray<CoreUObject::FVector2D> UV2, BasicTypes::TArray<CoreUObject::FVector2D> UV3, BasicTypes::TArray<CoreUObject::FLinearColor> VertexColors, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent> Tangents);
        void UpdateMeshSection(int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector> Vertices, BasicTypes::TArray<CoreUObject::FVector> Normals, BasicTypes::TArray<CoreUObject::FVector2D> UV0, BasicTypes::TArray<CoreUObject::FColor> VertexColors, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent> Tangents);
        void SetMeshSectionVisible(int32_t SectionIndex, bool bNewVisibility);
        bool IsMeshSectionVisible(int32_t SectionIndex);
        int32_t GetNumSections();
        void CreateMeshSection_LinearColor(int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector> Vertices, BasicTypes::TArray<int32_t> Triangles, BasicTypes::TArray<CoreUObject::FVector> Normals, BasicTypes::TArray<CoreUObject::FVector2D> UV0, BasicTypes::TArray<CoreUObject::FVector2D> UV1, BasicTypes::TArray<CoreUObject::FVector2D> UV2, BasicTypes::TArray<CoreUObject::FVector2D> UV3, BasicTypes::TArray<CoreUObject::FLinearColor> VertexColors, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent> Tangents, bool bCreateCollision);
        void CreateMeshSection(int32_t SectionIndex, BasicTypes::TArray<CoreUObject::FVector> Vertices, BasicTypes::TArray<int32_t> Triangles, BasicTypes::TArray<CoreUObject::FVector> Normals, BasicTypes::TArray<CoreUObject::FVector2D> UV0, BasicTypes::TArray<CoreUObject::FColor> VertexColors, BasicTypes::TArray<ProceduralMeshComponent::FProcMeshTangent> Tangents, bool bCreateCollision);
        void ClearMeshSection(int32_t SectionIndex);
        void ClearCollisionConvexMeshes();
        void ClearAllMeshSections();
        void AddCollisionConvexMesh(BasicTypes::TArray<CoreUObject::FVector> ConvexVerts);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/ProceduralMeshComponent.ProceduralMeshComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
