#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_FTransform.h"
#include "DebugButtonInfo_FDebugButtonInfo.h"
#include "CoreUObject_FVector.h"
#include "SportsScramble_FScramTrajectoryRegion.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "CoreUObject_FBox.h"
#include "SportsScramble_FBaseballBallScrambleProperties.h"
#include "SportsScramble_FBaseballInstrumentEntryProperties.h"
#include "SportsScramble_FMinMaxAngle.h"
#include "SportsScramble_FAvatarLook.h"
#include "SportsScramble_FMittSpawnInfo.h"
#include "SportsScramble_AScramSportManagerBaseball.h"
#include "SportsScramble_ENUMS.h"
#include "BB_ScoreboardVideos_ENUMS.h"
#include "BasicTypes_UScriptDelegate.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UAudioComponent; };
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::Engine { class UTimelineComponent; };
namespace CG::Engine { class AActor; };
namespace CG::BB_Strikezone { class ABB_Strikezone_C; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };
namespace CG::BB_Equipment_Set { class ABB_Equipment_Set_C; };
namespace CG::DebugButtonGroup { class ADebugButtonGroup_C; };
namespace CG::Engine { class UMaterialInstance; };
namespace CG::BaseballAIFielder_Blueprint { class ABaseballAIFielder_Blueprint_C; };
namespace CG::BaseballAICatcher_Blueprint { class ABaseballAICatcher_Blueprint_C; };
namespace CG::ManagerBaseball_LocalHelper { class AManagerBaseball_LocalHelper_C; };
namespace CG::SportsScramble { class AScramPlayerHand; };
namespace CG::StandLocationIndicator { class AStandLocationIndicator_C; };
namespace CG::BB_PitchTarget { class ABB_PitchTarget_C; };
namespace CG::BB_BattingTarget { class ABB_BattingTarget_C; };
namespace CG::BB_InstrumentSelector { class ABB_InstrumentSelector_C; };
namespace CG::Engine { class USoundBase; };
namespace CG::PauseBubble { class APauseBubble_C; };
namespace CG::BattingTee { class ABattingTee_C; };
namespace CG::BB_PitchingPropManager { class ABB_PitchingPropManager_C; };
namespace CG::BB_BatProgression { class ABB_BatProgression_C; };
namespace CG::BallSelector_Listener { class ABallSelector_Listener_C; };
namespace CG::BB_PlayByPlay { class ABB_PlayByPlay_C; };
namespace CG::BB_BatterToPitcherInfluencer_BP { class ABB_BatterToPitcherInfluencer_BP_C; };
namespace CG::BB_LogoPopup { class ABB_LogoPopup_C; };
namespace CG::BaseballAIBatter_Blueprint { class ABaseballAIBatter_Blueprint_C; };
namespace CG::SportsScramble { class ABaseballInstrument; };
namespace CG::SportsScramble { class AScramBaseballBatterAI; };
namespace CG::SportsScramble { class AScramBaseballPitcherAI; };
namespace CG::BB_Mitt { class ABB_Mitt_C; };
namespace CG::SportsScramble { class AScramBaseballRunnerAI; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ScramSportManagerBaseball_Blueprint
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Sports/Baseball/ScramSportManagerBaseball_Blueprint.ScramSportManagerBaseball_Blueprint_C
     * Size -> 0x0450 (FullSize[0x0B10] - InheritedSize[0x06C0])
     */
    class AScramSportManagerBaseball_Blueprint_C : public SportsScramble::AScramSportManagerBaseball
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::USceneComponent*                                     InnerFoulLoc;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_AmbientCrowd_Loop;                                 //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     InstrumentSelectorRightLoc;                              //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     InstrumentSelectorLeftLoc;                               //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLocRF;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLocSS;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLocCF;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLocC;                                             //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLocLF;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FielderLoc1B;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     AudioOrgan;                                              //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     OutfieldLocusLoc;                                        //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     RunnerHomeLoc;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     ThirdBaseLoc;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     SecondBaseLoc;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FirstBaseLoc;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     RunnerSpawnLoc;                                          //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     InfieldEdgeMarker;                                       //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     DoubleTripleMarker;                                      //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     OutfieldFenceEdge;                                       //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     OutfieldFenceCenter;                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     BatterLoc;                                               //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     PitcherLoc;                                              //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UStaticMeshComponent*                                StaticMesh;                                              //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        float                                                        Timeline_OrganFade_Scale_F2AE027C4A618FA4D20BE980962382FF; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::ETimelineDirection                                   Timeline_OrganFade__Direction_F2AE027C4A618FA4D20BE980962382FF; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTimelineComponent*                                  Timeline_OrganFade;                                      //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          GameElements;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BB_Strikezone::ABB_Strikezone_C*                             strikeZone;                                              //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ScramGameInstance::UScramGameInstance_C*                     GameInstance;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_Equipment_Set::ABB_Equipment_Set_C*                       EquipmentSet;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      MaxOuts;                                                 //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Outs;                                                    //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FTransform                                      PitchingLocation;                                        //  Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor
        BasicTypes::TArray<DebugButtonInfo::FDebugButtonInfo>        StartPosButtons;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
        DebugButtonGroup::ADebugButtonGroup_C*                       StartChoiceMenu;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      VisitorsTotalScore;                                      //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      HomeTotalScore;                                          //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      CurrentInning;                                           //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      MaxInnings;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      PointsForSingle;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      PointsForDouble;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      PointsForTriple;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      PointsForHomeRun;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         TopOfTheInning;                                          //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      PitcherPointsStrike;                                     //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::UMaterialInstance*                                   AwayTeamMaterial;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::UMaterialInstance*                                   HomeTeamMaterial;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<BaseballAIFielder_Blueprint::ABaseballAIFielder_Blueprint_C*> FielderList;                                             //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BaseballAICatcher_Blueprint::ABaseballAICatcher_Blueprint_C* CatcherActor;                                            //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ManagerBaseball_LocalHelper::AManagerBaseball_LocalHelper_C* LocalHelper;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        SwitchSidesMessageDuration;                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         StrikeRegistered;                                        //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::AScramPlayerHand*                            PreferredHandP1;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         BallLocation;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0004[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::AScramPlayerHand*                            PreferredHandP2;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         WaitForScoreboardVideo;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         WaitForRunners;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0005[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        OrganFadeOuttime;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        StandLocationIndicator::AStandLocationIndicator_C*           BattersBoxIndicator;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::FScramTrajectoryRegion                       PlayerBatterStrikezone;                                  //  Edit, BlueprintVisible, NoDestructor
        SportsScramble::FScramTrajectoryRegion                       AIBatterStrikezone;                                      //  Edit, BlueprintVisible, NoDestructor
        bool                                                         AIPlayerEnabled;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        bool                                                         FirstPitchOfInning;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0006[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_PitchTarget::ABB_PitchTarget_C*                           PitchTarget;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      PitchTargetScoreAmount;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0007[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_BattingTarget::ABB_BattingTarget_C*                       BattingTargetActor;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      OutfieldTargetScoreAmt;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         DebugBallsSetting;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0008[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_InstrumentSelector::ABB_InstrumentSelector_C*             InstrumentSelector;                                      //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FVector                                         BattingTeePosition;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0009[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USoundBase*                                          SFX_BatBreak;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         BatBroken;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         PlayerInPosition;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0010[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<DebugButtonInfo::FDebugButtonInfo>        ScrambleMenu;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference
        DebugButtonGroup::ADebugButtonGroup_C*                       ScrambleMenuChoice;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         BallInPlay;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0011[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::UScriptMulticastDelegate                         OnSidesSwitchedDispatcher;                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        PauseBubble::APauseBubble_C*                                 PauseBubbleActor;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FBox                                            PitchingMinArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        CoreUObject::FBox                                            PitchingMaxArea;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        BattingTee::ABattingTee_C*                                   BattingTee;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_PitchingPropManager::ABB_PitchingPropManager_C*           PitchingPropManager;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> ScrambleBalls;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<SportsScramble::FBaseballInstrumentEntryProperties> ScrambleInstruments;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BB_BatProgression::ABB_BatProgression_C*                     BatProgression;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BallSelector_Listener::ABallSelector_Listener_C*             BallSelectorListener;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BB_PlayByPlay::ABB_PlayByPlay_C*                             PlayByPlay;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Strikes;                                                 //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      StrikeoutCount;                                          //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         ShouldResetCount;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0012[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BB_BatterToPitcherInfluencer_BP::ABB_BatterToPitcherInfluencer_BP_C* BatterToPitcherInfluencer;                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         GameCompleted;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        SportsScramble::FMinMaxAngle                                 OutfielderCFMovementRange;                               //  Edit, BlueprintVisible, NoDestructor
        SportsScramble::FMinMaxAngle                                 OurfielderRFMovementRange;                               //  Edit, BlueprintVisible, NoDestructor
        SportsScramble::FMinMaxAngle                                 OutfielderLFMovementRange;                               //  Edit, BlueprintVisible, NoDestructor
        BB_LogoPopup::ABB_LogoPopup_C*                               LogoPopup;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         BasesLoaded;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0013[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BaseballAIBatter_Blueprint::ABaseballAIBatter_Blueprint_C*   AiBatter;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::FAvatarLook                                  AiLook;                                                  //  Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor
        bool                                                         StikeoutBool;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0014[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UMaterialInstance*                                   AwayTeamMittMaterial;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::UMaterialInstance*                                   HomeTeamMittMaterial;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         ChallengeAIGame;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        bool                                                         ChallengeSpawnsPitcher;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         IsHostBatting;                                           //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        uint8_t                                                      UnknownData_0015[0x1];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        DelayBeforeFirstAiSpawn;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::ABaseballInstrument*                         RestoredBatterInstrument;                                //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<SportsScramble::FMittSpawnInfo>           RestoredPitcherScrambleOptions;                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        bool                                                         RestoringGame;                                           //  Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0016[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::FBaseballInstrumentEntryProperties> ScrambleInstrumentsPool;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance

    public:
        void GetRandomInstrument(SportsScramble::EBaseballInstrumentType ExcludeType, SportsScramble::FBaseballInstrumentEntryProperties* NewInstrument, bool* Successful);
        int32_t GetBatterRunAdvantage();
        void SaveBaseballState(int32_t* VisitorsScore, int32_t* HomeScore, int32_t* Inning, bool* TopOfInning, bool* FirstPitchOfInning, int32_t* Outs, int32_t* Strikes, SportsScramble::ABaseballInstrument** BatterInstrument, BasicTypes::TArray<SportsScramble::FMittSpawnInfo>* PitcherScrambleOptions);
        void GetGloveMaterial(Engine::UMaterialInstance** Material);
        void GetFielderDifficulty(SportsScramble::EDifficulty* NewParam);
        void SpawnFielder(SportsScramble::EDifficulty Difficulty, Engine::USceneComponent* Position, bool IsOutfielder, const SportsScramble::FMinMaxAngle& OutfieldMovementRange);
        void BB_ChallengeGameSetup();
        void GetMittMaterial(Engine::UMaterialInstance** Material);
        void AI_StrikeLooking();
        void UpdateScoreboardNames();
        void SetPitchingTargetBindings();
        void SpawnLogoPopup();
        void RemoveRunners();
        void SetStrikezoneSize();
        void PlayScoreboardVideo(BB_ScoreboardVideos::EBB_ScoreboardVideos Animation);
        void SetGameSettings();
        void ChooseScrambleGroup();
        void ActivateBattingTee();
        void HideIndicators();
        void RequestAllowPitch();
        void HandleInstrumentBroken(SportsScramble::ABaseballInstrument* Instrument);
        void SpawnInstrumentSelector();
        void GetBattingMaterial(Engine::UMaterialInstance** Material);
        void GetFieldingMaterial(Engine::UMaterialInstance** Material);
        void RunnerScores();
        void GetWinningPlayer(int32_t* WinnerInt);
        void EndGameCleanUp();
        void SpawnLocalHelper();
        void ToggleTeamColors();
        void SpawnTeamActors(bool FieldersOnly);
        void SetupScoreboards(int32_t BallsCount, int32_t StrikesCount);
        void CleanUpGameElements();
        void PitcherScoring(int32_t score);
        void UpdateOutsAndFreebies(int32_t Outs, int32_t Freebies, int32_t Strikes);
        void BatterScoring(int32_t ScoreAmount);
        void TeleportPlayer(const BasicTypes::UScriptDelegate& TransitionReady, const BasicTypes::UScriptDelegate& TransitionComplete, bool UseTransitionDuration);
        void ProgressGame();
        void Initialize();
        void SpawnEquipmentAndAI();
        void SpawnStrikezone();
        void SpawnAiBatter(SportsScramble::AScramBaseballBatterAI** Batter);
        void SpawnAiPitcher(SportsScramble::AScramBaseballPitcherAI** Pitcher);
        void UserConstructionScript();
        void Timeline_OrganFade__FinishedFunc();
        void Timeline_OrganFade__UpdateFunc();
        void BaseballEvent(SportsScramble::EBaseballEvent BaseballEvent, const CoreUObject::FVector& Location);
        void ReceiveBeginPlay();
        void RegisterStrike();
        void RegisterOut(int32_t NewOuts, bool PlayUmpireOut, bool PlayOrgan);
        void HandleGameEnd();
        void ReceiveEndPlay(Engine::EEndPlayReason EndPlayReason);
        void BBGameIntroSequence();
        void LocalHelperMessageComplete();
        void BeginInning();
        void SetDominantHand(Engine::AActor* DominantHand, BB_Mitt::ABB_Mitt_C* Mitt);
        void OnRunnerSpawned(SportsScramble::AScramBaseballRunnerAI* runner);
        void StartOrgan();
        void StopOrgan();
        void CheckForPlayerBattingPosition();
        void PlayerBatterReady();
        void BeginGame();
        void PitchTargetHit(int32_t ScoreAmount);
        void BatterHitOutfieldTarget(SportsScramble::AScramBall* Ball, int32_t TargetId);
        void SendRestartGame();
        void UpdateGameScore(int32_t NewP1TotalScore, int32_t NewP2TotalScore);
        void SwitchSides(bool TopOfTheInning, int32_t CurrentInning);
        void Single();
        void Double();
        void Triple();
        void HomeRun(bool BasesLoaded);
        void PlayFirstPitchSFX();
        void RegisterCatch();
        void RegisterFoul();
        void RegisterBall();
        void UpdateRunners(bool NewRunnerOnFirst, bool NewRunnerOnSecond, bool NewRunnerOnThird);
        void OnInstrumentSelected(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void OnInstrumentBroken(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void PrepNewInning();
        void BrokenBat();
        void NewInstrumentSelected(SportsScramble::ABaseballInstrument* Instrument);
        void InstrumentSelected(CoreUObject::UObject* Instrument);
        void OnInstrumentsSpawned(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void ShowPauseInfo(bool IsPaused, bool WasPausedByMe);
        void ShowPauseBubble(bool IsPaused);
        void OnGameResume(bool WasPausedByMe);
        void OnGamePause(bool WasPausedByMe);
        void SpawnInitialActors();
        void GameReadyToBegin();
        void NetSetupScoreboards(int32_t BallsCount, int32_t StrikesCount);
        void RegisterStrikeout();
        void NetUpdateOutsAndFreebies(int32_t Outs, int32_t Freebies, int32_t Strikes);
        void ResetCount();
        void PitchingTargetsUpdated(bool TL, bool TR, bool BL, bool BR);
        void PitchingTargetHit(SportsScramble::EBaseballScrambleTargetLocations Location);
        void NetDisplayPopup();
        void SetAILook(const SportsScramble::FAvatarLook& AvatarLook);
        void BB_ChallengeGameStart();
        void SpawnAiPitcherDelayed();
        void SpawnAiBatterDelayed();
        void PlayErrorSfx();
        void LoadBaseballState(int32_t VisitorsScore, int32_t HomeScore, int32_t Inning, bool TopOfInning, bool FirstPitchOfInning, int32_t Outs, int32_t Strikes, SportsScramble::ABaseballInstrument* BatterInstrument, BasicTypes::TArray<SportsScramble::FMittSpawnInfo> PitcherScrambleOptions);
        void ServerReady();
        void Multi_UpdateScoreboardInning();
        void Multi_SetInning(int32_t Inning, bool Top);
        void OnGameDone();
        void ShowMitt(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void NetDisablePause();
        void DisablePause();
        void ExecuteUbergraph_ScramSportManagerBaseball_Blueprint(int32_t EntryPoint);
        void GameCompleted__DelegateSignature(bool LocalPlayerVictory, int32_t AwayScore, int32_t HomeScore);
        void OnSidesSwitchedDispatcher__DelegateSignature();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Sports/Baseball/ScramSportManagerBaseball_Blueprint.ScramSportManagerBaseball_Blueprint_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
