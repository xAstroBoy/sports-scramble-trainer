#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TArray.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FName.h"
#include "SportsScramble_ENUMS.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "SportsScramble_AScramTrophyManager.h"
#include "CoreUObject_FTransform.h"
#include "InputCore_FKey.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class USoundBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ScramTrophyManager_BP
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Trophy/ScramTrophyManager_BP.ScramTrophyManager_BP_C
     * Size -> 0x00A8 (FullSize[0x0408] - InheritedSize[0x0360])
     */
    class AScramTrophyManager_BP_C : public SportsScramble::AScramTrophyManager
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::USceneComponent*                                     DefaultSceneRoot;                                        //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        float                                                        TrophySpawnForwardOffset;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TrophySpawnRightOffset;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        TrophySpawnUpOffset;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      ButtonPressCount;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::USoundBase*>                      TrophyGetSoundList;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        Engine::USoundBase*                                          TrophyEarnedSFX;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        PreAnnounceDelay;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         Initialized;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FString>                      Logs;                                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<BasicTypes::FName>                        NewlyEarnedTrophies;                                     //  Edit, BlueprintVisible, ZeroConstructor
        SportsScramble::EScramSport                                  CurrentSport;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<BasicTypes::FName>                        NewlyEarnedAvatars;                                      //  Edit, BlueprintVisible, ZeroConstructor
        BasicTypes::UScriptMulticastDelegate                         OnEarnedTrophyDispatcher;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        BasicTypes::TArray<BasicTypes::FName>                        NewlyEarnedSkinPacks;                                    //  Edit, BlueprintVisible, ZeroConstructor
        BasicTypes::TArray<BasicTypes::FName>                        NewlyEarnedHairPacks;                                    //  Edit, BlueprintVisible, ZeroConstructor

    public:
        void HasEarnedRewardInMatch(bool* HasReward);
        void EarnHairPack(const BasicTypes::FName& avatarID);
        void EarnSkinPack(const BasicTypes::FName& avatarID);
        void IsHairPackEarned(const BasicTypes::FName& Name, bool* _bool_);
        void IsSkinPackEarned(const BasicTypes::FName& Name, bool* _bool_);
        void ResetAvatars();
        void EarnAvatar(const BasicTypes::FName& avatarID);
        void IsAvatarEarned(const BasicTypes::FName& Name, bool* _bool_);
        void HasEarnedAvatarInMatch(bool* hasEarnedAvatar);
        void CheckAvatarAchievements(bool byPassHistory);
        void HasEarnedTrophyInMatch(bool* HasTrophies);
        void ClearTrophyHistory();
        void PrintSaveData();
        void DebugLog(const BasicTypes::FString& Message);
        void FindNextUnearnedTrophy();
        void UpdateExistingTrophies();
        void CustomTrophySpawnTransform(CoreUObject::FTransform* Transform);
        void UserConstructionScript();
        void InpActEvt_LeftGripTrigger_K2Node_InputActionEvent_3(const InputCore::FKey& Key);
        void InpActEvt_RightGripTrigger_K2Node_InputActionEvent_2(const InputCore::FKey& Key);
        void InpActEvt_LeftFingerTrigger_K2Node_InputActionEvent_1(const InputCore::FKey& Key);
        void ReceiveBeginPlay();
        void ResetTrophyData();
        void OnNotifyTrophyEarned(const BasicTypes::FName& Name);
        void SpawnTrophyNotificationFX();
        void OnNotifyOculusUpdate();
        void ExecuteUbergraph_ScramTrophyManager_BP(int32_t EntryPoint);
        void OnEarnedTrophyDispatcher__DelegateSignature();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Trophy/ScramTrophyManager_BP.ScramTrophyManager_BP_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
