#pragma once
#pragma warning(disable: 4267)

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FName.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FTransform.h"
#include "InputCore_FKey.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ScramTrophyManager_BP
{
    // --------------------------------------------------
    // # Classes
    // --------------------------------------------------
    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_HasEarnedRewardInMatch_Params
    {
    public:
        bool                                                         HasReward;                                               //  0x0000(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0000[0x3];                                   //  0x0001(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_EarnHairPack_Params
    {
    public:
        BasicTypes::FName                                            avatarID;                                                //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_EarnSkinPack_Params
    {
    public:
        BasicTypes::FName                                            avatarID;                                                //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_IsHairPackEarned_Params
    {
    public:
        BasicTypes::FName                                            Name;                                                    //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
        bool                                                         _bool_;                                                  //  0x0008(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0001[0x7];                                   //  0x0009(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_IsSkinPackEarned_Params
    {
    public:
        BasicTypes::FName                                            Name;                                                    //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
        bool                                                         _bool_;                                                  //  0x0008(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0002[0x7];                                   //  0x0009(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_ResetAvatars_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_EarnAvatar_Params
    {
    public:
        BasicTypes::FName                                            avatarID;                                                //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_IsAvatarEarned_Params
    {
    public:
        BasicTypes::FName                                            Name;                                                    //  0x0000(0x0008)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
        bool                                                         _bool_;                                                  //  0x0008(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0003[0x7];                                   //  0x0009(0x0007) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_HasEarnedAvatarInMatch_Params
    {
    public:
        bool                                                         hasEarnedAvatar;                                         //  0x0000(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0004[0x3];                                   //  0x0001(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_CheckAvatarAchievements_Params
    {
    public:
        bool                                                         byPassHistory;                                           //  0x0000(0x0001)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_HasEarnedTrophyInMatch_Params
    {
    public:
        bool                                                         HasTrophies;                                             //  0x0000(0x0001)  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
        uint8_t                                                      UnknownData_0005[0x3];                                   //  0x0001(0x0003) MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY) ()
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_ClearTrophyHistory_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_PrintSaveData_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_DebugLog_Params
    {
    public:
        BasicTypes::FString                                          Message;                                                 //  0x0000(0x0010)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_FindNextUnearnedTrophy_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_UpdateExistingTrophies_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_CustomTrophySpawnTransform_Params
    {
    public:
        CoreUObject::FTransform                                      Transform;                                               //  0x0000(0x0030)  (Parm, OutParm, IsPlainOldData, NoDestructor)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_UserConstructionScript_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_InpActEvt_LeftGripTrigger_K2Node_InputActionEvent_3_Params
    {
    public:
        InputCore::FKey                                              Key;                                                     //  0x0000(0x0018)  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_InpActEvt_RightGripTrigger_K2Node_InputActionEvent_2_Params
    {
    public:
        InputCore::FKey                                              Key;                                                     //  0x0000(0x0018)  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_InpActEvt_LeftFingerTrigger_K2Node_InputActionEvent_1_Params
    {
    public:
        InputCore::FKey                                              Key;                                                     //  0x0000(0x0018)  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_ReceiveBeginPlay_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_ResetTrophyData_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_OnNotifyTrophyEarned_Params
    {
    public:
        BasicTypes::FName                                            Name;                                                    //  0x0000(0x0008)  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_SpawnTrophyNotificationFX_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_OnNotifyOculusUpdate_Params
    {
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_ExecuteUbergraph_ScramTrophyManager_BP_Params
    {
    public:
        int32_t                                                      EntryPoint;                                              //  0x0000(0x0004)  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
    };

    /**
     * 
     * Size -> 0x0000
     */
    class AScramTrophyManager_BP_C_OnEarnedTrophyDispatcher__DelegateSignature_Params
    {
    };

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
