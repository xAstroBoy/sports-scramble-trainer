#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "Engine_ENUMS.h"
#include "SelectionDetailsMenuType_ENUMS.h"
#include "SportsScramble_ENUMS.h"
#include "GameModeTypes_ENUMS.h"
#include "BasicTypes_UScriptMulticastDelegate.h"
#include "BasicTypes_FName.h"
#include "ResultsData_FResultsData.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FScramFriend.h"
#include "SportsScramble_FScramGameInvite.h"
#include "ChallengeResultState_ENUMS.h"
#include "DummyParent_ADummyParent_C.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_UScriptDelegate.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UTimelineComponent; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };
namespace CG::Engine { class AActor; };
namespace CG::StandLocationIndicator { class AStandLocationIndicator_C; };
namespace CG::Header { class AHeader_C; };
namespace CG::Button_Standard { class AButton_Standard_C; };
namespace CG::Menu_Results { class AMenu_Results_C; };
namespace CG::Menu_TrophyAwarded { class AMenu_TrophyAwarded_C; };
namespace CG::SportsScramble { class UScramSaveData; };
namespace CG::Menu_Message { class AMenu_Message_C; };
namespace CG::Menu_ChooseSports { class AMenu_ChooseSports_C; };
namespace CG::Menu_FriendList { class AMenu_FriendList_C; };
namespace CG::ScramPlayer_BP { class AScramPlayer_BP_C; };
namespace CG::Menu_GameDetails { class AMenu_GameDetails_C; };
namespace CG::Button_AvatarEdit { class AButton_AvatarEdit_C; };
namespace CG::Menu_QpDetails { class AMenu_QpDetails_C; };
namespace CG::Engine { class UTexture2D; };
namespace CG::Menu_SportOptions { class AMenu_SportOptions_C; };
namespace CG::Menu_TextTwo { class AMenu_TextTwo_C; };
namespace CG::Engine { class UTexture; };
namespace CG::Menu_Feathered { class AMenu_Feathered_C; };
namespace CG::Menu_IndexSelection { class AMenu_IndexSelection_C; };
namespace CG::Menu_PanelImages { class AMenu_PanelImages_C; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SelectionDetailsMenu
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/UI/SelectionDetailsMenu.SelectionDetailsMenu_C
     * Size -> 0x025C (FullSize[0x058C] - InheritedSize[0x0330])
     */
    class ASelectionDetailsMenu_C : public DummyParent::ADummyParent_C
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::USceneComponent*                                     FarRightButtonPos;                                       //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     Scene;                                                   //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     AvatarButtonPos;                                         //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     AvatarOffset;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     BottomRightButtonPos;                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     BottomLeftButtonPos;                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     BottomMidButtonPos;                                      //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     FarLeftButtonPos;                                        //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     LeftButtonPos;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     MenuRoot;                                                //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     MenuScaleRoot;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     RightButtonPos;                                          //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     OffsetRoot;                                              //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USceneComponent*                                     Root;                                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        float                                                        Timeline_MenuScale_Alpha_411D8E3E40322D6C1CFBB29EF192BB43; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::ETimelineDirection                                   Timeline_MenuScale__Direction_411D8E3E40322D6C1CFBB29EF192BB43; //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UTimelineComponent*                                  Timeline_MenuScale;                                      //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SelectionDetailsMenuType::ESelectionDetailsMenuType          MenuType;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        SportsScramble::EScramSport                                  Sport;                                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        GameModeTypes::EGameModeTypes                                ResultsType;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x5];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ScramGameInstance::UScramGameInstance_C*                     GameInstance;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         QuitToMainMenu;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        Engine::AActor*                                              ActiveSubmenu;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        StandLocationIndicator::AStandLocationIndicator_C*           StandLocator;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         OldMenuClear;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        BasicTypes::UScriptMulticastDelegate                         SelectionComplete;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        bool                                                         SelectionMade;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         SinglePlayer;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FName                                            SelectedGame;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Header::AHeader_C*                                           Header;                                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Button_Standard::AButton_Standard_C*                         LeftButton;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Button_Standard::AButton_Standard_C*                         RightButton;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         MenuOpened;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        bool                                                         QuittingMenu;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ResultsData::FResultsData                                    ResultsData;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Menu_Results::AMenu_Results_C*                               ResultsMenu;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Menu_TrophyAwarded::AMenu_TrophyAwarded_C*                   TrophyMenu;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::UScramSaveData*                              SaveData;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Button_Standard::AButton_Standard_C*                         NextButton;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Button_Standard::AButton_Standard_C*                         HomeButton;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Menu_Message::AMenu_Message_C*                               MenuMessage;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Menu_ChooseSports::AMenu_ChooseSports_C*                     ChooseSportMenu;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<SportsScramble::FScramFriend>             friends;                                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<SportsScramble::FScramGameInvite>         invites;                                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        SportsScramble::FScramFriend                                 FriendToInvite;                                          //  Edit, BlueprintVisible, DisableEditOnInstance
        Menu_FriendList::AMenu_FriendList_C*                         FriendListMenu;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::FScramGameInvite                             FriendToJoin;                                            //  Edit, BlueprintVisible, DisableEditOnInstance
        ScramPlayer_BP::AScramPlayer_BP_C*                           LocalPlayer;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         CancelMatchMaking;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         QuitEarly;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0004[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Button_Standard::AButton_Standard_C*                         InfoButton;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Menu_GameDetails::AMenu_GameDetails_C*                       GameDetailsMenu;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        RotationOffset;                                          //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        bool                                                         UnlockNextTraining;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0005[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Button_AvatarEdit::AButton_AvatarEdit_C*                     AvatarButton;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::UScriptMulticastDelegate                         InvitesUpdated;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable
        bool                                                         UpdatingInvites;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        ChallengeResultState::EChallengeResultState                  ChallengeResultState;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         WaitingForFriends;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         MultiplayerQueued;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor

    public:
        void FailsafeDoubleMenu();
        void SpawnConfirmationMenu(const BasicTypes::FName& LocText, const BasicTypes::FText& OverrideText, const BasicTypes::UScriptDelegate& Event);
        void SpawnJoinInviteMenu(const BasicTypes::UScriptDelegate& JoinEvent, const BasicTypes::UScriptDelegate& DismissEvent);
        void SpawnQpDetailsMenu(const BasicTypes::UScriptDelegate& EditEvent, const BasicTypes::UScriptDelegate& SpawnNavEvent, Menu_QpDetails::AMenu_QpDetails_C** Menu);
        void UpdateTeamColor();
        void SpawnEditAvatarMenu();
        void SpawnAvatarButton(const BasicTypes::UScriptDelegate& AvatarEvent);
        void SpawnInfoButton(const BasicTypes::UScriptDelegate& Event);
        void SpawnTrainingOptionsMenu();
        void SpawnFriendListMenu(BasicTypes::TArray<SportsScramble::FScramFriend>* FriendsList, BasicTypes::TArray<SportsScramble::FScramGameInvite>* InviteList, const BasicTypes::UScriptDelegate& InviteEvent, const BasicTypes::UScriptDelegate& JoinEvent, const BasicTypes::UScriptDelegate& FailEvent);
        void SpawnMessageMenu(const BasicTypes::FText& Message, int32_t TimerDisplay);
        void SpawnChooseSportsMenu(const BasicTypes::UScriptDelegate& UpdateButtonEvent);
        void Spawn3DImageButtonMenu(BasicTypes::TArray<BasicTypes::FName>* LocTextNames, BasicTypes::TArray<Engine::UTexture2D*>* ImagesL, BasicTypes::TArray<Engine::UTexture2D*>* ImagesR, const BasicTypes::UScriptDelegate& Event);
        void AwardsEarned(bool* AwardWaiting);
        void SpawnTrophyAvatarNotification(const BasicTypes::UScriptDelegate& AwardReadyEvent);
        void SpawnResultsMenu(const BasicTypes::UScriptDelegate& ResultsCompleteEvent);
        void SpawnGameDetailsMenu(GameModeTypes::EGameModeTypes Mode, Menu_GameDetails::AMenu_GameDetails_C** Menu);
        void SpawnSportOptionsMenu(Menu_SportOptions::AMenu_SportOptions_C** Menu);
        void SpawnPnpWinner();
        void SpawnTextTwoMenu(const BasicTypes::FName& LocText0, const BasicTypes::FName& LocText1, const BasicTypes::UScriptDelegate& Event, Menu_TextTwo::AMenu_TextTwo_C** Menu);
        void GetAllPnpGameData(BasicTypes::TArray<Engine::UTexture2D*>* ImageList, BasicTypes::TArray<BasicTypes::FText>* TitleList);
        void SpawnFeatherMenu(BasicTypes::TArray<Engine::UTexture*>* Textures, BasicTypes::TArray<BasicTypes::FText>* Texts, int32_t StartIndex, const BasicTypes::UScriptDelegate& Event, Menu_Feathered::AMenu_Feathered_C** Menu);
        void SpawnPlayerCountMenu();
        void EnableActiveMenuInput();
        void DisableActiveMenuInput();
        void SpawnHeader(const BasicTypes::UScriptDelegate& FirstMenu);
        void GetNextGame(BasicTypes::FName* NextGame);
        void UnbindFromPause();
        void ShowMenus();
        void HideMenus();
        void ProcessResultsData(bool* ExitedEarly);
        void HasOptionsMenu(const BasicTypes::FName& Game, bool* HasOptionMenu);
        void GetSpawnOverride(BasicTypes::FName* SpawnOverride);
        void SpawnIndexButtonMenu(GameModeTypes::EGameModeTypes Mode, SportsScramble::EScramSport Sport, const BasicTypes::UScriptDelegate& Link, Menu_IndexSelection::AMenu_IndexSelection_C** Menu);
        void NextMenu(const BasicTypes::UScriptDelegate& Event);
        void SpawnImageButtonMenu(BasicTypes::TArray<BasicTypes::FName>* LocTextNames, BasicTypes::TArray<Engine::UTexture2D*>* Images, const BasicTypes::UScriptDelegate& Event, Menu_PanelImages::AMenu_PanelImages_C** MenuActor);
        void TypicalButtonSetup(bool Back, bool Replay, bool Ok, bool Play, bool Next, bool WideSpacing, const BasicTypes::UScriptDelegate& LeftEvent, const BasicTypes::UScriptDelegate& RightEvent, const BasicTypes::UScriptDelegate& NextEvent, bool Home, bool Trophy);
        void RemoveNavigationButtons();
        void Cleanup();
        void SpawnNavigationButtons(bool Left, bool Right, const BasicTypes::FText& LeftButtonText, const BasicTypes::FText& RightButtonText, bool WideSpacing, bool Replay, const BasicTypes::UScriptDelegate& LeftEvent, const BasicTypes::UScriptDelegate& RightEvent, const BasicTypes::UScriptDelegate& NextEvent, bool Home, bool Next, bool Trophy);
        void UpdateTitleText(const BasicTypes::FText& Text);
        void Initialize();
        void UserConstructionScript();
        void Timeline_MenuScale__FinishedFunc();
        void Timeline_MenuScale__UpdateFunc();
        void OnFailure_FE43AE584DB619A31AB35583046C6A27();
        void OnSuccess_FE43AE584DB619A31AB35583046C6A27();
        void OnFailure_CB7A18C444F2E804805EC3A046AC96DF();
        void OnSuccess_CB7A18C444F2E804805EC3A046AC96DF();
        void OnFailure_FE43AE584DB619A31AB3558304ED0BB9();
        void OnSuccess_FE43AE584DB619A31AB3558304ED0BB9();
        void OnFailure_CB7A18C444F2E804805EC3A0CE7B06EC();
        void OnSuccess_CB7A18C444F2E804805EC3A0CE7B06EC();
        void OnCancel_D21648FA4F7680E39E435BB326E4A1A7();
        void OnTimeout_D21648FA4F7680E39E435BB326E4A1A7();
        void OnFailure_D21648FA4F7680E39E435BB326E4A1A7();
        void OnSuccessClient_D21648FA4F7680E39E435BB326E4A1A7();
        void OnSuccessHost_D21648FA4F7680E39E435BB326E4A1A7();
        void OnFailure_B603128B47FD5879018CB5924F266D10();
        void OnSuccess_B603128B47FD5879018CB5924F266D10();
        void OnFailure_FC682A0844206A0687EAD6A05F2DED23();
        void OnSuccess_FC682A0844206A0687EAD6A05F2DED23();
        void OnFailure_D2DF35C34C56D5F01118B9942CE1DB3F();
        void OnSuccess_D2DF35C34C56D5F01118B9942CE1DB3F();
        void OnFailure_FE43AE584DB619A31AB355838CBBFA14();
        void OnSuccess_FE43AE584DB619A31AB355838CBBFA14();
        void OnFailure_CB7A18C444F2E804805EC3A028C7872D();
        void OnSuccess_CB7A18C444F2E804805EC3A028C7872D();
        void OnFailure_FE43AE584DB619A31AB355836A077BD5();
        void OnSuccess_FE43AE584DB619A31AB355836A077BD5();
        void OnFailure_CB7A18C444F2E804805EC3A0462DF741();
        void OnSuccess_CB7A18C444F2E804805EC3A0462DF741();
        void CreateResultsOnline();
        void CreateOnlineMatchTypeMenu();
        void BackFromOnlineMatchType(int32_t ButtonId);
        void OnlineGameTypeChosen(int32_t Index);
        void SpawnFindMatchChooseSport();
        void SpawnCheckingForFriendsMenu();
        void OnlineMatchTypeReady();
        void FindMatchMenuReady();
        void PlayWithFriendsReady();
        void UpdateNextButton(bool EnableButton);
        void CreateCheckingForPlayers();
        void StartFindMatchMatchmaking();
        void SpawnFriendsListMenu();
        void InviteFriendSelected(const SportsScramble::FScramFriend& InvitePlayer);
        void JoinFriendSelected(const SportsScramble::FScramGameInvite& JoinPlayer);
        void FriendsListDisplayed();
        void FailedConnection();
        void FindMatchFailedMessageReady();
        void OnGetFriends(bool wasSuccessful, BasicTypes::TArray<SportsScramble::FScramFriend> friends);
        void InvitesChecked(bool wasSuccessful, BasicTypes::TArray<SportsScramble::FScramGameInvite> invites);
        void InvitingFriendMessage();
        void InvitingMessageDisplayed();
        void ShowJoiningMatchMessage();
        void JoinMatchMenuReady();
        void PreparingJoinFindMatch();
        void ClientJoinFriend();
        void ExitFailMessage(int32_t ButtonId);
        void CancelInvite(int32_t ButtonId);
        void CancelFindMatch(int32_t ButtonId);
        void BackToChooseOnlineType(int32_t ButtonId);
        void SportsPoolSelected(int32_t ButtonId);
        void TimedOut();
        void RefreshFailed();
        void CreateJoinInviteMenu();
        void InvitesDismissed();
        void QuickMatchTurnAround();
        void SpawnQuickMatchTurnAround(Engine::AActor* DestroyedActor);
        void QuickMatchTurnAroundCompleted(Engine::AActor* DestroyedActor);
        void TurnAroundHostFriend();
        void SpawnTurnAroundHostFriend(Engine::AActor* DestroyedActor);
        void HostFriendTurnAroundComplete(Engine::AActor* DestroyedActor);
        void TurnAroundJoinMatch();
        void SpawnTurnAroundJoinMatch(Engine::AActor* DestroyedActor);
        void JoinMatchTurnAroundComplete(Engine::AActor* DestroyedActor);
        void TimedOutSelectionMade(int32_t ID);
        void SpawnInviteCancelledMessage();
        void InviteCancelledMessageDisplayed();
        void NoInternet();
        void NewInviteReceived();
        void NewInviteCollected(bool wasSuccessful, BasicTypes::TArray<SportsScramble::FScramGameInvite> invites);
        void ClientInviteJoinFailed(SportsScramble::EScramPendingGameFailure failureType);
        void ClientUnrealJoinFailedMenu();
        void ServerInviteJoinFailed(SportsScramble::EScramPendingGameFailure failureType);
        void UnrealConnectionFailed(SportsScramble::EScramPendingGameFailure FailureType);
        void UnrealConnectionFailedMessage();
        void UnrealConnectedFailedExit(int32_t ButtonId);
        void ServerUnrealJoinFailedMenu();
        void CreateResultsPnpQuickPlay();
        void CreateResultsPnPTournament();
        void CreatePnpPlayerCountMenu();
        void CreatePnPGameType();
        void CreatePnpTournamentCountMenu();
        void PnpQuickPlayGameSelection();
        void StartTournament(int32_t ID);
        void PnPStart();
        void tempEvent();
        void PvpMenuReady();
        void PnpGameTypeReady();
        void TournamentCountReady();
        void PnpSelectionReady();
        void PnpQuickPlaySelectionMade(int32_t Index);
        void PnpGameTypeChosen(int32_t Index);
        void PnpResultsDisplayed();
        void BackToPlayerCountMenu(int32_t ButtonId);
        void BackToPnpGameType(int32_t ButtonId);
        void BackToMultiplayerMode(int32_t ButtonId);
        void PlayerCountComplete(int32_t ButtonId);
        void CreateSportModeMenu();
        void CreateResultsSportQuickplay();
        void CreateResultsTraining();
        void CreateResultsChallenge();
        void SportModeSelected(int32_t ID);
        void SpawnQpInfoMenu();
        void SpawnTrainingSelectionMenu();
        void SpawnChallengesSelectionMenu();
        void SpawnGameInfoScreen();
        void SpawnTrainingOptions();
        void SportMenuModeReady();
        void SelectionMenuReady();
        void QuickPlaySetupReady();
        void GameInfoReady();
        void TrainingOptionsReady();
        void GameSelected(int32_t ID, const BasicTypes::FName& GameName);
        void FinishTrainingOrChallenge();
        void FinishQuickplay();
        void ToggleChallengeInfo(int32_t ButtonId);
        void BackToSportModeMenu(int32_t ButtonId);
        void PlayQuickPlay(int32_t ButtonId);
        void ReturnToSportOptionMenu(int32_t ButtonId);
        void BackToGameSelection(int32_t ButtonId);
        void StartTrainingOrChallenge(int32_t ButtonId);
        void BackToGameInfoScreen(int32_t ButtonId);
        void TrainingOptionsSet(int32_t ButtonId);
        void ResultsReady(bool WideNextButton);
        void ResultsDisplayComplete(bool WideNextButton);
        void FadeToThemeMusic();
        void SportOptionAvatarButtonUsed(int32_t ButtonId);
        void SportOptionEditAvatar();
        void SportOptionEditAvatarOpened();
        void SportOptionEditAvatarComplete(int32_t ButtonId);
        void SportModeAvatarButtonUsed(int32_t ButtonId);
        void SportModeEditAvatar();
        void SportModeEditAvatarOpened();
        void SportModeEditAvatarComplete(int32_t ButtonId);
        void SelectionMenuAvatarButtonUsed(int32_t ButtonId);
        void SelectionMenuEditAvatar();
        void SelectionMenuEditAvatarOpened();
        void SelectionMenuEditAvatarComplete(int32_t ButtonId);
        void GameInfoAvatarButtonUsed(int32_t ButtonId);
        void GameInfoEditAvatar();
        void GameInfoEditAvatarOpened();
        void GameInfoEditAvatarComplete(int32_t ButtonId);
        void TrainingOptionsAvatarButtonUsed(int32_t ButtonId);
        void TrainingOptionsEditAvatar();
        void TrainingOptionsEditAvatarOptions();
        void TrainingOptionsEditAvatarComplete(int32_t ButtonId);
        void EditSportOptionsSelected(int32_t ID);
        void SpawnQpDetailsNavButtons();
        void SpawnSportOptionMenu();
        void BackToQpInfo(int32_t ButtonId);
        void ReceiveBeginPlay();
        void OpenFirstMenu();
        void InitialMenu();
        void CloseMenu(bool QuitButtonPressed);
        void CreateMultiplayerModeMenu();
        void MultiplayerModeSelected(int32_t ID);
        void ReturnToCenter();
        void CapsuleOn();
        void ReceiveTick(float DeltaSeconds);
        void GamePaused();
        void GameUnpaused();
        void HeaderDestroyed(Engine::AActor* DestroyedActor);
        void ScaleUpMenu();
        void ScaleDownMenu();
        void ButtonPressed(int32_t ID);
        void MultiplayerModeReady();
        void RemoveLastMenu();
        void FinalShutdown();
        void TrophyComplete(bool AllAwardsComplete);
        void CreateTrophyMenu();
        void TrophyLoop();
        void CloseMenuWithHeaderHandoff();
        void DestroyMenuWithHandoff();
        void SkipResults();
        void QuitButtonPressed(int32_t ButtonId);
        void TrophyReadyToSpawn(int32_t ButtonId);
        void NextMenuEarlyExit(int32_t ButtonId);
        void PlayerTurnedAround(Engine::AActor* DestroyedActor);
        void RecenterMenu();
        void Create();
        void InviteUpdateComplete(bool wasSuccessful, BasicTypes::TArray<SportsScramble::FScramGameInvite> invites);
        void WaitForInvitesUpdateComplete();
        void ExecuteUbergraph_SelectionDetailsMenu(int32_t EntryPoint);
        void InvitesUpdated__DelegateSignature();
        void MenuOpened__DelegateSignature();
        void SelectionComplete__DelegateSignature(SportsScramble::EScramSport Sport, bool SinglePlayer);
        void OldMenuClear__DelegateSignature();
        void QuitToMainMenu__DelegateSignature();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/UI/SelectionDetailsMenu.SelectionDetailsMenu_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
