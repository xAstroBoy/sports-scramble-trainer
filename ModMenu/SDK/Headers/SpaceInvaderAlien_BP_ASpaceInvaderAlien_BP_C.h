#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_TArray.h"
#include "BW_AlienInfo_FBW_AlienInfo.h"
#include "SportsScramble_ABowlingSpaceInvaderAlien.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class UScramTimeLineComponent; };
namespace CG::Engine { class UBoxComponent; };
namespace CG::SportsScramble { class UInstancedMesh; };
namespace CG::Engine { class USoundBase; };
namespace CG::BW_SpaceAttack_Particle_Pool { class ABW_SpaceAttack_Particle_Pool_C; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SpaceInvaderAlien_BP
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Sports/Bowling/Lanes/ChildActors/SpaceInvaderAlien_BP.SpaceInvaderAlien_BP_C
     * Size -> 0x0090 (FullSize[0x0430] - InheritedSize[0x03A0])
     */
    class ASpaceInvaderAlien_BP_C : public SportsScramble::ABowlingSpaceInvaderAlien
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        SportsScramble::UScramTimeLineComponent*                     ScramTimeLine;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UBoxComponent*                                       Box;                                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        SportsScramble::UInstancedMesh*                              InstancedMesh;                                           //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          PositiveSound;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FLinearColor                                    NegativeColor;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::FLinearColor                                    PositiveColor;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        AnimPhase;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        PhaseIncrement;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        float                                                        PhaseCap;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<CoreUObject::FLinearColor>                Color;                                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        CoreUObject::FLinearColor                                    ActiveColor;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BW_AlienInfo::FBW_AlienInfo                                  CurrentPattern;                                          //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         UsePattern;                                              //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0001[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BW_SpaceAttack_Particle_Pool::ABW_SpaceAttack_Particle_Pool_C* Pool;                                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void ShouldShowFlyText(bool* Output);
        void Local_EndLaneFX();
        void Local_ScoreFX(bool bonus, int32_t score);
        void VerifyPool(bool* Success);
        void MakeFractionalData(CoreUObject::FVector* NewParam);
        void RunParticle(const CoreUObject::FTransform& WorldTransform, const CoreUObject::FLinearColor& Color);
        void UserConstructionScript();
        void UncoverAlien();
        void RunScoreFX(Engine::AActor* Ball);
        void RunEndLaneFX();
        void ReceiveBeginPlay();
        void UpdateAnimation();
        void UpdateAlien();
        void HideAlien();
        void Multi_EndLaneFX();
        void Server_ScoreFX(bool bonus, int32_t score);
        void AddScore(int32_t ScoreValue, Engine::AActor* Ball);
        void Server_EndLaneFX();
        void Multi_ScoreFX(bool bonus, int32_t score);
        void ExecuteUbergraph_SpaceInvaderAlien_BP(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Sports/Bowling/Lanes/ChildActors/SpaceInvaderAlien_BP.SpaceInvaderAlien_BP_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
