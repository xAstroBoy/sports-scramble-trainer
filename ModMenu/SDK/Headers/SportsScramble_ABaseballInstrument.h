#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "SportsScramble_FAngle.h"
#include "SportsScramble_AScramInstrument.h"
#include "SportsScramble_FBaseballInstrumentProperties.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UStaticMesh; };
namespace CG::Engine { class USkeletalMesh; };
namespace CG::Engine { class UParticleSystemComponent; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class USoundBase; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BaseballInstrument
     * Size -> 0x0230 (FullSize[0x0F60] - InheritedSize[0x0D30])
     */
    class ABaseballInstrument : public SportsScramble::AScramInstrument
    {
    public:
        Engine::UStaticMesh*                                         BrokenStaticMesh;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::USkeletalMesh*                                       BrokenSkeletalMesh;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UParticleSystemComponent*                            BreakFX;                                                 //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::UMaterialInterface*>              BrokenMaterials;                                         //  Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        Engine::USoundBase*                                          BreakSound;                                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        BreakVolume;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::FAngle                                       MaxValidSwingAngle;                                      //  Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x1D9];                                 //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        bool                                                         mClientNeedsSelectorInitialization;                      //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::ABaseballBall*>           mSwungAtBalls;                                           //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void OnInstrumentBreakEvent(CoreUObject::UObject* pWorldContextObject, SportsScramble::UScramEventBasePayload* pPayload);
        bool IsPendingRelease();
        void InstrumentLowHealth(float health);
        SportsScramble::FBaseballInstrumentProperties GetBaseballInstrumentProperties();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BaseballInstrument");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
