#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "CoreUObject_FBox.h"
#include "SportsScramble_AScramActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UPhysicalMaterial; };
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class ABowlingBall; };
namespace CG::SportsScramble { class ABowlingPinsetter; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::SportsScramble { class ABowlingBallReturn; };
namespace CG::SportsScramble { class ABowlingAlley; };
namespace CG::SportsScramble { class ABowlingLane; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingAlley
     * Size -> 0x0068 (FullSize[0x03B0] - InheritedSize[0x0348])
     */
    class ABowlingAlley : public SportsScramble::AScramActor
    {
    public:
        BasicTypes::TArray<CoreUObject::FBox>                        Regions;                                                 //  Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        Engine::UPhysicalMaterial*                                   FloorMaterial;                                           //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::AActor*                                              mpPlayer;                                                //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        BasicTypes::TArray<SportsScramble::ABowlingBall*>            mBalls;                                                  //  Net, ZeroConstructor, NativeAccessSpecifierPrivate
        BasicTypes::TArray<SportsScramble::ABowlingBall*>            mThrownBalls;                                            //  Net, ZeroConstructor, NativeAccessSpecifierPrivate
        SportsScramble::ABowlingPinsetter*                           mpPinsetter;                                             //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x20];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetPlayer(Engine::AActor* Player);
        void SetPinsetter(SportsScramble::ABowlingPinsetter* pinsetter);
        void OnBallReleased(CoreUObject::UObject* pWorldContextObject, SportsScramble::UScramEventBasePayload* pPayload);
        void OnBallOut(SportsScramble::ABowlingBall* Ball, bool pit, bool restricted);
        void OnBallGrabbed(CoreUObject::UObject* pWorldContextObject, SportsScramble::UScramEventBasePayload* pPayload);
        void OnBallDestroyed(Engine::AActor* pBallActor);
        bool IsLaneReady();
        int32_t GetScore();
        Engine::AActor* GetPlayer();
        float GetFloorZ();
        Engine::UPhysicalMaterial* GetFloorMaterial();
        BasicTypes::TArray<SportsScramble::ABowlingBall*> GetBalls();
        SportsScramble::ABowlingBallReturn* GetBallReturn();
        SportsScramble::ABowlingAlley* STATIC_GetAlley(Engine::AActor* Player);
        SportsScramble::ABowlingLane* GetActiveLane();
        void ClearBalls(bool includeThrownBalls);
        void ClearBall(SportsScramble::ABowlingBall* Ball);
        bool AnyThrownBallsRemaining();
        void AddInstigatorBallCode(SportsScramble::ABowlingBall* Ball);
        void AddBall(SportsScramble::ABowlingBall* Ball);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingAlley");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
