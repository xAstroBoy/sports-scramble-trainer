#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_FRandomActorTable.h"
#include "SportsScramble_FMinMaxFloat.h"
#include "BasicTypes_FName.h"
#include "Engine_FVector_NetQuantize.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FLightCone.h"
#include "SportsScramble_AScramSceneComponentActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class ABowlingBall; };
namespace CG::Engine { class UAudioComponent; };
namespace CG::SportsScramble { class UBowlingBallReturnTrack; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingBallReturn
     * Size -> 0x00A0 (FullSize[0x03F0] - InheritedSize[0x0350])
     */
    class ABowlingBallReturn : public SportsScramble::AScramSceneComponentActor
    {
    public:
        SportsScramble::FRandomActorTable                            BallTable;                                               //  Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected
        SportsScramble::ABowlingBall*                                OverrideBall;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        AnimateInTime;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        AnimateOutTime;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        StorageDistance;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        HorizontalRangeForLightCone;                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 VerticalRangeForLightCone;                               //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        bool                                                         TurnOnConeForHeldBall;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UAudioComponent*                                     SlideSound;                                              //  Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::FName                                            SpeedVar;                                                //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::FVector_NetQuantize                                  mStartPosition;                                          //  Net, NoDestructor, NativeAccessSpecifierPrivate
        Engine::FVector_NetQuantize                                  mStoragePosition;                                        //  Net, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x18];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::FLightCone>               mLightCones;                                             //  ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetSlideDirection(bool Forward);
        void ResetBallTable();
        void OnTrackMotionStop();
        void OnTrackMotionStart();
        void OnReturnSlideStopped();
        void OnReturnSlideStarted();
        void IncrementBallSelection(SportsScramble::ABowlingBall* BallClass);
        SportsScramble::UBowlingBallReturnTrack* GetReturnTrack();
        SportsScramble::ABowlingBall* GetRandomBall();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingBallReturn");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
