#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FBox.h"
#include "SportsScramble_FMinMaxFloat.h"
#include "SportsScramble_FMinMaxAngle.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FQuat.h"
#include "SportsScramble_AScramMeshActor.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UCurveVector; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingFootballBlocker
     * Size -> 0x0100 (FullSize[0x0450] - InheritedSize[0x0350])
     */
    class ABowlingFootballBlocker : public SportsScramble::AScramMeshActor
    {
    public:
        CoreUObject::FBox                                            MovementSpace;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        SportsScramble::FMinMaxFloat                                 MovementSpeed;                                           //  Edit, NoDestructor, NativeAccessSpecifierPublic
        SportsScramble::FMinMaxAngle                                 HeadingDeltaRange;                                       //  Edit, NoDestructor, NativeAccessSpecifierPublic
        float                                                        HeadingSmoothTime;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        RotationSmoothTime;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        SpeedSmoothTime;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UCurveVector*                                        RotationJitter;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        BoundaryHoldTime;                                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        BlockingRadius;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AActor*                                              ClientAttachParent;                                      //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         ClientRelativeLocation;                                  //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FRotator                                        ClientRelativeRotation;                                  //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        mTargetSpeed;                                            //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        CoreUObject::FVector                                         mTargetMoveDirection;                                    //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FQuat                                           mTargetRotation;                                         //  Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x60];                                  //  MISSED OFFSET (PADDING)

    public:
        void StopBlocker();
        void StartBlocker(const CoreUObject::FTransform& centerTransform, float initialAngleDegrees);
        void DeferredInit();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingFootballBlocker");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
