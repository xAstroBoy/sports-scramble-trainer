#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FBowlingLaneFrictionRegion.h"
#include "SportsScramble_FBowlingLanePitRegion.h"
#include "SportsScramble_FBowlingLaneRegion.h"
#include "SportsScramble_FAngle.h"
#include "SportsScramble_FMinMaxAngle.h"
#include "SportsScramble_FMinMaxFloat.h"
#include "SportsScramble_FBowlingLaneAIData.h"
#include "SportsScramble_AScramActor.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UCurveFloat; };
namespace CG::SportsScramble { class UBowlingLaneSpline; };
namespace CG::SportsScramble { class ABowlingAlley; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingLane
     * Size -> 0x0180 (FullSize[0x04C8] - InheritedSize[0x0348])
     */
    class ABowlingLane : public SportsScramble::AScramActor
    {
    public:
        SportsScramble::ELaneType                                    LaneType;                                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         DisableBallDriftMotion;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        VisualRollFriction;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<SportsScramble::FBowlingLaneFrictionRegion> FrictionRegions;                                         //  Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        BasicTypes::TArray<SportsScramble::FBowlingLanePitRegion>    PitRegions;                                              //  Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FBowlingLaneRegion                           LaneBounceRegion;                                        //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FBowlingLaneRegion                           LaneFloorRegion;                                         //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FBowlingLaneRegion                           TargetAirRegion;                                         //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FBowlingLaneRegion                           TargetGroundRegion;                                      //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FAngle                                       MinValidThrowYaw;                                        //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxAngle                                 ValidThrowPitch;                                         //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 ThrowBiasSpeedRange;                                     //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UCurveFloat*                                         MinThrowBiasYawMap;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveFloat*                                         MaxThrowBiasYawMap;                                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveFloat*                                         MinThrowBiasPitchMap;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::UCurveFloat*                                         MaxThrowBiasPitchMap;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::FAngle                                       MaxThrowRotationAdjustment;                              //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::FBowlingLaneAIData                           AIData;                                                  //  Edit, Protected, NativeAccessSpecifierProtected
        float                                                        DownLaneAssistPercentModifiers[0x3];                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        AvoidGuttersAssistPercentModifiers[0x3];                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        SplineAssistPercentModifiers[0x3];                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         UsesBowlingPins;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::UBowlingLaneSpline*>      mSplines;                                                //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate

    public:
        void ShowBaseballLane();
        bool ShouldUsePins();
        void HideBaseballLane();
        CoreUObject::FVector GetDownLaneVector();
        SportsScramble::ABowlingAlley* GetAlley();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingLane");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
