#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_FMinMaxFloat.h"
#include "SportsScramble_AScramActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class ABowlingPlinkoBall; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingPlinko
     * Size -> 0x0058 (FullSize[0x03A0] - InheritedSize[0x0348])
     */
    class ABowlingPlinko : public SportsScramble::AScramActor
    {
    public:
        SportsScramble::FMinMaxFloat                                 LocalBallHorizontalRange;                                //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 LocalBallVerticalRange;                                  //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 WidgetHorizontalRange;                                   //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 WidgetVerticalRange;                                     //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        float                                                        LocalBallResolveDepth;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x34];                                  //  MISSED OFFSET (PADDING)

    public:
        void ResolveBall(SportsScramble::ABowlingPlinkoBall* Ball, float localY);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingPlinko");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
