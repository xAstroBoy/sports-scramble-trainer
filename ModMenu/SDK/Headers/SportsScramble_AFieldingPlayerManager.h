#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_FMinMaxFloat.h"
#include "SportsScramble_AScramActor.h"
#include "SportsScramble_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.FieldingPlayerManager
     * Size -> 0x0030 (FullSize[0x0378] - InheritedSize[0x0348])
     */
    class AFieldingPlayerManager : public SportsScramble::AScramActor
    {
    public:
        SportsScramble::FMinMaxFloat                                 TimeScalesPerZone[0x4];                                  //  Edit, NoDestructor, NativeAccessSpecifierPublic
        float                                                        MaxApex;                                                 //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::FMinMaxFloat                                 FieldingHeightRange;                                     //  Edit, NoDestructor, NativeAccessSpecifierPublic
        float                                                        FieldingWidthMinimum;                                    //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic

    public:
        void SetTimeScale(SportsScramble::EVerticalFieldZone zone, const SportsScramble::FMinMaxFloat& TimeScale);
        void OnBallInPlay(SportsScramble::ABaseballBall* Ball, SportsScramble::EVerticalFieldZone zone);
        SportsScramble::FMinMaxFloat GetTimeScale(SportsScramble::EVerticalFieldZone zone);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.FieldingPlayerManager");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
