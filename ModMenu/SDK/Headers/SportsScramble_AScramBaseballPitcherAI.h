#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_FMinMaxFloat.h"
#include "CoreUObject_FVector.h"
#include "SportsScramble_FBowlingThrowParameters.h"
#include "BasicTypes_FName.h"
#include "SportsScramble_FAngle.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FMittSpawnInfo.h"
#include "SportsScramble_AScramBaseAI.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UDataTable; };
namespace CG::Engine { class USkeletalMeshComponent; };
namespace CG::Engine { class USceneComponent; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::SportsScramble { class UBaseballPitcherAIAnimInstance; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramBaseballPitcherAI
     * Size -> 0x0320 (FullSize[0x0688] - InheritedSize[0x0368])
     */
    class AScramBaseballPitcherAI : public SportsScramble::AScramBaseAI
    {
    public:
        Engine::UDataTable*                                          ScrambleMods;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 DelayBeforePitchTime;                                    //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxFloat                                 HoldTime;                                                //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        float                                                        BallRegionWidth;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        ChanceBallUp;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        ChanceBallDown;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        ChanceBallLeft;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        ChanceBallRight;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        CoreUObject::FVector                                         CatchLocation;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::FBowlingThrowParameters                      BowlingThrowParameters;                                  //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        BasicTypes::FName                                            LeftHandBone;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::FName                                            RightHandBone;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        int32_t                                                      NumScrambleBallsToChoose;                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         ShowScrambleBalls;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::FAngle                                       HeadTrackPitchClamp;                                     //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FAngle                                       HeadTrackYawClamp;                                       //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        float                                                        PercentageChanceToWinAScrambleBall;                      //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PercentageChanceThatBallIsImbued;                        //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        PercentageChanceToChooseAScrambleBall;                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USkeletalMeshComponent*                              SkeletalMesh;                                            //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        Engine::USceneComponent*                                     TargetRoot;                                              //  Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::ABaseballBall*                               OverrideBall;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0002[0x10];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::ABaseballBall*                               mpBall;                                                  //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        SportsScramble::UBaseballPitcherAIAnimInstance*              mpAnimInstance;                                          //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::FMittSpawnInfo>           mSpawnableBalls;                                         //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x230];                                 //  MISSED OFFSET (PADDING)

    public:
        void PlayMittSound(SportsScramble::ABaseballBall* Ball, float BallSpeed);
        void GetScrambleBallClass(SportsScramble::ABaseballBall** Ball);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramBaseballPitcherAI");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
