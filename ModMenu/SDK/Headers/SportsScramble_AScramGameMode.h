#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_AGameModeBase.h"
#include "BasicTypes_FString.h"
#include "SportsScramble_FScramSportPreferences.h"
#include "SportsScramble_FScramFriend.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class AScramPlayer; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramGameMode
     * Size -> 0x0050 (FullSize[0x0418] - InheritedSize[0x03C8])
     */
    class AScramGameMode : public Engine::AGameModeBase
    {
    public:
        BasicTypes::TArray<Engine::AActor*>                          SeamlessTravelActors;                                    //  Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x30];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::AScramPlayer*>            mReadyPlayers;                                           //  ZeroConstructor, NativeAccessSpecifierPrivate

    public:
        void SetLocalizationCulture(const BasicTypes::FString& Culture);
        bool ServerTravel(const BasicTypes::FString& URL, bool Absolute, bool ShouldSkipGameNotify);
        void ResetMatch();
        BasicTypes::FString GetLocalizationCulture();
        SportsScramble::FScramSportPreferences GetClientSportPreferences();
        void DisallowMultiplayerLogins();
        void ClientSportPreferencesReceived();
        void AllowMatchmakingLogins();
        void AllowFriendLogin(const SportsScramble::FScramFriend& ScramFriend);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramGameMode");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
