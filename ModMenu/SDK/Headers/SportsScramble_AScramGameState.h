#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_ENUMS.h"
#include "BasicTypes_TArray.h"
#include "Engine_AGameStateBase.h"
#include "CoreUObject_FTransform.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class AScramBall; };
namespace CG::SportsScramble { class AScramPauseCapsule; };
namespace CG::SportsScramble { class AScramTrophyManager; };
namespace CG::SportsScramble { class AMusicManager; };
namespace CG::Engine { class USceneComponent; };
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class AScramSportManagerBase; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramGameState
     * Size -> 0x0090 (FullSize[0x03F8] - InheritedSize[0x0368])
     */
    class AScramGameState : public Engine::AGameStateBase
    {
    public:
        SportsScramble::AScramBall*                                  activeBallClass;                                         //  Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::EScramSport                                  Sport;                                                   //  Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        PingSmoothing;                                           //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::AScramPauseCapsule*                          PauseCapsuleBPClass;                                     //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::AScramTrophyManager*                         TrophyManagerBPClass;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::AMusicManager*                               MusicManagerClass;                                       //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected
        SportsScramble::AScramPauseCapsule*                          PauseCapsule;                                            //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        BasicTypes::TArray<Engine::USceneComponent*>                 mPauseHiddenComponents;                                  //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UStaticMeshComponent*>            mPauseHiddenInstancedComponents;                         //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::USceneComponent*>                 mAllHiddenComponents;                                    //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        BasicTypes::TArray<Engine::UStaticMeshComponent*>            mAllHiddenInstancedComponents;                           //  ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x18];                                  //  MISSED OFFSET (PADDING)

    public:
        void StartMatch();
        void ShowPausedActors();
        void ShowAllActors();
        void STATIC_SetActiveBallClass(CoreUObject::UObject* pWorldContextObject, SportsScramble::AScramBall* activeBallClass);
        void OnPauseCapsuleRemoved();
        void OnPauseCapsuleAdded();
        void STATIC_OnActorSpawned(Engine::AActor* Actor);
        bool STATIC_IsLocalGameStatePaused(CoreUObject::UObject* pWorldContextObject);
        bool STATIC_IsGameStatePaused(CoreUObject::UObject* pWorldContextObject);
        bool STATIC_IsActorHidden(Engine::AActor* Actor);
        void HidePausedActors();
        void HideAllActors();
        SportsScramble::AScramSportManagerBase* STATIC_GetSportManager(CoreUObject::UObject* pWorldContextObject);
        SportsScramble::EScramSport STATIC_GetSport(CoreUObject::UObject* pWorldContextObject);
        float STATIC_GetSmoothedPingTime(CoreUObject::UObject* pWorldContextObject);
        float STATIC_GetScramServerWorldTime(CoreUObject::UObject* pWorldContextObject);
        float STATIC_GetPingTime(CoreUObject::UObject* pWorldContextObject);
        CoreUObject::FTransform STATIC_GetPauseCapsuleTransform(CoreUObject::UObject* pWorldContextObject);
        SportsScramble::AScramBall* STATIC_GetActiveBallClass(CoreUObject::UObject* pWorldContextObject);
        void BlueprintCall_OnMultiplayerGameResume(bool isCalledByHost, SportsScramble::EGamePauseReason reason);
        void BlueprintCall_OnMultiplayerGamePaused(bool isCalledByHost, SportsScramble::EGamePauseReason reason);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramGameState");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
