#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "SportsScramble_AScramActor.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class USportState; };
namespace CG::SportsScramble { class AScramPlayerController; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramSportManagerBase
     * Size -> 0x0050 (FullSize[0x0398] - InheritedSize[0x0348])
     */
    class AScramSportManagerBase : public SportsScramble::AScramActor
    {
    public:
        bool                                                         LocalHumanCanBePlayer;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         RemoteHumanCanBePlayer;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         SaveSportStateInSingleplayer;                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         SaveSportStateInMultiplayer;                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<Engine::AActor*>                          mpPlayers;                                               //  Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::USportState*                                 mpRecentSportState;                                      //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0001[0x30];                                  //  MISSED OFFSET (PADDING)

    public:
        void StopSavingSportState();
        void SetSelectableBallClass(Engine::AActor* BallClass);
        void ServerReady();
        void SaveSportState();
        void OnHeartbeatSustained(SportsScramble::AScramPlayerController* pPlayerController);
        void OnHeartbeatDisconnected(SportsScramble::AScramPlayerController* pPlayerController);
        void OnGameDone();
        void LocalGameDone();
        Engine::AActor* GetPlayer(int32_t Index);
        Engine::AActor* GetOtherPlayer(Engine::AActor* Player);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramSportManagerBase");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
