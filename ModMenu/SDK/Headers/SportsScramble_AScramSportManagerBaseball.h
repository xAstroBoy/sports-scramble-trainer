#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_FAngle.h"
#include "SportsScramble_ENUMS.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FBox.h"
#include "BasicTypes_FName.h"
#include "BasicTypes_TArray.h"
#include "SportsScramble_FBaseballBallScrambleProperties.h"
#include "SportsScramble_FBaseballBallTrackingHelper.h"
#include "SportsScramble_AScramSportManagerBase.h"
#include "SportsScramble_FMittSpawnInfo.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class AScramBall; };
namespace CG::Engine { class UDataTable; };
namespace CG::SportsScramble { class AScramBaseballRunnerAI; };
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class AScramAvatar; };
namespace CG::SportsScramble { class AScramStrikeZone; };
namespace CG::SportsScramble { class ABaseballBallScrambleDisplay; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::SportsScramble { class ABaseballInstrument; };
namespace CG::CoreUObject { class UObject; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramSportManagerBaseball
     * Size -> 0x0328 (FullSize[0x06C0] - InheritedSize[0x0398])
     */
    class AScramSportManagerBaseball : public SportsScramble::AScramSportManagerBase
    {
    public:
        float                                                        PitchLookAtTime;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        CatcherThrowLookAtTime;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::FAngle                                       PitchLookAtAngle;                                        //  Edit, NoDestructor, NativeAccessSpecifierPublic
        float                                                        TimeBeforeDeletingBall;                                  //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         OverrideBattingSkill;                                    //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::EScramSkill                                  OverrideSkillLevel;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::AScramBall*                                  BallClass;                                               //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::UDataTable*                                          BallScrambleProperties;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::AScramBaseballRunnerAI*                      RunnerClass;                                             //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         OutfieldCenter;                                          //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         OutfieldEdge;                                            //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         OutfieldLocus;                                           //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         DoubleTripleMarkerPos;                                   //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         PitcherPos;                                              //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         InfieldEdge;                                             //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         RunnerSpawn;                                             //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         FirstBase;                                               //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         SecondBase;                                              //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         ThirdBase;                                               //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         HomePlate;                                               //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector                                         InnerFoul;                                               //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        InnerFoulSpeed;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FBox                                            HomePlateBox;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        bool                                                         RunnerOnFirst;                                           //  BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         RunnerOnSecond;                                          //  BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         RunnerOnThird;                                           //  BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         IsLocalPlayerBatting;                                    //  BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         InstrumentDamageEnabled;                                 //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         PitcherScrambleEnabled;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      BallsCalledInARow;                                       //  BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         WalksAndFreebiesEnabled;                                 //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0002[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        int32_t                                                      NumBallsForFreebie;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      NumBallsForWalk;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      MaxFieldedBalls;                                         //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        FenceMargin;                                             //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        Engine::AActor*                                              BallScrambleDisplay;                                     //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::FAngle                                       PitchingRegionAngle;                                     //  Edit, NoDestructor, NativeAccessSpecifierPublic
        float                                                        PitchingMoundExclusionRadius;                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        MaxInvalidTime;                                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        float                                                        GroundKillDelay;                                         //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::AScramAvatar*                                PitcherAvatar;                                           //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::AScramAvatar*                                BatterAvatar;                                            //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::FName                                            FieldCollisionTag;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> ScrambledBalls;                                          //  BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic
        SportsScramble::AScramStrikeZone*                            mpStrikeZone;                                            //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        bool                                                         mGameRunning;                                            //  Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0003[0xF];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::AScramBaseballRunnerAI*>  mpRunnersAtBase;                                         //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0004[0x20];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> mScrambleBallProperties;                                 //  ZeroConstructor, NativeAccessSpecifierPrivate
        SportsScramble::ABaseballBallScrambleDisplay*                mpBallScrambleDisplay;                                   //  ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0005[0xD8];                                  //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        SportsScramble::FBaseballBallTrackingHelper                  mTracker;                                                //  NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0006[0x60];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetScrambleBallProperties(BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> Properties);
        void SetBattingSkillOverride(bool shouldOverride, SportsScramble::EScramSkill skillLevel);
        void SetBall(SportsScramble::ABaseballBall* Ball);
        void SetAllowPitch(bool allowPitch);
        void SendBaseballEvent(SportsScramble::EBaseballEvent BaseballEvent, const CoreUObject::FVector& Location, SportsScramble::ABaseballBall* Ball);
        void SaveBaseballState(int32_t* VisitorsScore, int32_t* HomeScore, int32_t* Inning, bool* TopOfInning, bool* FirstPitchOfInning, int32_t* Outs, int32_t* Strikes, SportsScramble::ABaseballInstrument** BatterInstrument, BasicTypes::TArray<SportsScramble::FMittSpawnInfo>* PitcherScrambleOptions);
        void RestartGame(bool RestoringGame);
        void OnStrikeZoneHit(SportsScramble::ABaseballBall* pBall, SportsScramble::EScramStrikeResult Result);
        void OnRunnerSpawned(SportsScramble::AScramBaseballRunnerAI* runner);
        void OnBallHit(CoreUObject::UObject* pWorldContextObject, SportsScramble::UScramEventBasePayload* pPayload);
        void OnBallDeleted(SportsScramble::ABaseballBall* Ball);
        void LoadBaseballState(int32_t VisitorsScore, int32_t HomeScore, int32_t Inning, bool TopOfInning, bool FirstPitchOfInning, int32_t Outs, int32_t Strikes, SportsScramble::ABaseballInstrument* BatterInstrument, BasicTypes::TArray<SportsScramble::FMittSpawnInfo> PitcherScrambleOptions);
        BasicTypes::TArray<SportsScramble::ABaseballBall*> GetUnclassifiedBalls();
        BasicTypes::TArray<SportsScramble::FBaseballBallScrambleProperties> GetScrambleBallProperties();
        Engine::AActor* GetPitcher();
        BasicTypes::TArray<SportsScramble::ABaseballBall*> GetPitchedBalls();
        bool GetGameRunning();
        BasicTypes::TArray<SportsScramble::ABaseballBall*> GetFieldedBalls();
        int32_t GetBatterRunAdvantage();
        Engine::AActor* GetBatter();
        BasicTypes::TArray<SportsScramble::ABaseballBall*> GetBalls();
        void DeleteBall(SportsScramble::ABaseballBall* pBall);
        void BaseballEvent(SportsScramble::EBaseballEvent BaseballEvent, const CoreUObject::FVector& Location);
        void AssignStrikeZone(SportsScramble::AScramStrikeZone* strikeZone);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramSportManagerBaseball");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
