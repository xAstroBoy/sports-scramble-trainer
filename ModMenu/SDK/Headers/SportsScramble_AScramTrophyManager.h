#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_AScramActor.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FDateTime.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UDataTable; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramTrophyManager
     * Size -> 0x0018 (FullSize[0x0360] - InheritedSize[0x0348])
     */
    class AScramTrophyManager : public SportsScramble::AScramActor
    {
    public:
        Engine::UDataTable*                                          TrophyTable;                                             //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         SkipOculusUpdate;                                        //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x3];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        TrophyEarnedIgnoreTime;                                  //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        bool STATIC_WasTrophyEarned(const BasicTypes::FName& TrophyID, CoreUObject::UObject* pWorldContextObject);
        bool STATIC_WasAvatarEarned(const BasicTypes::FName& avatarID, CoreUObject::UObject* WorldContextObject);
        bool STATIC_TryGetTrophyEarnedDate(CoreUObject::FDateTime* date, const BasicTypes::FName& TrophyID, CoreUObject::UObject* WorldContextObject);
        void SpawnTrophyNotificationFX();
        void ResetAllTrophy();
        void OnNotifyTrophyEarned(const BasicTypes::FName& Name);
        void OnNotifyOculusUpdate();
        void InitializeTrophyAwardListeners();
        int32_t STATIC_GetEarnedTrophyCount(CoreUObject::UObject* pWorldContextObject);
        void STATIC_EarnTrophy(const BasicTypes::FName& TrophyName, CoreUObject::UObject* pWorldContextObject);
        void DeferNotifications(float Duration);
        void ClearAwardListeners();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramTrophyManager");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
