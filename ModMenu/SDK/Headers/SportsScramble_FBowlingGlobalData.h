#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FDataTableRowHandle.h"
#include "SportsScramble_FMinMaxAngle.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * ScriptStruct /Script/SportsScramble.BowlingGlobalData
     * Size -> 0x01C0
     */
    struct FBowlingGlobalData
    {
    public:
        Engine::FDataTableRowHandle                                  ThrowSpeedProperties[0x4];                               //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        Engine::FDataTableRowHandle                                  ThrowSpinProperties[0x4];                                //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        Engine::FDataTableRowHandle                                  ThrowTypeProperties[0x3];                                //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        SportsScramble::FMinMaxAngle                                 HookPitchRange;                                          //  Edit, NoDestructor, Protected, NativeAccessSpecifierProtected
        float                                                        DownLaneAssistPercent[0x3];                              //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        AvoidGuttersAssistPercent[0x3];                          //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        float                                                        SplineAssistPercent[0x3];                                //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        bool                                                         EnableClientAuthority;                                   //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0000[0xE3];                                  //  MISSED OFFSET (PADDING)
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
