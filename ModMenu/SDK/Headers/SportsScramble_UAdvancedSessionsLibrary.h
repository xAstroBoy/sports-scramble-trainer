#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "SportsScramble_FBPUniqueNetId.h"
#include "BasicTypes_FString.h"
#include "SportsScramble_FSessionPropertyKeyPair.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_FSessionsSearchSetting.h"
#include "BasicTypes_FName.h"
#include "OnlineSubsystemUtils_FBlueprintSessionResult.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class APlayerState; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.AdvancedSessionsLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UAdvancedSessionsLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_UniqueNetIdToString(const SportsScramble::FBPUniqueNetId& UniqueNetId, BasicTypes::FString* String);
        void STATIC_SetPlayerName(Engine::APlayerController* PlayerController, const BasicTypes::FString& PlayerName);
        SportsScramble::FSessionsSearchSetting STATIC_MakeLiteralSessionSearchProperty(const SportsScramble::FSessionPropertyKeyPair& SessionSearchProperty, SportsScramble::EOnlineComparisonOpRedux ComparisonOp);
        SportsScramble::FSessionPropertyKeyPair STATIC_MakeLiteralSessionPropertyString(const BasicTypes::FName& Key, const BasicTypes::FString& Value);
        SportsScramble::FSessionPropertyKeyPair STATIC_MakeLiteralSessionPropertyInt(const BasicTypes::FName& Key, int32_t Value);
        SportsScramble::FSessionPropertyKeyPair STATIC_MakeLiteralSessionPropertyFloat(const BasicTypes::FName& Key, float Value);
        SportsScramble::FSessionPropertyKeyPair STATIC_MakeLiteralSessionPropertyByte(const BasicTypes::FName& Key, uint8_t Value);
        SportsScramble::FSessionPropertyKeyPair STATIC_MakeLiteralSessionPropertyBool(const BasicTypes::FName& Key, bool Value);
        bool STATIC_IsValidUniqueNetID(const SportsScramble::FBPUniqueNetId& UniqueNetId);
        bool STATIC_IsValidSession(const OnlineSubsystemUtils::FBlueprintSessionResult& SessionResult);
        void STATIC_IsPlayerInSession(const SportsScramble::FBPUniqueNetId& PlayerToCheck, bool* bIsInSession);
        bool STATIC_HasOnlineSubsystem(const BasicTypes::FName& SubSystemName);
        void STATIC_GetUniqueNetIDFromPlayerState(Engine::APlayerState* PlayerState, SportsScramble::FBPUniqueNetId* UniqueNetId);
        void STATIC_GetUniqueNetID(Engine::APlayerController* PlayerController, SportsScramble::FBPUniqueNetId* UniqueNetId);
        void STATIC_GetUniqueBuildID(const OnlineSubsystemUtils::FBlueprintSessionResult& SessionResult, int32_t* UniqueBuildId);
        void STATIC_GetSessionState(SportsScramble::EBPOnlineSessionState* SessionState);
        void STATIC_GetSessionSettings(int32_t* NumConnections, int32_t* NumPrivateConnections, bool* bIsLAN, bool* bIsDedicated, bool* bAllowInvites, bool* bAllowJoinInProgress, bool* bIsAnticheatEnabled, int32_t* BuildUniqueID, BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair>* ExtraSettings, SportsScramble::EBlueprintResultSwitch* Result);
        void STATIC_GetSessionPropertyString(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::ESessionSettingSearchResult* SearchResult, BasicTypes::FString* SettingValue);
        BasicTypes::FName STATIC_GetSessionPropertyKey(const SportsScramble::FSessionPropertyKeyPair& SessionProperty);
        void STATIC_GetSessionPropertyInt(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::ESessionSettingSearchResult* SearchResult, int32_t* SettingValue);
        void STATIC_GetSessionPropertyFloat(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::ESessionSettingSearchResult* SearchResult, float* SettingValue);
        void STATIC_GetSessionPropertyByte(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::ESessionSettingSearchResult* SearchResult, uint8_t* SettingValue);
        void STATIC_GetSessionPropertyBool(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::ESessionSettingSearchResult* SearchResult, bool* SettingValue);
        void STATIC_GetPlayerName(Engine::APlayerController* PlayerController, BasicTypes::FString* PlayerName);
        void STATIC_GetNumberOfNetworkPlayers(CoreUObject::UObject* WorldContextObject, int32_t* NumNetPlayers);
        void STATIC_GetNetPlayerIndex(Engine::APlayerController* PlayerController, int32_t* NetPlayerIndex);
        void STATIC_GetExtraSettings(const OnlineSubsystemUtils::FBlueprintSessionResult& SessionResult, BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair>* ExtraSettings);
        void STATIC_GetCurrentUniqueBuildID(int32_t* UniqueBuildId);
        void STATIC_FindSessionPropertyIndexByName(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingName, SportsScramble::EBlueprintResultSwitch* Result, int32_t* OutIndex);
        void STATIC_FindSessionPropertyByName(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair> ExtraSettings, const BasicTypes::FName& SettingsName, SportsScramble::EBlueprintResultSwitch* Result, SportsScramble::FSessionPropertyKeyPair* OutProperty);
        bool STATIC_EqualEqual_UNetIDUnetID(const SportsScramble::FBPUniqueNetId& A, const SportsScramble::FBPUniqueNetId& B);
        void STATIC_AddOrModifyExtraSettings(BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair>* SettingsArray, BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair>* NewOrChangedSettings, BasicTypes::TArray<SportsScramble::FSessionPropertyKeyPair>* ModifiedSettingsArray);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.AdvancedSessionsLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
