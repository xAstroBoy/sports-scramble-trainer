#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TArray.h"
#include "Engine_USplineComponent.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class ABowlingBallReturnSlot; };
namespace CG::SportsScramble { class ABowlingBall; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.BowlingBallReturnTrack
     * Size -> 0x0018 (FullSize[0x0660] - InheritedSize[0x0648])
     */
    class UBowlingBallReturnTrack : public Engine::USplineComponent
    {
    public:
        BasicTypes::TArray<SportsScramble::ABowlingBallReturnSlot*>  mSlots;                                                  //  ZeroConstructor, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (PADDING)

    public:
        void SetupSlot(SportsScramble::ABowlingBall* Ball, SportsScramble::ABowlingBallReturnSlot* SlotClass);
        bool HasBall(SportsScramble::ABowlingBall* Ball);
        int32_t GetNumOccupiedSlots();
        void FreeLastSlot(const CoreUObject::FVector& disposalPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.BowlingBallReturnTrack");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
