#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "SportsScramble_UScramSceneComponent.h"
#include "SportsScramble_FAvatarLook.h"
#include "SportsScramble_FTennisBallNetworkUpdate.h"
#include "SportsScramble_FScramTrajectory.h"
#include "SportsScramble_FDodgeballShot.h"
#include "SportsScramble_FBowlingThrow.h"
#include "SportsScramble_FBaseballNetworkUpdate.h"
#include "SportsScramble_FScramPlayerPreferences.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_FFutureBallHit.h"
#include "CoreUObject_FTransform.h"
#include "Engine_FVector_NetQuantize10.h"
#include "CoreUObject_FColor.h"
#include "CoreUObject_FVector.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::SportsScramble { class AScramPlayer; };
namespace CG::SportsScramble { class ATennisBall; };
namespace CG::SportsScramble { class ABaseballThrowingGlove; };
namespace CG::SportsScramble { class ADodgeballBall; };
namespace CG::SportsScramble { class ABowlingBall; };
namespace CG::SportsScramble { class ABaseballBall; };
namespace CG::SportsScramble { class AScramPrimitiveActor; };
namespace CG::SportsScramble { class AScramSportManagerBase; };
namespace CG::SportsScramble { class ABaseballMitt; };
namespace CG::SportsScramble { class AScramPlayerServeTrigger; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::Engine { class AActor; };
namespace CG::SportsScramble { class AScramHandshakeActor; };
namespace CG::CoreUObject { class UObject; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramNetworkHelperComponent
     * Size -> 0x0000 (FullSize[0x0240] - InheritedSize[0x0240])
     */
    class UScramNetworkHelperComponent : public SportsScramble::UScramSceneComponent
    {
    public:
        void STATIC_SetAvatarLook(SportsScramble::AScramPlayer* pPlayer, const SportsScramble::FAvatarLook& AvatarLook);
        void Server_UpdateTennisBallTrajectory(SportsScramble::ATennisBall* pBall, const SportsScramble::FTennisBallNetworkUpdate& Update);
        void Server_UpdateStickDrivenCatcherGlove(SportsScramble::ABaseballThrowingGlove* pGlove, float leftRight, float upDown);
        void Server_UpdateDodgeballBallTrajectory(SportsScramble::ADodgeballBall* pBall, const SportsScramble::FScramTrajectory& trajectory, const SportsScramble::FDodgeballShot& newShot);
        void Server_UpdateBowlingBallTrajectory(SportsScramble::ABowlingBall* pBall, const SportsScramble::FScramTrajectory& trajectory, const SportsScramble::FBowlingThrow& newThrow);
        void Server_UpdateBaseballBallTrajectory(SportsScramble::ABaseballBall* pBall, const SportsScramble::FBaseballNetworkUpdate& Update);
        void Server_StartFollowingTrajectoryWithSlowDown(SportsScramble::AScramPrimitiveActor* pPrimitive, const SportsScramble::FScramTrajectory& trajectoryToFollow, float TimeScale, float Delay, float Duration, float maxStepDown);
        void Server_StartFollowingTrajectory(SportsScramble::AScramPrimitiveActor* pPrimitive, const SportsScramble::FScramTrajectory& trajectoryToFollow);
        void Server_SportManagerReady(SportsScramble::AScramSportManagerBase* pSportManager);
        void Server_SpawnPitcherScrambleOptions(SportsScramble::ABaseballMitt* pMitt);
        void Server_SetTennisBallRallyCount(SportsScramble::ATennisBall* pBall, int32_t rallyCount);
        void Server_SetPlayerPreferences(SportsScramble::AScramPlayer* pPlayer, const SportsScramble::FScramPlayerPreferences& preferences);
        void Server_SetPlayerPausedRemote(SportsScramble::AScramPlayer* pPlayer, SportsScramble::EGamePauseReason reason, bool paused);
        void Server_SetFutureBallHit(const SportsScramble::FFutureBallHit& FutureBallHit);
        void Server_SetAvatarLook(SportsScramble::AScramPlayer* pPlayer, const SportsScramble::FAvatarLook& AvatarLook);
        void Server_ServeTriggerSpawnBall(SportsScramble::AScramPlayerServeTrigger* pServeTrigger, SportsScramble::AScramBall* BallClass, const CoreUObject::FTransform& SpawnTransform);
        void Server_ServeBallSpawned(SportsScramble::AScramPlayerServeTrigger* pServeTrigger, SportsScramble::AScramBall* pBall);
        void Server_ServeBallGrabbed(SportsScramble::AScramPlayerServeTrigger* pServeTrigger, SportsScramble::AScramBall* pBall);
        void Server_SendPlayByPlayEvent(int32_t eventIndex, Engine::AActor* pPlayer);
        void Server_RequestAvatarLook(SportsScramble::AScramPlayer* pPlayer);
        void Server_RemoteGameDone(SportsScramble::AScramSportManagerBase* pSportManager);
        void Server_RemoteApplicationWillTerminate();
        void Server_RemoteApplicationWillEnterBackground();
        void Server_RemoteApplicationWillDeactivate();
        void Server_RemoteApplicationHasReactivated();
        void Server_RemoteApplicationHasEnteredForeground();
        void Server_ReceiveHeartbeat(uint16_t remotePendingNetGeneration, uint16_t remoteEstablishedNetGeneration);
        void Server_PingHandShake(float clientPingTime);
        void Server_MultiplayerGameResume(bool isCalledByHost, SportsScramble::EGamePauseReason reason);
        void Server_MultiplayerGamePause(bool isCalledByHost, SportsScramble::EGamePauseReason reason);
        void Server_HandshakeActorReady(SportsScramble::AScramHandshakeActor* pHandshakeActor);
        void Server_GrabberRelease(Engine::AActor* pGrabberActor);
        void Server_GrabberGrab(Engine::AActor* pGrabberActor, Engine::AActor* pGrabbableActor, bool snap);
        void Server_DrawDebugSphere(Engine::AActor* pWorldContextObject, const Engine::FVector_NetQuantize10& Center, float Radius, int32_t Segments, const CoreUObject::FColor& Color, float LifeTime);
        void Server_DestroyPrimitive(SportsScramble::AScramPrimitiveActor* pPrimitive, bool playOut, float Delay);
        void Server_ClearTennisBallTrajectoryOwnership(SportsScramble::ATennisBall* pBall);
        void Server_ClearPausedTrajectory(SportsScramble::AScramPrimitiveActor* pPrimitive);
        void Server_BroadcastScramEvent_Tennis(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::ETennisEvent TennisEvent);
        void Server_BroadcastScramEvent_Object(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, CoreUObject::UObject* pObjectParameter);
        void Server_BroadcastScramEvent_Null(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject);
        void Server_BroadcastScramEvent_Collision(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, Engine::AActor* pOtherActor, const CoreUObject::FVector& HitLocation, const CoreUObject::FVector& HitNormal);
        void Server_BroadcastScramEvent_Bowling(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::EBowlingEvent BowlingEvent, Engine::AActor* pBowlingBall);
        void Server_BroadcastScramEvent_Baseball(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::EBaseballEvent BaseballEvent, SportsScramble::ABaseballBall* pBall);
        void Server_BaseballCatcherCaught(Engine::AActor* pCatcher, SportsScramble::ABaseballBall* pBall);
        void Server_BaseballBallPitched(SportsScramble::ABaseballThrowingGlove* pGlove, SportsScramble::ABaseballBall* pBall, float ThrowSpeed);
        void Client_UpdateTennisBallTrajectory(SportsScramble::ATennisBall* pBall, const SportsScramble::FTennisBallNetworkUpdate& Update);
        void Client_UpdateStickDrivenCatcherGlove(SportsScramble::ABaseballThrowingGlove* pGlove, float leftRight, float upDown);
        void Client_UpdateBowlingBallTrajectory(SportsScramble::ABowlingBall* pBall, const SportsScramble::FScramTrajectory& trajectory, const SportsScramble::FBowlingThrow& newThrow);
        void Client_UpdateBaseballBallTrajectory(SportsScramble::ABaseballBall* pBall, const SportsScramble::FBaseballNetworkUpdate& Update);
        void Client_StartFollowingTrajectoryWithSlowDown(SportsScramble::AScramPrimitiveActor* pPrimitive, const SportsScramble::FScramTrajectory& trajectoryToFollow, float TimeScale, float Delay, float Duration, float maxStepDown);
        void Client_StartFollowingTrajectory(SportsScramble::AScramPrimitiveActor* pPrimitive, const SportsScramble::FScramTrajectory& trajectoryToFollow);
        void Client_SetTimeScale(SportsScramble::AScramPrimitiveActor* pPrimitive, float TimeScale);
        void Client_SetTennisBallRallyCount(SportsScramble::ATennisBall* pBall, int32_t rallyCount);
        void Client_SetPlayerPreferences(SportsScramble::AScramPlayer* pPlayer, const SportsScramble::FScramPlayerPreferences& preferences);
        void Client_SetPlayerPausedRemote(SportsScramble::AScramPlayer* pPlayer, SportsScramble::EGamePauseReason reason, bool paused);
        void Client_SetFutureBallHit(const SportsScramble::FFutureBallHit& FutureBallHit);
        void Client_SetAvatarLook(SportsScramble::AScramPlayer* pPlayer, const SportsScramble::FAvatarLook& AvatarLook);
        void Client_ServeBallSpawned(SportsScramble::AScramPlayerServeTrigger* pServeTrigger, SportsScramble::AScramBall* pBall);
        void Client_ServeBallGrabbed(SportsScramble::AScramPlayerServeTrigger* pServeTrigger, SportsScramble::AScramBall* pBall);
        void Client_RemoteGameDone(SportsScramble::AScramSportManagerBase* pSportManager);
        void Client_RemoteApplicationWillTerminate();
        void Client_RemoteApplicationWillEnterBackground();
        void Client_RemoteApplicationWillDeactivate();
        void Client_RemoteApplicationHasReactivated();
        void Client_RemoteApplicationHasEnteredForeground();
        void Client_ReceiveHeartbeat(uint16_t remotePendingNetGeneration, uint16_t remoteEstablishedNetGeneration);
        void Client_PingHandShake();
        void Client_GrabberRelease(Engine::AActor* pGrabberActor);
        void Client_GrabberGrab(Engine::AActor* pGrabberActor, Engine::AActor* pGrabbableActor, bool snap);
        void Client_DrawDebugSphere(Engine::AActor* pWorldContextObject, const Engine::FVector_NetQuantize10& Center, float Radius, int32_t Segments, const CoreUObject::FColor& Color, float LifeTime);
        void Client_DestroyPrimitive(SportsScramble::AScramPrimitiveActor* pPrimitive, bool playOut, float Delay);
        void Client_ClearTennisBallTrajectoryOwnership(SportsScramble::ATennisBall* pBall);
        void Client_ClearPausedTrajectory(SportsScramble::AScramPrimitiveActor* pPrimitive);
        void Client_BroadcastScramEvent_Tennis(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::ETennisEvent TennisEvent);
        void Client_BroadcastScramEvent_Object(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, CoreUObject::UObject* pObjectParameter);
        void Client_BroadcastScramEvent_Null(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject);
        void Client_BroadcastScramEvent_Collision(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, Engine::AActor* pOtherActor, const CoreUObject::FVector& HitLocation, const CoreUObject::FVector& HitNormal);
        void Client_BroadcastScramEvent_Bowling(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::EBowlingEvent BowlingEvent, Engine::AActor* pBowlingBall);
        void Client_BroadcastScramEvent_Baseball(SportsScramble::EScramEvent ScramEvent, Engine::AActor* pWorldContextObject, int32_t PlayerIndex, SportsScramble::EBaseballEvent BaseballEvent, SportsScramble::ABaseballBall* pBall);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramNetworkHelperComponent");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
