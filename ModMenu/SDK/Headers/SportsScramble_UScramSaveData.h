#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_TMap.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FDateTime.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_FScramSettings.h"
#include "SportsScramble_FScramPlayerPreferences.h"
#include "BasicTypes_FString.h"
#include "Engine_USaveGame.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramSaveData
     * Size -> 0x0168 (FullSize[0x0190] - InheritedSize[0x0028])
     */
    class UScramSaveData : public Engine::USaveGame
    {
    public:
        BasicTypes::TMap<BasicTypes::FName, CoreUObject::FDateTime>  TrophyCompletion;                                        //  Edit, ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TMap<BasicTypes::FName, SportsScramble::ETrainingProgression> TrainingProgress;                                        //  Edit, ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TMap<BasicTypes::FName, float>                   HighScores;                                              //  Edit, ZeroConstructor, NativeAccessSpecifierPublic
        BasicTypes::TMap<BasicTypes::FName, int32_t>                 NamedValues;                                             //  Edit, ZeroConstructor, NativeAccessSpecifierPublic
        bool                                                         TutorialCompleted;                                       //  Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        SportsScramble::FScramSettings                               UserSettings;                                            //  Edit, NoDestructor, NativeAccessSpecifierPublic
        SportsScramble::FScramPlayerPreferences                      PlayerPreferences;                                       //  Edit, NoDestructor, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::FString                                          mSlotName;                                               //  Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      mUserIndex;                                              //  Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (PADDING)

    public:
        void WipeSaveData();
        void WipeHighScoreData();
        void UnlockTraining(const BasicTypes::FName& TrainingName);
        void SaveNamedValue(const BasicTypes::FName& Name, int32_t Value);
        void SaveHighScore(const BasicTypes::FName& GameName, float score);
        SportsScramble::ETrainingProgression GetTrainingProgression(const BasicTypes::FName& TrainingName);
        int32_t GetNamedValue(const BasicTypes::FName& Name);
        float GetHighScore(const BasicTypes::FName& GameName);
        void CompleteTraining(const BasicTypes::FName& TrainingName);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramSaveData");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
