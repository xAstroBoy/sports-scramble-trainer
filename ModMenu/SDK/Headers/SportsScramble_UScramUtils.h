#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "BasicTypes_FString.h"
#include "BasicTypes_FName.h"
#include "CoreUObject_FLinearColor.h"
#include "SportsScramble_ENUMS.h"
#include "SportsScramble_FScramSportPreferences.h"
#include "CoreUObject_FVector.h"
#include "CoreUObject_FRotator.h"
#include "CoreUObject_FTransform.h"
#include "OnlineSubsystemUtils_FBlueprintSessionResult.h"
#include "BasicTypes_FText.h"
#include "BasicTypes_TArray.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class UStaticMeshComponent; };
namespace CG::Engine { class UTexture2D; };
namespace CG::Engine { class AActor; };
namespace CG::Engine { class USplineComponent; };
namespace CG::SportsScramble { class AScramPrimitiveActor; };
namespace CG::SportsScramble { class ATennisInstrument; };
namespace CG::SportsScramble { class ATennisBall; };
namespace CG::SportsScramble { class AScramPlayer; };
namespace CG::SportsScramble { class AScramGameMode; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::SportsScramble
{
    /**
     * Class /Script/SportsScramble.ScramUtils
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UScramUtils : public Engine::UBlueprintFunctionLibrary
    {
    public:
        void STATIC_ShowDebugMessage(CoreUObject::UObject* WorldContextObject, const BasicTypes::FString& Message, float LifeTime);
        void STATIC_SetShaderCacheModeFast();
        void STATIC_SetShaderCacheModeBackground();
        void STATIC_SetOnlineSessionCustomSetting(CoreUObject::UObject* WorldContextObject, const BasicTypes::FName& SettingName, int32_t SettingValue);
        void STATIC_SetInstancedVisibility(Engine::UStaticMeshComponent* Target, bool Visibility);
        void STATIC_SampleTexture(Engine::UTexture2D* Texture, float U, float V, CoreUObject::FLinearColor* pixelColor, SportsScramble::ESuccessFailure* Branch);
        SportsScramble::EScramSport STATIC_RandomSharedSport(const SportsScramble::FScramSportPreferences& A, const SportsScramble::FScramSportPreferences& B);
        CoreUObject::FVector STATIC_PickDestinationPointOnSpline(Engine::AActor* SplineFollower, Engine::USplineComponent* Spline, float LookAheadDistance);
        void STATIC_PauseShaderCacheCompilation();
        void STATIC_MakeActorsFaceLocation(CoreUObject::UObject* WorldContextObject, Engine::AActor* subClass, const CoreUObject::FVector& Location);
        void STATIC_LaunchOtherApp(const BasicTypes::FString& appID);
        void STATIC_IsShipping(SportsScramble::EYesNo* Branch);
        bool STATIC_IsShaderCacheReady();
        bool STATIC_IsHitFloor(SportsScramble::AScramPrimitiveActor* Primitive, const CoreUObject::FVector& HitLocation);
        bool STATIC_IsHitEnvironmental(Engine::AActor* hitActor);
        bool STATIC_IsChargeShotPossible(SportsScramble::ATennisInstrument* Instrument, SportsScramble::ATennisBall* Ball);
        bool STATIC_HasBinaryShaderCache();
        void STATIC_GoToStore(const BasicTypes::FString& uriPath);
        int32_t STATIC_GetSkipLogos();
        Engine::AActor* STATIC_GetSingleActorExec(CoreUObject::UObject* WorldContextObject, Engine::AActor* ActorClass);
        Engine::AActor* STATIC_GetSingleActor(CoreUObject::UObject* WorldContextObject, Engine::AActor* ActorClass);
        SportsScramble::AScramPlayer* STATIC_GetScramPlayer(CoreUObject::UObject* WorldContextObject);
        int32_t STATIC_GetScramNetworkVersion();
        SportsScramble::AScramGameMode* STATIC_GetScramGameMode(CoreUObject::UObject* WorldContextObject);
        SportsScramble::AScramPlayer* STATIC_GetRemoteScramPlayer(CoreUObject::UObject* WorldContextObject);
        CoreUObject::FTransform STATIC_GetPlayerTransform(CoreUObject::UObject* WorldContextObject, const CoreUObject::FVector& OffsetLocation, const CoreUObject::FRotator& OffsetRotation);
        int32_t STATIC_GetOnlineSessionCustomSetting(const OnlineSubsystemUtils::FBlueprintSessionResult& Result, const BasicTypes::FName& SettingName);
        int32_t STATIC_GetNumShaderCompilesRemaining();
        int32_t STATIC_GetNumberOfLines(const BasicTypes::FText& Text);
        int32_t STATIC_GetMatchmakingPool();
        SportsScramble::AScramPlayer* STATIC_GetLocalScramPlayer(CoreUObject::UObject* WorldContextObject);
        int32_t STATIC_GetLengthOfLongestLine(const BasicTypes::FText& Text);
        bool STATIC_GetIsShipping();
        bool STATIC_GetIsEditor();
        bool STATIC_GetIsAndroid();
        int32_t STATIC_GetEarlyAccess();
        int32_t STATIC_GetDemoMode();
        CoreUObject::UObject* STATIC_GetDefaultObject(CoreUObject::UObject* ObjectClass);
        int32_t STATIC_GetDebugMode();
        void STATIC_GetAttachedActorsExec(Engine::AActor* Actor, BasicTypes::TArray<Engine::AActor*>* OutActors);
        CoreUObject::FTransform STATIC_GetAppropriateTransform(Engine::AActor* Actor);
        void STATIC_ControllerIsConnected(SportsScramble::EYesNo* Branch);
        void STATIC_ClearDebugMessages(CoreUObject::UObject* WorldContextObject);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/SportsScramble.ScramUtils");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
