#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "UI_RoomDetailsData_FUI_RoomDetailsData.h"
#include "BasicTypes_TArray.h"
#include "TN_InstrumentTypes_FTN_InstrumentTypes.h"
#include "TN_BallTypes_FTN_BallTypes.h"
#include "TN_AnnouncerBallVO_FTN_AnnouncerBallVO.h"
#include "TN_AnnouncerInstrumentVO_FTN_AnnouncerInstrumentVO.h"
#include "GameResult_ENUMS.h"
#include "ChallengeBase_AChallengeBase_C.h"
#include "BasicTypes_FName.h"
#include "TN_ReturnWall_ScoreType_ENUMS.h"
#include "Engine_ENUMS.h"
#include "SportsScramble_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UAudioComponent; };
namespace CG::SportsScramble { class UActorSet; };
namespace CG::TN_GameSelector { class ATN_GameSelector_C; };
namespace CG::BallLauncher { class ABallLauncher_C; };
namespace CG::Travelcapsule { class ATravelcapsule_C; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class AActor; };
namespace CG::FloorLightUpGroup { class AFloorLightUpGroup_C; };
namespace CG::Engine { class USoundBase; };
namespace CG::ServeLocationIndicator { class AServeLocationIndicator_C; };
namespace CG::ServeLauncher { class AServeLauncher_C; };
namespace CG::TN_TRN_CHG_TargetWall { class ATN_TRN_CHG_TargetWall_C; };
namespace CG::BallTarget_NW { class ABallTarget_NW_C; };
namespace CG::TennisTrainingScrambleTargetGroup { class ATennisTrainingScrambleTargetGroup_C; };
namespace CG::TN_Ball_Base { class ATN_Ball_Base_C; };
namespace CG::TN_Instrument_Base { class ATN_Instrument_Base_C; };
namespace CG::SportsScramble { class AScramBall; };
namespace CG::TN_MiniGameScoreboard { class ATN_MiniGameScoreboard_C; };
namespace CG::TennisNet_BP { class ATennisNet_BP_C; };
namespace CG::TN_ReturnWall { class ATN_ReturnWall_C; };
namespace CG::ScramSportManagerTennis_Blueprint { class AScramSportManagerTennis_Blueprint_C; };
namespace CG::Challenge_ScramSportManager_TN { class AChallenge_ScramSportManager_TN_C; };
namespace CG::TennisArenaScoreboard { class ATennisArenaScoreboard_C; };
namespace CG::SportsScramble { class AScramTennisAI; };
namespace CG::ScrambleEvent_Base { class AScrambleEvent_Base_C; };
namespace CG::SportsScramble { class UScramEventBasePayload; };
namespace CG::TennisScrambleTarget { class ATennisScrambleTarget_C; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TN_Challenge_Base
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Challenges/Tennis/TN_Challenge_Base.TN_Challenge_Base_C
     * Size -> 0x0232 (FullSize[0x06CA] - InheritedSize[0x0498])
     */
    class ATN_Challenge_Base_C : public ChallengeBase::AChallengeBase_C
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::UAudioComponent*                                     Audio_JustCountdown;                                     //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_And_VO;                                            //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        Engine::UAudioComponent*                                     Audio_MiniGameIntroMusic;                                //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        SportsScramble::UActorSet*                                   ActorSet_Instruments;                                    //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        SportsScramble::UActorSet*                                   ActorSet_Balls;                                          //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        TN_GameSelector::ATN_GameSelector_C*                         GameSelector;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BallLauncher::ABallLauncher_C*                               LauncherLeft;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        UI_RoomDetailsData::FUI_RoomDetailsData                      LevelData;                                               //  Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash
        Travelcapsule::ATravelcapsule_C*                             TravelCapsule;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         LevelWon;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        ScramGameInstance::UScramGameInstance_C*                     GameInstance_0_1;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        CoreUObject::UObject*                                        ResultsMenu;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BallLauncher::ABallLauncher_C*                               LauncherRight;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<Engine::AActor*>                          ActivePayloads;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        FloorLightUpGroup::AFloorLightUpGroup_C*                     LightUpGroup;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Bounces;                                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        uint8_t                                                      UnknownData_0001[0x4];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::USoundBase*                                          SFX_StartOfMatchMusic_1;                                 //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          SFX_BallGoodSound;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::USoundBase*                                          SFX_BallBadSound;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         LevelCompleted;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BallLauncher::ABallLauncher_C*                               LauncherCenter;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ServeLocationIndicator::AServeLocationIndicator_C*           ServeLocationIndicator;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ServeLauncher::AServeLauncher_C*                             ServeLauncher;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        TN_TRN_CHG_TargetWall::ATN_TRN_CHG_TargetWall_C*             GameWall;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<BallTarget_NW::ABallTarget_NW_C*>         AllWhackTargets;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        BasicTypes::TArray<BallTarget_NW::ABallTarget_NW_C*>         DisabledWhackTargets;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        bool                                                         BindToBallSpawned;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        TennisTrainingScrambleTargetGroup::ATennisTrainingScrambleTargetGroup_C* TennisTargetGroup;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<TN_Ball_Base::ATN_Ball_Base_C*>           ValidBallClassList;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        TN_Instrument_Base::ATN_Instrument_Base_C*                   AnnouncerSelected_InstrumentClass;                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        SportsScramble::AScramBall*                                  BallClass;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Engine::AActor*                                              StreakActor;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      Streak;                                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      TargetHitReward;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      BullseyeHitReward;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      MiddleHitReward;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<TN_Ball_Base::ATN_Ball_Base_C*>           DisabledBallClassList;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        TN_MiniGameScoreboard::ATN_MiniGameScoreboard_C*             TN_MiniGameScoreboard;                                   //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         Pass_N_Play;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0004[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<TN_InstrumentTypes::FTN_InstrumentTypes>  InstrumentList;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<TN_BallTypes::FTN_BallTypes>              BallList;                                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        TennisNet_BP::ATennisNet_BP_C*                               TennisNet;                                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<TN_AnnouncerBallVO::FTN_AnnouncerBallVO>  BallVOList;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<TN_AnnouncerInstrumentVO::FTN_AnnouncerInstrumentVO> InstrumentVOList;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        TN_ReturnWall::ATN_ReturnWall_C*                             ReturnWall;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        ScramSportManagerTennis_Blueprint::AScramSportManagerTennis_Blueprint_C* TN_SportManager;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        FloorLightUpGroup::AFloorLightUpGroup_C*                     FloorLightUpGroup;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        Challenge_ScramSportManager_TN::AChallenge_ScramSportManager_TN_C* TN_ChallengeSportMgr;                                    //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<TennisArenaScoreboard::ATennisArenaScoreboard_C*> ArenaScoreboards;                                        //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        bool                                                         WhackGridGame;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        GameResult::EGameResult                                      ChallengeResult;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void AddActorToGameElementList(Engine::AActor* Actor, bool* Callback);
        void ShutDown(bool* ShutdownBegun);
        void TN_CHG_UnbindEvent();
        void TN_CHG_ShowAllWhackTargets();
        void TN_CHG_ResetArenaScoreboards();
        void TN_CHG_UpdateArenaScoreboards(int32_t Player1Score, int32_t Player2Score, int32_t Player1Games, int32_t Player2Games, bool Player1Serve, bool Player2Serve, bool UpdateScoreOnly);
        void TN_CHG_GetArenaScoreboards();
        void TN_CHG_SpawnChallengeSportManager(Challenge_ScramSportManager_TN::AChallenge_ScramSportManager_TN_C** ChallengeSportMgr);
        void TN_CHG_CalculateEndTennisMatch(GameResult::EGameResult Result);
        void TN_CHG_SpawnFloorLightUpGroup(bool Player2, bool OutOnly, bool InOnly, bool Demo);
        void TN_CHG_SpawnSportManager(bool UseScrambler, bool UseStartOfMatchInfoPanels, const BasicTypes::FName& ScrambleSchedule);
        void TN_CHG_SpawnAIOpponent(Engine::AActor* AIActorClass, SportsScramble::AScramTennisAI** ScramTennisAI);
        void TN_CHG_SpawnReturnWallAndLauncher(TN_ReturnWall_ScoreType::ETN_ReturnWall_ScoreType ReurnWallType);
        void TN_CHG_SwapInstrumentIcon(TN_Instrument_Base::ATN_Instrument_Base_C* InstrumentClass);
        void TN_CHG_SwapBallIcon(TN_Ball_Base::ATN_Ball_Base_C* BallClass, bool AnnounceBall);
        void Get_TN_CHG_BallList();
        void Get_TN_CHG_InstrumentList();
        void RefreshActivePayloads();
        void IsStreakContinued(Engine::AActor* PayloadActor, bool* StreakContinues);
        void UpdateScore(int32_t NewScore);
        void TN_CHG_CalculateEndScore(bool Countdown, int32_t CurrentScore, int32_t TargetScore);
        void TN_CHG_ScrambleTargetBallHit(float HitLocationX, float HitLocationY);
        void PBP_ScrambleTargetHit(ScrambleEvent_Base::AScrambleEvent_Base_C* EventClass);
        void ProcessLightNormalShot();
        void ProcessChargeShot();
        void TN_ScrambleTargetInstrumentChangeMissed();
        void TN_TRN_InstrumentHit();
        void DestroyAllBalls_1();
        void ProcessSliceShot();
        void PickNew_CHG_WhackTarget(Engine::AActor* OldTarget);
        void Spawn_CHG_WhackTargets(bool LowerOnGameEnd);
        void SpawnServeLauncher(bool TeeBall, bool MoveSpawnedBalls);
        void SpawnCenterLaucher(float InitialHeight);
        void TN_LaunchedBallMissed();
        void TN_LaunchedBallHit(float HitLocationX, float HitLocationY);
        void SpawnFloorLightUp(bool OutOnly, bool InOnly, bool BothInOut);
        void SpawnLeftRightLauchers(bool SpawnLeftLauncher, bool SpawnRightLauncher);
        void BallAccuracySound(bool In);
        void CheckInBounds(float XLocation, float YLocation, bool PlaySound, bool* InBounds);
        void InitializeBase();
        void UserConstructionScript();
        void SportManager_MatchComplete(GameResult::EGameResult Result);
        void ReturnWallLauncherBall(Engine::AActor* NewBallActor);
        void ReturnWallHit(int32_t Streak);
        void ReceiveBeginPlay();
        void ReceiveEndPlay(Engine::EEndPlayReason EndPlayReason);
        void NewLauncherBall(Engine::AActor* NewBallActor);
        void BallHasBeenHit(CoreUObject::UObject* WorldContextObject, SportsScramble::UScramEventBasePayload* Payload);
        void TN_TNG_BallSpawned(SportsScramble::AScramBall* Ball);
        void TN_TNG_BallHit(SportsScramble::AScramBall* Ball);
        void TN_CHG_WallTargetHit(Engine::AActor* PayloadActor, Engine::AActor* BallTargetActor, int32_t RegionHit);
        void TN_TNG_BallGrabbed(SportsScramble::AScramBall* Ball);
        void BallShotTypeChange(SportsScramble::ETennisShotType ShotType);
        void TN_TNG_ScrambleTargetHit(TennisScrambleTarget::ATennisScrambleTarget_C* TargetActor, ScrambleEvent_Base::AScrambleEvent_Base_C* EventClass, int32_t TargetID);
        void ChangeBallClass(SportsScramble::AScramBall* BallClass);
        void EndOfGame();
        void TN_CHG_TimerExpired();
        void TN_CHG_TimerTriggered(int32_t CurrentTime);
        void TN_CHG_WallTargetShrinking(Engine::AActor* TargetActor);
        void TN_TriggerCountdown();
        void TN_StartIntroCadence(bool UseChallengeMusic, bool UseCountdown, bool UseThreeCategory);
        void TN_ShowInstrumentAndBallIcons(bool InstrumentBothHands);
        void TriggerAlternativeCadence();
        void TN_AnnouncerShowInstrumentIcon(TN_Ball_Base::ATN_Ball_Base_C* OptionalBallClass, bool AnnounceBall);
        void TN_AnnouncerPresentation(bool InstrumentBothHands);
        void TN_AnnouncerAcceleratorChallenge();
        void ExecuteUbergraph_TN_Challenge_Base(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Challenges/Tennis/TN_Challenge_Base.TN_Challenge_Base_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
