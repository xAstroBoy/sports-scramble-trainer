#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_FPointerToUberGraphFrame.h"
#include "BasicTypes_TArray.h"
#include "ScramblerTargetSet_FScramblerTargetSet.h"
#include "BasicTypes_FName.h"
#include "Engine_AActor.h"
#include "Engine_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class USceneComponent; };
namespace CG::ScrambleEvent_Base { class AScrambleEvent_Base_C; };
namespace CG::TennisScrambleTarget { class ATennisScrambleTarget_C; };
namespace CG::ScramSportManagerTennis_Blueprint { class AScramSportManagerTennis_Blueprint_C; };
namespace CG::TennisScrambleTargetGroup_NetNotifier { class ATennisScrambleTargetGroup_NetNotifier_C; };
namespace CG::TN_Instrument_Base { class ATN_Instrument_Base_C; };
namespace CG::TN_Ball_Base { class ATN_Ball_Base_C; };
namespace CG::CoreUObject { class UClass; };
namespace CG::ScramGameInstance { class UScramGameInstance_C; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TennisScrambleTargetGroup
{
    /**
     * BlueprintGeneratedClass /Game/Blueprints/Scrambles/Tennis/TennisScrambleTargetGroup.TennisScrambleTargetGroup_C
     * Size -> 0x0170 (FullSize[0x0498] - InheritedSize[0x0328])
     */
    class ATennisScrambleTargetGroup_C : public Engine::AActor
    {
    public:
        Engine::FPointerToUberGraphFrame                             UberGraphFrame;                                          //  ZeroConstructor, Transient, DuplicateTransient
        Engine::USceneComponent*                                     Scene;                                                   //  BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<ScrambleEvent_Base::AScrambleEvent_Base_C*> ScrambleClasses;                                         //  Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn
        int32_t                                                      MaxActiveTargets;                                        //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        float                                                        InitialDelay;                                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        int32_t                                                      InitialTargetCount;                                      //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        float                                                        RespawnDelay;                                            //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        BasicTypes::TArray<int32_t>                                  ValidSpawnLocations;                                     //  Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn
        bool                                                         InstrumentHitBallsOnly;                                  //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        bool                                                         DelayActive;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0000[0x6];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<int32_t>                                  InitialValidSpawnLocations;                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<ScrambleEvent_Base::AScrambleEvent_Base_C*> DisabledClasses;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<ScramblerTargetSet::FScramblerTargetSet>  OptionalScrambleSet;                                     //  Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn
        BasicTypes::TArray<TennisScrambleTarget::ATennisScrambleTarget_C*> ActiveTargets;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance
        ScramSportManagerTennis_Blueprint::AScramSportManagerTennis_Blueprint_C* TennisManager;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         TennisGameManaged;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        bool                                                         ManagedGamePaused;                                       //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0001[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        float                                                        ReinforcementDelay;                                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::FName                                            TennisScramblerSchedule;                                 //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash
        BasicTypes::TArray<int32_t>                                  ValidSpawnLocations_Initial;                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<int32_t>                                  ValidSpawnLocations_Reinforcements;                      //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<ScramblerTargetSet::FScramblerTargetSet>  ScrambleSet_Initial;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<ScramblerTargetSet::FScramblerTargetSet>  ScrambleSet_Reinforcements;                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        int32_t                                                      SpawnCountMax;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      SpawnCountMin;                                           //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<int32_t>                                  ValidSpawnLocations_Default;                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        float                                                        GroupSpawnDelay;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        int32_t                                                      SpawnCount;                                              //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        bool                                                         PointCompleted;                                          //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor
        uint8_t                                                      UnknownData_0002[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        TennisScrambleTargetGroup_NetNotifier::ATennisScrambleTargetGroup_NetNotifier_C* NetNotifier;                                             //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        TennisScrambleTargetGroup_NetNotifier::ATennisScrambleTargetGroup_NetNotifier_C* NetNotifier_Pos;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        TennisScrambleTargetGroup_NetNotifier::ATennisScrambleTargetGroup_NetNotifier_C* NetNotifier_Neg;                                         //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash
        BasicTypes::TArray<int32_t>                                  DisabledSpawnLocations;                                  //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        bool                                                         ForceEvenDistribution;                                   //  Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn
        uint8_t                                                      UnknownData_0003[0x7];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        BasicTypes::TArray<TN_Instrument_Base::ATN_Instrument_Base_C*> InstrumentDistibutionList;                               //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<TN_Ball_Base::ATN_Ball_Base_C*>           BallDistibutionList;                                     //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        BasicTypes::TArray<Engine::AActor*>                          DisabledClasses_PerPoint;                                //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance
        ScramGameInstance::UScramGameInstance_C*                     GameInstance;                                            //  Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash

    public:
        void RemoveGameElement(bool* Removed);
        void FilterScrambleSet(BasicTypes::TArray<ScramblerTargetSet::FScramblerTargetSet>* ScramblerTargetSet, BasicTypes::TArray<ScramblerTargetSet::FScramblerTargetSet>* FilteredTargetSet);
        void SpecificBallActivated(TN_Ball_Base::ATN_Ball_Base_C* BallClass);
        void GetValidSpecificBalls(BasicTypes::TArray<TN_Ball_Base::ATN_Ball_Base_C*>* BallDistibutionList);
        void SpecificInstrumentActivated(TN_Instrument_Base::ATN_Instrument_Base_C* InstrumentClass);
        void GetValidSpecificInstruments(BasicTypes::TArray<TN_Instrument_Base::ATN_Instrument_Base_C*>* ValidInstruments);
        void RemoveAllNetNotifiers();
        void SetSpawnLocsForReinforcements();
        void UpdateTennisManagerVars(int32_t Game, int32_t Point);
        void RemoveAllTargets();
        void GetActiveTargetsByClass(ScrambleEvent_Base::AScrambleEvent_Base_C* ScrambleEventClass, int32_t* Count);
        void GetWeightedClassList(BasicTypes::TArray<ScrambleEvent_Base::AScrambleEvent_Base_C*>* WeightedList);
        void DisableScrambleEventType(ScrambleEvent_Base::AScrambleEvent_Base_C* EventClass);
        void RemoveDisabledSpawnLocations(BasicTypes::TArray<int32_t>* ValidSpawnLocations);
        void DisableSpawnLocations(BasicTypes::TArray<int32_t>* DisabledLocations);
        void SpawnInitial();
        void SpawnRandom();
        void SpawnTarget(int32_t Location, ScrambleEvent_Base::AScrambleEvent_Base_C* ScrambleClass);
        void Initialize();
        void UserConstructionScript();
        void ReceiveBeginPlay();
        void RespawnLoop();
        void TargetDespawned();
        void ScrambleTargetRemoved(TennisScrambleTarget::ATennisScrambleTarget_C* TargetActor, ScrambleEvent_Base::AScrambleEvent_Base_C* ScrambleEvent, int32_t ID);
        void NewServiceReady(int32_t Game, int32_t Point, bool Player1Serve);
        void PointComplete();
        void InPlay();
        void GroupSpawn(int32_t Count);
        void GroupSpawnLoop();
        void DelayDestroy();
        void TargetHit(TennisScrambleTarget::ATennisScrambleTarget_C* TargetActor, ScrambleEvent_Base::AScrambleEvent_Base_C* ScrambleEvent, int32_t ID);
        void StopTimer();
        void QueueReinforcements();
        void BallCrossedNet();
        void SpawnQueuedTargets();
        void ReceiveEndPlay(Engine::EEndPlayReason EndPlayReason);
        void ExecuteUbergraph_TennisScrambleTargetGroup(int32_t EntryPoint);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("BlueprintGeneratedClass /Game/Blueprints/Scrambles/Tennis/TennisScrambleTargetGroup.TennisScrambleTargetGroup_C");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
