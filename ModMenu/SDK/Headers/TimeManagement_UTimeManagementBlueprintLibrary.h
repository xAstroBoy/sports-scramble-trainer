#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "CoreUObject_FFrameTime.h"
#include "CoreUObject_FFrameRate.h"
#include "CoreUObject_FFrameNumber.h"
#include "CoreUObject_FTimecode.h"
#include "BasicTypes_FString.h"
#include "CoreUObject_FQualifiedFrameTime.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::TimeManagement
{
    /**
     * Class /Script/TimeManagement.TimeManagementBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UTimeManagementBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        CoreUObject::FFrameTime STATIC_TransformTime(const CoreUObject::FFrameTime& SourceTime, const CoreUObject::FFrameRate& SourceRate, const CoreUObject::FFrameRate& DestinationRate);
        CoreUObject::FFrameNumber STATIC_Subtract_FrameNumberInteger(const CoreUObject::FFrameNumber& A, int32_t B);
        CoreUObject::FFrameNumber STATIC_Subtract_FrameNumberFrameNumber(const CoreUObject::FFrameNumber& A, const CoreUObject::FFrameNumber& B);
        CoreUObject::FFrameTime STATIC_SnapFrameTimeToRate(const CoreUObject::FFrameTime& SourceTime, const CoreUObject::FFrameRate& SourceRate, const CoreUObject::FFrameRate& SnapToRate);
        CoreUObject::FFrameTime STATIC_Multiply_SecondsFrameRate(float TimeInSeconds, const CoreUObject::FFrameRate& FrameRate);
        CoreUObject::FFrameNumber STATIC_Multiply_FrameNumberInteger(const CoreUObject::FFrameNumber& A, int32_t B);
        bool STATIC_IsValid_MultipleOf(const CoreUObject::FFrameRate& InFrameRate, const CoreUObject::FFrameRate& OtherFramerate);
        bool STATIC_IsValid_Framerate(const CoreUObject::FFrameRate& InFrameRate);
        CoreUObject::FTimecode STATIC_GetTimecode();
        CoreUObject::FFrameNumber STATIC_Divide_FrameNumberInteger(const CoreUObject::FFrameNumber& A, int32_t B);
        BasicTypes::FString STATIC_Conv_TimecodeToString(const CoreUObject::FTimecode& InTimecode, bool bForceSignDisplay);
        float STATIC_Conv_QualifiedFrameTimeToSeconds(const CoreUObject::FQualifiedFrameTime& InFrameTime);
        float STATIC_Conv_FrameRateToSeconds(const CoreUObject::FFrameRate& InFrameRate);
        int32_t STATIC_Conv_FrameNumberToInteger(const CoreUObject::FFrameNumber& InFrameNumber);
        CoreUObject::FFrameNumber STATIC_Add_FrameNumberInteger(const CoreUObject::FFrameNumber& A, int32_t B);
        CoreUObject::FFrameNumber STATIC_Add_FrameNumberFrameNumber(const CoreUObject::FFrameNumber& A, const CoreUObject::FFrameNumber& B);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/TimeManagement.TimeManagementBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
