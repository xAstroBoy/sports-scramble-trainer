#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FText.h"
#include "BasicTypes_UScriptDelegate.h"
#include "SlateCore_FSlateColor.h"
#include "SlateCore_FSlateFontInfo.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_FLinearColor.h"
#include "UMG_UTextLayoutWidget.h"
#include "Slate_ENUMS.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.TextBlock
     * Size -> 0x00F8 (FullSize[0x0220] - InheritedSize[0x0128])
     */
    class UTextBlock : public UMG::UTextLayoutWidget
    {
    public:
        BasicTypes::FText                                            Text;                                                    //  Edit, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  TextDelegate;                                            //  ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
        SlateCore::FSlateColor                                       ColorAndOpacity;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  ColorAndOpacityDelegate;                                 //  ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
        SlateCore::FSlateFontInfo                                    Font;                                                    //  Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FVector2D                                       ShadowOffset;                                            //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        CoreUObject::FLinearColor                                    ShadowColorAndOpacity;                                   //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  ShadowColorAndOpacityDelegate;                           //  ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
        float                                                        MinDesiredWidth;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bWrapWithInvalidationPanel;                              //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bAutoWrapText;                                           //  ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        uint8_t                                                      UnknownData_0000[0x12];                                  //  MISSED OFFSET (PADDING)

    public:
        void SetText(const BasicTypes::FText& InText);
        void SetShadowOffset(const CoreUObject::FVector2D& InShadowOffset);
        void SetShadowColorAndOpacity(const CoreUObject::FLinearColor& InShadowColorAndOpacity);
        void SetOpacity(float InOpacity);
        void SetMinDesiredWidth(float InMinDesiredWidth);
        void SetJustification(Slate::ETextJustify InJustification);
        void SetFont(const SlateCore::FSlateFontInfo& InFontInfo);
        void SetColorAndOpacity(const SlateCore::FSlateColor& InColorAndOpacity);
        void SetAutoWrapText(bool InAutoTextWrap);
        BasicTypes::FText GetText();
        Engine::UMaterialInstanceDynamic* GetDynamicOutlineMaterial();
        Engine::UMaterialInstanceDynamic* GetDynamicFontMaterial();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.TextBlock");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
