#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_UScriptDelegate.h"
#include "SlateCore_FSlateColor.h"
#include "SlateCore_FMargin.h"
#include "BasicTypes_TArray.h"
#include "UMG_FNamedSlotBinding.h"
#include "UMG_ENUMS.h"
#include "UMG_UWidget.h"
#include "SlateCore_FGeometry.h"
#include "BasicTypes_FName.h"
#include "Engine_ENUMS.h"
#include "CoreUObject_FVector2D.h"
#include "Slate_FAnchors.h"
#include "SlateCore_FPointerEvent.h"
#include "UMG_FEventReply.h"
#include "SlateCore_FFocusEvent.h"
#include "SlateCore_FKeyEvent.h"
#include "UMG_FPaintContext.h"
#include "SlateCore_FMotionEvent.h"
#include "SlateCore_FCharacterEvent.h"
#include "SlateCore_FAnalogInputEvent.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UUMGSequencePlayer; };
namespace CG::UMG { class UWidgetTree; };
namespace CG::Engine { class UInputComponent; };
namespace CG::UMG { class UWidgetAnimation; };
namespace CG::Engine { class APlayerController; };
namespace CG::Engine { class USoundBase; };
namespace CG::UMG { class UDragDropOperation; };
namespace CG::Engine { class APawn; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.UserWidget
     * Size -> 0x0108 (FullSize[0x0210] - InheritedSize[0x0108])
     */
    class UUserWidget : public UMG::UWidget
    {
    public:
        uint8_t                                                      UnknownData_0000[0x8];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        CoreUObject::FLinearColor                                    ColorAndOpacity;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  ColorAndOpacityDelegate;                                 //  ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
        SlateCore::FSlateColor                                       ForegroundColor;                                         //  Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic
        BasicTypes::UScriptDelegate                                  ForegroundColorDelegate;                                 //  ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic
        SlateCore::FMargin                                           Padding;                                                 //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic
        BasicTypes::TArray<UMG::UUMGSequencePlayer*>                 ActiveSequencePlayers;                                   //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        BasicTypes::TArray<UMG::UUMGSequencePlayer*>                 StoppedSequencePlayers;                                  //  ZeroConstructor, Transient, NativeAccessSpecifierPublic
        BasicTypes::TArray<UMG::FNamedSlotBinding>                   NamedSlotBindings;                                       //  ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate
        UMG::UWidgetTree*                                            WidgetTree;                                              //  ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic
        int32_t                                                      Priority;                                                //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bSupportsKeyboardFocus : 1;                              //  BIT_FIELD Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bIsFocusable : 1;                                        //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bStopAction : 1;                                         //  BIT_FIELD Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bHasScriptImplementedTick : 1;                           //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         bHasScriptImplementedPaint : 1;                          //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        bool                                                         UnknownData_0001 : 2;                                    //  BIT_FIELD (PADDING)
        bool                                                         bCookedWidgetTree : 1;                                   //  BIT_FIELD NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic
        UMG::EWidgetTickFrequency                                    TickFrequency;                                           //  Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate
        uint8_t                                                      UnknownData_0002[0x2];                                   //  MISSED OFFSET (FIX SPACE BETWEEN PREVIOUS PROPERTY)
        Engine::UInputComponent*                                     InputComponent;                                          //  ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected
        uint8_t                                                      UnknownData_0003[0x50];                                  //  MISSED OFFSET (PADDING)

    public:
        void UnregisterInputComponent();
        void Tick(const SlateCore::FGeometry& MyGeometry, float InDeltaTime);
        void StopListeningForInputAction(const BasicTypes::FName& ActionName, Engine::EInputEvent EventType);
        void StopListeningForAllInputActions();
        void StopAnimationsAndLatentActions();
        void StopAnimation(UMG::UWidgetAnimation* InAnimation);
        void StopAllAnimations();
        void SetPositionInViewport(const CoreUObject::FVector2D& Position, bool bRemoveDPIScale);
        void SetPlaybackSpeed(UMG::UWidgetAnimation* InAnimation, float PlaybackSpeed);
        void SetPadding(const SlateCore::FMargin& InPadding);
        void SetOwningPlayer(Engine::APlayerController* LocalPlayerController);
        void SetNumLoopsToPlay(UMG::UWidgetAnimation* InAnimation, int32_t NumLoopsToPlay);
        void SetInputActionPriority(int32_t NewPriority);
        void SetInputActionBlocking(bool bShouldBlock);
        void SetForegroundColor(const SlateCore::FSlateColor& InForegroundColor);
        void SetDesiredSizeInViewport(const CoreUObject::FVector2D& Size);
        void SetColorAndOpacity(const CoreUObject::FLinearColor& InColorAndOpacity);
        void SetAnchorsInViewport(const Slate::FAnchors& Anchors);
        void SetAlignmentInViewport(const CoreUObject::FVector2D& Alignment);
        void ReverseAnimation(UMG::UWidgetAnimation* InAnimation);
        void RemoveFromViewport();
        void RegisterInputComponent();
        void PreConstruct(bool IsDesignTime);
        void PlaySound(Engine::USoundBase* SoundToPlay);
        void PlayAnimationTo(UMG::UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, UMG::EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
        void PlayAnimation(UMG::UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, UMG::EUMGSequencePlayMode PlayMode, float PlaybackSpeed);
        float PauseAnimation(UMG::UWidgetAnimation* InAnimation);
        UMG::FEventReply OnTouchStarted(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& InTouchEvent);
        UMG::FEventReply OnTouchMoved(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& InTouchEvent);
        UMG::FEventReply OnTouchGesture(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& GestureEvent);
        UMG::FEventReply OnTouchForceChanged(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& InTouchEvent);
        UMG::FEventReply OnTouchEnded(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& InTouchEvent);
        void OnRemovedFromFocusPath(const SlateCore::FFocusEvent& InFocusEvent);
        UMG::FEventReply OnPreviewMouseButtonDown(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        UMG::FEventReply OnPreviewKeyDown(const SlateCore::FGeometry& MyGeometry, const SlateCore::FKeyEvent& InKeyEvent);
        void OnPaint(UMG::FPaintContext* Context);
        UMG::FEventReply OnMouseWheel(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        UMG::FEventReply OnMouseMove(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        void OnMouseLeave(const SlateCore::FPointerEvent& MouseEvent);
        void OnMouseEnter(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        void OnMouseCaptureLost();
        UMG::FEventReply OnMouseButtonUp(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        UMG::FEventReply OnMouseButtonDown(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& MouseEvent);
        UMG::FEventReply OnMouseButtonDoubleClick(const SlateCore::FGeometry& InMyGeometry, const SlateCore::FPointerEvent& InMouseEvent);
        UMG::FEventReply OnMotionDetected(const SlateCore::FGeometry& MyGeometry, const SlateCore::FMotionEvent& InMotionEvent);
        UMG::FEventReply OnKeyUp(const SlateCore::FGeometry& MyGeometry, const SlateCore::FKeyEvent& InKeyEvent);
        UMG::FEventReply OnKeyDown(const SlateCore::FGeometry& MyGeometry, const SlateCore::FKeyEvent& InKeyEvent);
        UMG::FEventReply OnKeyChar(const SlateCore::FGeometry& MyGeometry, const SlateCore::FCharacterEvent& InCharacterEvent);
        void OnInitialized();
        UMG::FEventReply OnFocusReceived(const SlateCore::FGeometry& MyGeometry, const SlateCore::FFocusEvent& InFocusEvent);
        void OnFocusLost(const SlateCore::FFocusEvent& InFocusEvent);
        bool OnDrop(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation* Operation);
        bool OnDragOver(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation* Operation);
        void OnDragLeave(const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation* Operation);
        void OnDragEnter(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation* Operation);
        void OnDragDetected(const SlateCore::FGeometry& MyGeometry, const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation** Operation);
        void OnDragCancelled(const SlateCore::FPointerEvent& PointerEvent, UMG::UDragDropOperation* Operation);
        void OnAnimationStarted(UMG::UWidgetAnimation* Animation);
        void OnAnimationFinished(UMG::UWidgetAnimation* Animation);
        UMG::FEventReply OnAnalogValueChanged(const SlateCore::FGeometry& MyGeometry, const SlateCore::FAnalogInputEvent& InAnalogInputEvent);
        void OnAddedToFocusPath(const SlateCore::FFocusEvent& InFocusEvent);
        void ListenForInputAction(const BasicTypes::FName& ActionName, Engine::EInputEvent EventType, bool bConsume, const BasicTypes::UScriptDelegate& Callback);
        bool IsPlayingAnimation();
        bool IsListeningForInputAction(const BasicTypes::FName& ActionName);
        bool IsInViewport();
        bool IsInteractable();
        bool IsAnyAnimationPlaying();
        bool IsAnimationPlayingForward(UMG::UWidgetAnimation* InAnimation);
        bool IsAnimationPlaying(UMG::UWidgetAnimation* InAnimation);
        Engine::APawn* GetOwningPlayerPawn();
        bool GetIsVisible();
        float GetAnimationCurrentTime(UMG::UWidgetAnimation* InAnimation);
        Slate::FAnchors GetAnchorsInViewport();
        CoreUObject::FVector2D GetAlignmentInViewport();
        void Destruct();
        void Construct();
        void CancelLatentActions();
        void AddToViewport(int32_t ZOrder);
        bool AddToPlayerScreen(int32_t ZOrder);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.UserWidget");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
