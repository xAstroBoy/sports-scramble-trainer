#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "Engine_UBlueprintFunctionLibrary.h"
#include "UMG_FEventReply.h"
#include "Engine_ENUMS.h"
#include "BasicTypes_UScriptDelegate.h"
#include "CoreUObject_FVector2D.h"
#include "CoreUObject_ENUMS.h"
#include "BasicTypes_FName.h"
#include "SlateCore_FSlateBrush.h"
#include "CoreUObject_FVector4.h"
#include "SlateCore_FAnalogInputEvent.h"
#include "SlateCore_FKeyEvent.h"
#include "SlateCore_FPointerEvent.h"
#include "SlateCore_FInputEvent.h"
#include "SlateCore_FNavigationEvent.h"
#include "SlateCore_FCharacterEvent.h"
#include "BasicTypes_TArray.h"
#include "UMG_FPaintContext.h"
#include "BasicTypes_FText.h"
#include "CoreUObject_FLinearColor.h"
#include "BasicTypes_FString.h"
#include "InputCore_FKey.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::UMG { class UWidget; };
namespace CG::Engine { class APlayerController; };
namespace CG::CoreUObject { class UObject; };
namespace CG::Engine { class UTexture2D; };
namespace CG::Engine { class UMaterialInterface; };
namespace CG::Engine { class USlateBrushAsset; };
namespace CG::Engine { class UMaterialInstanceDynamic; };
namespace CG::UMG { class UDragDropOperation; };
namespace CG::CoreUObject { class IInterface; };
namespace CG::UMG { class UUserWidget; };
namespace CG::Engine { class UFont; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::UMG
{
    /**
     * Class /Script/UMG.WidgetBlueprintLibrary
     * Size -> 0x0000 (FullSize[0x0028] - InheritedSize[0x0028])
     */
    class UWidgetBlueprintLibrary : public Engine::UBlueprintFunctionLibrary
    {
    public:
        UMG::FEventReply STATIC_UnlockMouse(UMG::FEventReply* Reply);
        UMG::FEventReply STATIC_Unhandled();
        void STATIC_SetWindowTitleBarState(UMG::UWidget* TitleBarContent, Engine::EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible);
        void STATIC_SetWindowTitleBarOnCloseClickedDelegate(const BasicTypes::UScriptDelegate& Delegate);
        void STATIC_SetWindowTitleBarCloseButtonActive(bool bActive);
        UMG::FEventReply STATIC_SetUserFocus(UMG::FEventReply* Reply, UMG::UWidget* FocusWidget, bool bInAllUsers);
        UMG::FEventReply STATIC_SetMousePosition(UMG::FEventReply* Reply, const CoreUObject::FVector2D& NewMousePosition);
        void STATIC_SetInputMode_UIOnlyEx(Engine::APlayerController* PlayerController, UMG::UWidget* InWidgetToFocus, Engine::EMouseLockMode InMouseLockMode);
        void STATIC_SetInputMode_UIOnly(Engine::APlayerController* Target, UMG::UWidget* InWidgetToFocus, bool bLockMouseToViewport);
        void STATIC_SetInputMode_GameOnly(Engine::APlayerController* PlayerController);
        void STATIC_SetInputMode_GameAndUIEx(Engine::APlayerController* PlayerController, UMG::UWidget* InWidgetToFocus, Engine::EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture);
        void STATIC_SetInputMode_GameAndUI(Engine::APlayerController* Target, UMG::UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture);
        bool STATIC_SetHardwareCursor(CoreUObject::UObject* WorldContextObject, CoreUObject::EMouseCursor CursorShape, const BasicTypes::FName& CursorName, const CoreUObject::FVector2D& HotSpot);
        void STATIC_SetFocusToGameViewport();
        void STATIC_SetBrushResourceToTexture(SlateCore::FSlateBrush* Brush, Engine::UTexture2D* Texture);
        void STATIC_SetBrushResourceToMaterial(SlateCore::FSlateBrush* Brush, Engine::UMaterialInterface* Material);
        void STATIC_RestorePreviousWindowTitleBarState();
        UMG::FEventReply STATIC_ReleaseMouseCapture(UMG::FEventReply* Reply);
        UMG::FEventReply STATIC_ReleaseJoystickCapture(UMG::FEventReply* Reply, bool bInAllJoysticks);
        void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();
        SlateCore::FSlateBrush STATIC_NoResourceBrush();
        SlateCore::FSlateBrush STATIC_MakeBrushFromTexture(Engine::UTexture2D* Texture, int32_t Width, int32_t Height);
        SlateCore::FSlateBrush STATIC_MakeBrushFromMaterial(Engine::UMaterialInterface* Material, int32_t Width, int32_t Height);
        SlateCore::FSlateBrush STATIC_MakeBrushFromAsset(Engine::USlateBrushAsset* BrushAsset);
        UMG::FEventReply STATIC_LockMouse(UMG::FEventReply* Reply, UMG::UWidget* CapturingWidget);
        bool STATIC_IsDragDropping();
        UMG::FEventReply STATIC_Handled();
        void STATIC_GetSafeZonePadding(CoreUObject::UObject* WorldContextObject, CoreUObject::FVector4* SafePadding, CoreUObject::FVector2D* SafePaddingScale, CoreUObject::FVector4* SpillOverPadding);
        SlateCore::FKeyEvent STATIC_GetKeyEventFromAnalogInputEvent(const SlateCore::FAnalogInputEvent& Event);
        SlateCore::FInputEvent STATIC_GetInputEventFromPointerEvent(const SlateCore::FPointerEvent& Event);
        SlateCore::FInputEvent STATIC_GetInputEventFromNavigationEvent(const SlateCore::FNavigationEvent& Event);
        SlateCore::FInputEvent STATIC_GetInputEventFromKeyEvent(const SlateCore::FKeyEvent& Event);
        SlateCore::FInputEvent STATIC_GetInputEventFromCharacterEvent(const SlateCore::FCharacterEvent& Event);
        Engine::UMaterialInstanceDynamic* STATIC_GetDynamicMaterial(SlateCore::FSlateBrush* Brush);
        UMG::UDragDropOperation* STATIC_GetDragDroppingContent();
        Engine::UTexture2D* STATIC_GetBrushResourceAsTexture2D(const SlateCore::FSlateBrush& Brush);
        Engine::UMaterialInterface* STATIC_GetBrushResourceAsMaterial(const SlateCore::FSlateBrush& Brush);
        CoreUObject::UObject* STATIC_GetBrushResource(const SlateCore::FSlateBrush& Brush);
        void STATIC_GetAllWidgetsWithInterface(CoreUObject::UObject* WorldContextObject, CoreUObject::IInterface* Interface, BasicTypes::TArray<UMG::UUserWidget*>* FoundWidgets, bool TopLevelOnly);
        void STATIC_GetAllWidgetsOfClass(CoreUObject::UObject* WorldContextObject, BasicTypes::TArray<UMG::UUserWidget*>* FoundWidgets, UMG::UUserWidget* WidgetClass, bool TopLevelOnly);
        UMG::FEventReply STATIC_EndDragDrop(UMG::FEventReply* Reply);
        void STATIC_DrawTextFormatted(UMG::FPaintContext* Context, const BasicTypes::FText& Text, const CoreUObject::FVector2D& Position, Engine::UFont* Font, int32_t FontSize, const BasicTypes::FName& FontTypeFace, const CoreUObject::FLinearColor& Tint);
        void STATIC_DrawText(UMG::FPaintContext* Context, const BasicTypes::FString& inString, const CoreUObject::FVector2D& Position, const CoreUObject::FLinearColor& Tint);
        void STATIC_DrawLines(UMG::FPaintContext* Context, BasicTypes::TArray<CoreUObject::FVector2D> Points, const CoreUObject::FLinearColor& Tint, bool bAntiAlias);
        void STATIC_DrawLine(UMG::FPaintContext* Context, const CoreUObject::FVector2D& PositionA, const CoreUObject::FVector2D& PositionB, const CoreUObject::FLinearColor& Tint, bool bAntiAlias);
        void STATIC_DrawBox(UMG::FPaintContext* Context, const CoreUObject::FVector2D& Position, const CoreUObject::FVector2D& Size, Engine::USlateBrushAsset* Brush, const CoreUObject::FLinearColor& Tint);
        void STATIC_DismissAllMenus();
        UMG::FEventReply STATIC_DetectDragIfPressed(const SlateCore::FPointerEvent& PointerEvent, UMG::UWidget* WidgetDetectingDrag, const InputCore::FKey& DragKey);
        UMG::FEventReply STATIC_DetectDrag(UMG::FEventReply* Reply, UMG::UWidget* WidgetDetectingDrag, const InputCore::FKey& DragKey);
        UMG::UDragDropOperation* STATIC_CreateDragDropOperation(UMG::UDragDropOperation* OperationClass);
        UMG::UUserWidget* STATIC_Create(CoreUObject::UObject* WorldContextObject, UMG::UUserWidget* WidgetType, Engine::APlayerController* OwningPlayer);
        UMG::FEventReply STATIC_ClearUserFocus(UMG::FEventReply* Reply, bool bInAllUsers);
        UMG::FEventReply STATIC_CaptureMouse(UMG::FEventReply* Reply, UMG::UWidget* CapturingWidget);
        UMG::FEventReply STATIC_CaptureJoystick(UMG::FEventReply* Reply, UMG::UWidget* CapturingWidget, bool bInAllJoysticks);
        void STATIC_CancelDragDrop();
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/UMG.WidgetBlueprintLibrary");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
