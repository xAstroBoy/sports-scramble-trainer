#pragma once

/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include <cstdint>
#include <vector>
#include <string>
#include "BasicTypes_FText.h"
#include "BasicTypes_TArray.h"
#include "CoreUObject_UObject.h"

// --------------------------------------------------
// # Forwards
// --------------------------------------------------
namespace CG::VariantManagerContent { class UVariantObjectBinding; };
namespace CG::Engine { class AActor; };
namespace CG::CoreUObject { class UClass; };

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::VariantManagerContent
{
    /**
     * Class /Script/VariantManagerContent.Variant
     * Size -> 0x0028 (FullSize[0x0050] - InheritedSize[0x0028])
     */
    class UVariant : public CoreUObject::UObject
    {
    public:
        BasicTypes::FText                                            DisplayText;                                             //  NativeAccessSpecifierPrivate
        BasicTypes::TArray<VariantManagerContent::UVariantObjectBinding*> ObjectBindings;                                          //  ZeroConstructor, NativeAccessSpecifierPrivate

    public:
        void SwitchOn();
        void SetDisplayText(const BasicTypes::FText& NewDisplayText);
        int32_t GetNumActors();
        BasicTypes::FText GetDisplayText();
        Engine::AActor* GetActor(int32_t ActorIndex);
        static inline CoreUObject::UClass* StaticClass()
        {
            static CoreUObject::UClass* ptr = nullptr;
            if (!ptr)
                ptr = CoreUObject::UObject::FindClass("Class /Script/VariantManagerContent.Variant");
            return ptr;
        }
    };
}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
