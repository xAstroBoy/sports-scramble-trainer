/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/ImageWriteQueue_ENUMS.h"
#include "Headers/ImageWriteQueue_PARAMS.h"
#include "Headers/ImageWriteQueue_UImageWriteBlueprintLibrary.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::ImageWriteQueue
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x00974DB0
     *         Name   -> Function /Script/ImageWriteQueue.ImageWriteBlueprintLibrary.ExportToDisk
     *         Flags  -> (Final, RequiredAPI, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         Engine::UTexture*                                  Texture                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::FString                                Filename                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         ImageWriteQueue::FImageWriteOptions                Options                                                    (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UImageWriteBlueprintLibrary::STATIC_ExportToDisk(Engine::UTexture* Texture, const BasicTypes::FString& Filename, const ImageWriteQueue::FImageWriteOptions& Options)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/ImageWriteQueue.ImageWriteBlueprintLibrary.ExportToDisk");
        
        UImageWriteBlueprintLibrary_ExportToDisk_Params params {};
        params.Texture = Texture;
        params.Filename = Filename;
        params.Options = Options;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
