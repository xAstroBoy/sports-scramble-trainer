/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/Landscape_ENUMS.h"
#include "Headers/Landscape_PARAMS.h"
#include "Headers/Landscape_ULandscapeInfoMap.h"
#include "Headers/Landscape_ULandscapeLayerInfoObject.h"
#include "Headers/Landscape_ULandscapeMaterialInstanceConstant.h"
#include "Headers/Landscape_ULandscapeMeshCollisionComponent.h"
#include "Headers/Landscape_ALandscapeMeshProxyActor.h"
#include "Headers/Landscape_ULandscapeMeshProxyComponent.h"
#include "Headers/Landscape_ULandscapeSplinesComponent.h"
#include "Headers/Landscape_ULandscapeSplineControlPoint.h"
#include "Headers/Landscape_ULandscapeSplineSegment.h"
#include "Headers/Landscape_ALandscapeStreamingProxy.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeGrassOutput.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeLayerBlend.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeLayerCoords.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeLayerSample.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeLayerSwitch.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeLayerWeight.h"
#include "Headers/Landscape_UMaterialExpressionLandscapeVisibilityMask.h"
#include "Headers/Landscape_UControlPointMeshComponent.h"
#include "Headers/Landscape_ALandscapeProxy.h"
#include "Headers/Landscape_ALandscape.h"
#include "Headers/Landscape_ULandscapeComponent.h"
#include "Headers/Landscape_ALandscapeGizmoActor.h"
#include "Headers/Landscape_ALandscapeGizmoActiveActor.h"
#include "Headers/Landscape_ULandscapeGizmoRenderComponent.h"
#include "Headers/Landscape_ULandscapeGrassType.h"
#include "Headers/Landscape_ULandscapeHeightfieldCollisionComponent.h"
#include "Headers/Landscape_ULandscapeInfo.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::Landscape
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x00E46470
     *         Name   -> Function /Script/Landscape.LandscapeSplinesComponent.GetSplineMeshComponents
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::TArray<Engine::USplineMeshComponent*>  ReturnValue                                                (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<Engine::USplineMeshComponent*> ULandscapeSplinesComponent::GetSplineMeshComponents()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeSplinesComponent.GetSplineMeshComponents");
        
        ULandscapeSplinesComponent_GetSplineMeshComponents_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x00E46680
     *         Name   -> Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialVectorParameterValue
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  ParameterName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FLinearColor                          Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::SetLandscapeMaterialVectorParameterValue(const BasicTypes::FName& ParameterName, const CoreUObject::FLinearColor& Value)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialVectorParameterValue");
        
        ALandscapeProxy_SetLandscapeMaterialVectorParameterValue_Params params {};
        params.ParameterName = ParameterName;
        params.Value = Value;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E465C0
     *         Name   -> Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialTextureParameterValue
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  ParameterName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::UTexture*                                  Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::SetLandscapeMaterialTextureParameterValue(const BasicTypes::FName& ParameterName, Engine::UTexture* Value)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialTextureParameterValue");
        
        ALandscapeProxy_SetLandscapeMaterialTextureParameterValue_Params params {};
        params.ParameterName = ParameterName;
        params.Value = Value;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E464F0
     *         Name   -> Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialScalarParameterValue
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::FName                                  ParameterName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              Value                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::SetLandscapeMaterialScalarParameterValue(const BasicTypes::FName& ParameterName, float Value)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.SetLandscapeMaterialScalarParameterValue");
        
        ALandscapeProxy_SetLandscapeMaterialScalarParameterValue_Params params {};
        params.ParameterName = ParameterName;
        params.Value = Value;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E46360
     *         Name   -> Function /Script/Landscape.LandscapeProxy.EditorSetLandscapeMaterial
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         Engine::UMaterialInterface*                        NewLandscapeMaterial                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::EditorSetLandscapeMaterial(Engine::UMaterialInterface* NewLandscapeMaterial)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.EditorSetLandscapeMaterial");
        
        ALandscapeProxy_EditorSetLandscapeMaterial_Params params {};
        params.NewLandscapeMaterial = NewLandscapeMaterial;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E46050
     *         Name   -> Function /Script/Landscape.LandscapeProxy.EditorApplySpline
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         Engine::USplineComponent*                          InSplineComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              StartWidth                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              EndWidth                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              StartSideFalloff                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              EndSideFalloff                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              StartRoll                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              EndRoll                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            NumSubdivisions                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bRaiseHeights                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bLowerHeights                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Landscape::ULandscapeLayerInfoObject*              PaintLayer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::EditorApplySpline(Engine::USplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int32_t NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, Landscape::ULandscapeLayerInfoObject* PaintLayer)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.EditorApplySpline");
        
        ALandscapeProxy_EditorApplySpline_Params params {};
        params.InSplineComponent = InSplineComponent;
        params.StartWidth = StartWidth;
        params.EndWidth = EndWidth;
        params.StartSideFalloff = StartSideFalloff;
        params.EndSideFalloff = EndSideFalloff;
        params.StartRoll = StartRoll;
        params.EndRoll = EndRoll;
        params.NumSubdivisions = NumSubdivisions;
        params.bRaiseHeights = bRaiseHeights;
        params.bLowerHeights = bLowerHeights;
        params.PaintLayer = PaintLayer;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E45FC0
     *         Name   -> Function /Script/Landscape.LandscapeProxy.ChangeUseTessellationComponentScreenSizeFalloff
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               InComponentScreenSizeToUseSubSections                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.ChangeUseTessellationComponentScreenSizeFalloff");
        
        ALandscapeProxy_ChangeUseTessellationComponentScreenSizeFalloff_Params params {};
        params.InComponentScreenSizeToUseSubSections = InComponentScreenSizeToUseSubSections;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E45F40
     *         Name   -> Function /Script/Landscape.LandscapeProxy.ChangeTessellationComponentScreenSizeFalloff
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         float                                              InUseTessellationComponentScreenSizeFalloff                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.ChangeTessellationComponentScreenSizeFalloff");
        
        ALandscapeProxy_ChangeTessellationComponentScreenSizeFalloff_Params params {};
        params.InUseTessellationComponentScreenSizeFalloff = InUseTessellationComponentScreenSizeFalloff;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E45EC0
     *         Name   -> Function /Script/Landscape.LandscapeProxy.ChangeTessellationComponentScreenSize
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         float                                              InTessellationComponentScreenSize                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.ChangeTessellationComponentScreenSize");
        
        ALandscapeProxy_ChangeTessellationComponentScreenSize_Params params {};
        params.InTessellationComponentScreenSize = InTessellationComponentScreenSize;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E45E40
     *         Name   -> Function /Script/Landscape.LandscapeProxy.ChangeLODDistanceFactor
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         float                                              InLODDistanceFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::ChangeLODDistanceFactor(float InLODDistanceFactor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.ChangeLODDistanceFactor");
        
        ALandscapeProxy_ChangeLODDistanceFactor_Params params {};
        params.InLODDistanceFactor = InLODDistanceFactor;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E45DC0
     *         Name   -> Function /Script/Landscape.LandscapeProxy.ChangeComponentScreenSizeToUseSubSections
     *         Flags  -> (Native, Public, BlueprintCallable)
     * Parameters:
     *         float                                              InComponentScreenSizeToUseSubSections                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALandscapeProxy::ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeProxy.ChangeComponentScreenSizeToUseSubSections");
        
        ALandscapeProxy_ChangeComponentScreenSizeToUseSubSections_Params params {};
        params.InComponentScreenSizeToUseSubSections = InComponentScreenSizeToUseSubSections;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x00E463E0
     *         Name   -> Function /Script/Landscape.LandscapeComponent.GetMaterialInstanceDynamic
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         int32_t                                            InIndex                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::UMaterialInstanceDynamic*                  ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    Engine::UMaterialInstanceDynamic* ULandscapeComponent::GetMaterialInstanceDynamic(int32_t InIndex)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/Landscape.LandscapeComponent.GetMaterialInstanceDynamic");
        
        ULandscapeComponent_GetMaterialInstanceDynamic_Params params {};
        params.InIndex = InIndex;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
