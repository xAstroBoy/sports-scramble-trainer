/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    09/09/2024                  |
 * ----------------------------------------
 */

#include "../pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/LevelSequence_PARAMS.h"
#include "Headers/LevelSequence_UDefaultLevelSequenceInstanceData.h"
#include "Headers/LevelSequence_ULevelSequence.h"
#include "Headers/LevelSequence_ULevelSequenceBurnInInitSettings.h"
#include "Headers/LevelSequence_ULevelSequenceBurnInOptions.h"
#include "Headers/LevelSequence_ALevelSequenceActor.h"
#include "Headers/LevelSequence_ULevelSequenceBurnIn.h"
#include "Headers/LevelSequence_ULevelSequenceDirector.h"
#include "Headers/LevelSequence_ULevelSequencePlayer.h"
#include "Headers/LevelSequence_ULegacyLevelSequenceDirectorBlueprint.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::LevelSequence
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x010C1C50
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnInOptions.SetBurnIn
     *         Flags  -> (Final, Native, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FSoftClassPath                        InBurnInClass                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULevelSequenceBurnInOptions::SetBurnIn(const CoreUObject::FSoftClassPath& InBurnInClass)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnInOptions.SetBurnIn");
        
        ULevelSequenceBurnInOptions_SetBurnIn_Params params {};
        params.InBurnInClass = InBurnInClass;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1DF0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         LevelSequence::ULevelSequence*                     InSequence                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetSequence(LevelSequence::ULevelSequence* InSequence)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetSequence");
        
        ALevelSequenceActor_SetSequence_Params params {};
        params.InSequence = InSequence;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1D10
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetEventReceivers
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         BasicTypes::TArray<Engine::AActor*>                AdditionalReceivers                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetEventReceivers(BasicTypes::TArray<Engine::AActor*> AdditionalReceivers)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetEventReceivers");
        
        ALevelSequenceActor_SetEventReceivers_Params params {};
        params.AdditionalReceivers = AdditionalReceivers;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1A60
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.SetBinding
     *         Flags  -> (Final, Native, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<Engine::AActor*>                Actors                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::SetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, BasicTypes::TArray<Engine::AActor*> Actors, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.SetBinding");
        
        ALevelSequenceActor_SetBinding_Params params {};
        params.Binding = Binding;
        params.Actors = Actors;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1A10
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.ResetBindings
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::ResetBindings()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.ResetBindings");
        
        ALevelSequenceActor_ResetBindings_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1920
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.ResetBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::ResetBinding(const MovieScene::FMovieSceneObjectBindingID& Binding)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.ResetBinding");
        
        ALevelSequenceActor_ResetBinding_Params params {};
        params.Binding = Binding;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C17E0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.RemoveBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::RemoveBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.RemoveBinding");
        
        ALevelSequenceActor_RemoveBinding_Params params {};
        params.Binding = Binding;
        params.Actor = Actor;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C16E0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.GetSequence
     *         Flags  -> (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
     * Parameters:
     *         bool                                               bLoad                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bInitializePlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         LevelSequence::ULevelSequence*                     ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequence* ALevelSequenceActor::GetSequence(bool bLoad, bool bInitializePlayer)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.GetSequence");
        
        ALevelSequenceActor_GetSequence_Params params {};
        params.bLoad = bLoad;
        params.bInitializePlayer = bInitializePlayer;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x010C1350
     *         Name   -> Function /Script/LevelSequence.LevelSequenceActor.AddBinding
     *         Flags  -> (Final, Native, Public, BlueprintCallable)
     * Parameters:
     *         MovieScene::FMovieSceneObjectBindingID             Binding                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         Engine::AActor*                                    Actor                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bAllowBindingsFromAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ALevelSequenceActor::AddBinding(const MovieScene::FMovieSceneObjectBindingID& Binding, Engine::AActor* Actor, bool bAllowBindingsFromAsset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceActor.AddBinding");
        
        ALevelSequenceActor_AddBinding_Params params {};
        params.Binding = Binding;
        params.Actor = Actor;
        params.bAllowBindingsFromAsset = bAllowBindingsFromAsset;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x006628B0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnIn.SetSettings
     *         Flags  -> (Event, Public, BlueprintEvent)
     * Parameters:
     *         CoreUObject::UObject*                              InSettings                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void ULevelSequenceBurnIn::SetSettings(CoreUObject::UObject* InSettings)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnIn.SetSettings");
        
        ULevelSequenceBurnIn_SetSettings_Params params {};
        params.InSettings = InSettings;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C17C0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceBurnIn.GetSettingsClass
     *         Flags  -> (Native, Event, Public, BlueprintEvent, Const)
     * Parameters:
     *         LevelSequence::ULevelSequenceBurnInInitSettings*   ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequenceBurnInInitSettings* ULevelSequenceBurnIn::GetSettingsClass()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceBurnIn.GetSettingsClass");
        
        ULevelSequenceBurnIn_GetSettingsClass_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x006628B0
     *         Name   -> Function /Script/LevelSequence.LevelSequenceDirector.OnCreated
     *         Flags  -> (Event, Public, BlueprintEvent)
     * Parameters:
     *         void                                               ReturnValue
     */
    void ULevelSequenceDirector::OnCreated()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequenceDirector.OnCreated");
        
        ULevelSequenceDirector_OnCreated_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x010C14A0
     *         Name   -> Function /Script/LevelSequence.LevelSequencePlayer.CreateLevelSequencePlayer
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
     * Parameters:
     *         CoreUObject::UObject*                              WorldContextObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         LevelSequence::ULevelSequence*                     LevelSequence                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         MovieScene::FMovieSceneSequencePlaybackSettings    Settings                                                   (Parm, NativeAccessSpecifierPublic)
     *         LevelSequence::ALevelSequenceActor*                OutActor                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         LevelSequence::ULevelSequencePlayer*               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    LevelSequence::ULevelSequencePlayer* ULevelSequencePlayer::STATIC_CreateLevelSequencePlayer(CoreUObject::UObject* WorldContextObject, LevelSequence::ULevelSequence* LevelSequence, const MovieScene::FMovieSceneSequencePlaybackSettings& Settings, LevelSequence::ALevelSequenceActor** OutActor)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/LevelSequence.LevelSequencePlayer.CreateLevelSequencePlayer");
        
        ULevelSequencePlayer_CreateLevelSequencePlayer_Params params {};
        params.WorldContextObject = WorldContextObject;
        params.LevelSequence = LevelSequence;
        params.Settings = Settings;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutActor != nullptr)
            *OutActor = params.OutActor;
        
        return params.ReturnValue;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
