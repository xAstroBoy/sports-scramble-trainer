/**
 * ----------------------------------------
 * |        Generated By CheatGear        |
 * ----------------------------------------
 * | Game:    SportsScramble              |
 * | Version: 1                           |
 * | Date:    10/14/2024                  |
 * ----------------------------------------
 */

#include "pch.h"
#include <cstdint>
#include <vector>
#include <string>
#include <locale>
#include <unordered_set>
#include "Headers/Global_DEFINES.h"
#include "Headers/BasicTypes.h"
#include "Headers/CoreUObject_UFunction.h"
#include "Headers/OculusHMD_ENUMS.h"
#include "Headers/OculusHMD_PARAMS.h"
#include "Headers/OculusHMD_UOculusFunctionLibrary.h"
#include "Headers/OculusHMD_UOculusHMDRuntimeSettings.h"
#include "Headers/OculusHMD_UOculusSceneCaptureCubemap.h"

#ifdef _MSC_VER
    #pragma pack(push, 0x01)
#endif

namespace CG::OculusHMD
{
    // --------------------------------------------------
    // # Structs functions
    // --------------------------------------------------
    /**
     * Function:
     *         RVA    -> 0x002A5BF0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetTiledMultiresLevel
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         OculusHMD::ETiledMultiResLevel                     Level                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetTiledMultiresLevel(OculusHMD::ETiledMultiResLevel Level)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetTiledMultiresLevel");
        
        UOculusFunctionLibrary_SetTiledMultiresLevel_Params params {};
        params.Level = Level;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5B70
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetReorientHMDOnControllerRecenter
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               recenterMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetReorientHMDOnControllerRecenter(bool recenterMode)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetReorientHMDOnControllerRecenter");
        
        UOculusFunctionLibrary_SetReorientHMDOnControllerRecenter_Params params {};
        params.recenterMode = recenterMode;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5B10
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetPositionScale3D
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FVector                               PosScale3D                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetPositionScale3D(const CoreUObject::FVector& PosScale3D)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetPositionScale3D");
        
        UOculusFunctionLibrary_SetPositionScale3D_Params params {};
        params.PosScale3D = PosScale3D;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5A90
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetGuardianVisibility
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               GuardianVisible                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetGuardianVisibility(bool GuardianVisible)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetGuardianVisibility");
        
        UOculusFunctionLibrary_SetGuardianVisibility_Params params {};
        params.GuardianVisible = GuardianVisible;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5A20
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetDisplayFrequency
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         float                                              RequestedFrequency                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetDisplayFrequency(float RequestedFrequency)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetDisplayFrequency");
        
        UOculusFunctionLibrary_SetDisplayFrequency_Params params {};
        params.RequestedFrequency = RequestedFrequency;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5870
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetCPUAndGPULevels
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         int32_t                                            CPULevel                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         int32_t                                            GPULevel                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetCPUAndGPULevels(int32_t CPULevel, int32_t GPULevel)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetCPUAndGPULevels");
        
        UOculusFunctionLibrary_SetCPUAndGPULevels_Params params {};
        params.CPULevel = CPULevel;
        params.GPULevel = GPULevel;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5920
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetColorScaleAndOffset
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FLinearColor                          ColorScale                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FLinearColor                          ColorOffset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bApplyToAllLayers                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetColorScaleAndOffset(const CoreUObject::FLinearColor& ColorScale, const CoreUObject::FLinearColor& ColorOffset, bool bApplyToAllLayers)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetColorScaleAndOffset");
        
        UOculusFunctionLibrary_SetColorScaleAndOffset_Params params {};
        params.ColorScale = ColorScale;
        params.ColorOffset = ColorOffset;
        params.bApplyToAllLayers = bApplyToAllLayers;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5760
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetBaseRotationAndPositionOffset
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FRotator                              BaseRot                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               PosOffset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         HeadMountedDisplay::EOrientPositionSelector        Options                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetBaseRotationAndPositionOffset(const CoreUObject::FRotator& BaseRot, const CoreUObject::FVector& PosOffset, HeadMountedDisplay::EOrientPositionSelector Options)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetBaseRotationAndPositionOffset");
        
        UOculusFunctionLibrary_SetBaseRotationAndPositionOffset_Params params {};
        params.BaseRot = BaseRot;
        params.PosOffset = PosOffset;
        params.Options = Options;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5650
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.SetBaseRotationAndBaseOffsetInMeters
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FRotator                              Rotation                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               BaseOffsetInMeters                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         HeadMountedDisplay::EOrientPositionSelector        Options                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_SetBaseRotationAndBaseOffsetInMeters(const CoreUObject::FRotator& Rotation, const CoreUObject::FVector& BaseOffsetInMeters, HeadMountedDisplay::EOrientPositionSelector Options)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.SetBaseRotationAndBaseOffsetInMeters");
        
        UOculusFunctionLibrary_SetBaseRotationAndBaseOffsetInMeters_Params params {};
        params.Rotation = Rotation;
        params.BaseOffsetInMeters = BaseOffsetInMeters;
        params.Options = Options;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5620
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.IsGuardianDisplayed
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UOculusFunctionLibrary::STATIC_IsGuardianDisplayed()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.IsGuardianDisplayed");
        
        UOculusFunctionLibrary_IsGuardianDisplayed_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A55A0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.IsDeviceTracked
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         OculusHMD::ETrackedDeviceType                      DeviceType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UOculusFunctionLibrary::STATIC_IsDeviceTracked(OculusHMD::ETrackedDeviceType DeviceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.IsDeviceTracked");
        
        UOculusFunctionLibrary_IsDeviceTracked_Params params {};
        params.DeviceType = DeviceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5570
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.HasSystemOverlayPresent
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UOculusFunctionLibrary::STATIC_HasSystemOverlayPresent()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.HasSystemOverlayPresent");
        
        UOculusFunctionLibrary_HasSystemOverlayPresent_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5540
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.HasInputFocus
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UOculusFunctionLibrary::STATIC_HasInputFocus()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.HasInputFocus");
        
        UOculusFunctionLibrary_HasInputFocus_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5450
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetUserProfile
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         OculusHMD::FHmdUserProfile                         Profile                                                    (Parm, OutParm, NativeAccessSpecifierPublic)
     *         bool                                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    bool UOculusFunctionLibrary::STATIC_GetUserProfile(OculusHMD::FHmdUserProfile* Profile)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetUserProfile");
        
        UOculusFunctionLibrary_GetUserProfile_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (Profile != nullptr)
            *Profile = params.Profile;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A5420
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetTiledMultiresLevel
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         OculusHMD::ETiledMultiResLevel                     ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    OculusHMD::ETiledMultiResLevel UOculusFunctionLibrary::STATIC_GetTiledMultiresLevel()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetTiledMultiresLevel");
        
        UOculusFunctionLibrary_GetTiledMultiresLevel_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A51F0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetRawSensorData
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         CoreUObject::FVector                               AngularAcceleration                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               LinearAcceleration                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               AngularVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               LinearVelocity                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              TimeInSeconds                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         OculusHMD::ETrackedDeviceType                      DeviceType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_GetRawSensorData(CoreUObject::FVector* AngularAcceleration, CoreUObject::FVector* LinearAcceleration, CoreUObject::FVector* AngularVelocity, CoreUObject::FVector* LinearVelocity, float* TimeInSeconds, OculusHMD::ETrackedDeviceType DeviceType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetRawSensorData");
        
        UOculusFunctionLibrary_GetRawSensorData_Params params {};
        params.DeviceType = DeviceType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (AngularAcceleration != nullptr)
            *AngularAcceleration = params.AngularAcceleration;
        if (LinearAcceleration != nullptr)
            *LinearAcceleration = params.LinearAcceleration;
        if (AngularVelocity != nullptr)
            *AngularVelocity = params.AngularVelocity;
        if (LinearVelocity != nullptr)
            *LinearVelocity = params.LinearVelocity;
        if (TimeInSeconds != nullptr)
            *TimeInSeconds = params.TimeInSeconds;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4FF0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetPose
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         CoreUObject::FRotator                              DeviceRotation                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               DevicePosition                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               NeckPosition                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bUseOrienationForPlayerCamera                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               bUsePositionForPlayerCamera                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               PositionScale                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_GetPose(CoreUObject::FRotator* DeviceRotation, CoreUObject::FVector* DevicePosition, CoreUObject::FVector* NeckPosition, bool bUseOrienationForPlayerCamera, bool bUsePositionForPlayerCamera, const CoreUObject::FVector& PositionScale)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetPose");
        
        UOculusFunctionLibrary_GetPose_Params params {};
        params.bUseOrienationForPlayerCamera = bUseOrienationForPlayerCamera;
        params.bUsePositionForPlayerCamera = bUsePositionForPlayerCamera;
        params.PositionScale = PositionScale;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (DeviceRotation != nullptr)
            *DeviceRotation = params.DeviceRotation;
        if (DevicePosition != nullptr)
            *DevicePosition = params.DevicePosition;
        if (NeckPosition != nullptr)
            *NeckPosition = params.NeckPosition;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4F10
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetPointGuardianIntersection
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FVector                               Point                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         OculusHMD::EBoundaryType                           BoundaryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         OculusHMD::FGuardianTestResult                     ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
     */
    OculusHMD::FGuardianTestResult UOculusFunctionLibrary::STATIC_GetPointGuardianIntersection(const CoreUObject::FVector& Point, OculusHMD::EBoundaryType BoundaryType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetPointGuardianIntersection");
        
        UOculusFunctionLibrary_GetPointGuardianIntersection_Params params {};
        params.Point = Point;
        params.BoundaryType = BoundaryType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4EB0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetPlayAreaTransform
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         CoreUObject::FTransform                            ReturnValue                                                (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     */
    CoreUObject::FTransform UOculusFunctionLibrary::STATIC_GetPlayAreaTransform()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetPlayAreaTransform");
        
        UOculusFunctionLibrary_GetPlayAreaTransform_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4DE0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetNodeGuardianIntersection
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         OculusHMD::ETrackedDeviceType                      DeviceType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         OculusHMD::EBoundaryType                           BoundaryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         OculusHMD::FGuardianTestResult                     ReturnValue                                                (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
     */
    OculusHMD::FGuardianTestResult UOculusFunctionLibrary::STATIC_GetNodeGuardianIntersection(OculusHMD::ETrackedDeviceType DeviceType, OculusHMD::EBoundaryType BoundaryType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetNodeGuardianIntersection");
        
        UOculusFunctionLibrary_GetNodeGuardianIntersection_Params params {};
        params.DeviceType = DeviceType;
        params.BoundaryType = BoundaryType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4CD0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetGuardianPoints
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         OculusHMD::EBoundaryType                           BoundaryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         bool                                               UsePawnSpace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         BasicTypes::TArray<CoreUObject::FVector>           ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<CoreUObject::FVector> UOculusFunctionLibrary::STATIC_GetGuardianPoints(OculusHMD::EBoundaryType BoundaryType, bool UsePawnSpace)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetGuardianPoints");
        
        UOculusFunctionLibrary_GetGuardianPoints_Params params {};
        params.BoundaryType = BoundaryType;
        params.UsePawnSpace = UsePawnSpace;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4C40
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetGuardianDimensions
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         OculusHMD::EBoundaryType                           BoundaryType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    CoreUObject::FVector UOculusFunctionLibrary::STATIC_GetGuardianDimensions(OculusHMD::EBoundaryType BoundaryType)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetGuardianDimensions");
        
        UOculusFunctionLibrary_GetGuardianDimensions_Params params {};
        params.BoundaryType = BoundaryType;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4B60
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetGPUUtilization
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         bool                                               IsGPUAvailable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         float                                              GPUUtilization                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_GetGPUUtilization(bool* IsGPUAvailable, float* GPUUtilization)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetGPUUtilization");
        
        UOculusFunctionLibrary_GetGPUUtilization_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (IsGPUAvailable != nullptr)
            *IsGPUAvailable = params.IsGPUAvailable;
        if (GPUUtilization != nullptr)
            *GPUUtilization = params.GPUUtilization;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4B30
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetGPUFrameTime
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    float UOculusFunctionLibrary::STATIC_GetGPUFrameTime()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetGPUFrameTime");
        
        UOculusFunctionLibrary_GetGPUFrameTime_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4AB0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetDeviceName
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         BasicTypes::FString                                ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    BasicTypes::FString UOculusFunctionLibrary::STATIC_GetDeviceName()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetDeviceName");
        
        UOculusFunctionLibrary_GetDeviceName_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4A80
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetCurrentDisplayFrequency
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         float                                              ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     */
    float UOculusFunctionLibrary::STATIC_GetCurrentDisplayFrequency()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetCurrentDisplayFrequency");
        
        UOculusFunctionLibrary_GetCurrentDisplayFrequency_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A49B0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetBaseRotationAndPositionOffset
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
     * Parameters:
     *         CoreUObject::FRotator                              OutRot                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               OutPosOffset                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_GetBaseRotationAndPositionOffset(CoreUObject::FRotator* OutRot, CoreUObject::FVector* OutPosOffset)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetBaseRotationAndPositionOffset");
        
        UOculusFunctionLibrary_GetBaseRotationAndPositionOffset_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutRot != nullptr)
            *OutRot = params.OutRot;
        if (OutPosOffset != nullptr)
            *OutPosOffset = params.OutPosOffset;
    }

    /**
     * Function:
     *         RVA    -> 0x002A48E0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetBaseRotationAndBaseOffsetInMeters
     *         Flags  -> (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         CoreUObject::FRotator                              OutRotation                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               OutBaseOffsetInMeters                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_GetBaseRotationAndBaseOffsetInMeters(CoreUObject::FRotator* OutRotation, CoreUObject::FVector* OutBaseOffsetInMeters)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetBaseRotationAndBaseOffsetInMeters");
        
        UOculusFunctionLibrary_GetBaseRotationAndBaseOffsetInMeters_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        if (OutRotation != nullptr)
            *OutRotation = params.OutRotation;
        if (OutBaseOffsetInMeters != nullptr)
            *OutBaseOffsetInMeters = params.OutBaseOffsetInMeters;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4860
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.GetAvailableDisplayFrequencies
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
     * Parameters:
     *         BasicTypes::TArray<float>                          ReturnValue                                                (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
     */
    BasicTypes::TArray<float> UOculusFunctionLibrary::STATIC_GetAvailableDisplayFrequencies()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.GetAvailableDisplayFrequencies");
        
        UOculusFunctionLibrary_GetAvailableDisplayFrequencies_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
        
        return params.ReturnValue;
    }

    /**
     * Function:
     *         RVA    -> 0x002A47E0
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.EnablePositionTracking
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bPositionTracking                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_EnablePositionTracking(bool bPositionTracking)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.EnablePositionTracking");
        
        UOculusFunctionLibrary_EnablePositionTracking_Params params {};
        params.bPositionTracking = bPositionTracking;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4760
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.EnableOrientationTracking
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         bool                                               bOrientationTracking                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_EnableOrientationTracking(bool bOrientationTracking)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.EnableOrientationTracking");
        
        UOculusFunctionLibrary_EnableOrientationTracking_Params params {};
        params.bOrientationTracking = bOrientationTracking;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4740
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.ClearLoadingSplashScreens
     *         Flags  -> (Final, Native, Static, Public, BlueprintCallable)
     * Parameters:
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_ClearLoadingSplashScreens()
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.ClearLoadingSplashScreens");
        
        UOculusFunctionLibrary_ClearLoadingSplashScreens_Params params {};
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

    /**
     * Function:
     *         RVA    -> 0x002A4560
     *         Name   -> Function /Script/OculusHMD.OculusFunctionLibrary.AddLoadingSplashScreen
     *         Flags  -> (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
     * Parameters:
     *         Engine::UTexture2D*                                Texture                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector                               TranslationInMeters                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FRotator                              Rotation                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         CoreUObject::FVector2D                             SizeInMeters                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         CoreUObject::FRotator                              DeltaRotation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
     *         bool                                               bClearBeforeAdd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
     *         void                                               ReturnValue
     */
    void UOculusFunctionLibrary::STATIC_AddLoadingSplashScreen(Engine::UTexture2D* Texture, const CoreUObject::FVector& TranslationInMeters, const CoreUObject::FRotator& Rotation, const CoreUObject::FVector2D& SizeInMeters, const CoreUObject::FRotator& DeltaRotation, bool bClearBeforeAdd)
    {
        static CoreUObject::UFunction* fn = nullptr;
        if (!fn)
            fn = CoreUObject::UObject::FindObject<CoreUObject::UFunction>("Function /Script/OculusHMD.OculusFunctionLibrary.AddLoadingSplashScreen");
        
        UOculusFunctionLibrary_AddLoadingSplashScreen_Params params {};
        params.Texture = Texture;
        params.TranslationInMeters = TranslationInMeters;
        params.Rotation = Rotation;
        params.SizeInMeters = SizeInMeters;
        params.DeltaRotation = DeltaRotation;
        params.bClearBeforeAdd = bClearBeforeAdd;
        
        auto flags = fn->FunctionFlags;
        CoreUObject::UObject::ProcessEvent(fn, &params);
        fn->FunctionFlags = flags;
    }

}

#ifdef _MSC_VER
    #pragma pack(pop)
#endif
