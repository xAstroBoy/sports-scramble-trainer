#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class AGameHandlerQuickplay_C : public AGameHandlerBase_C
		TEST_METHOD(BlueprintGeneratedClass__GameHandlerQuickplay__GameHandlerQuickplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, Sport, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, UnknownData_3AIR, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, Scoreboards, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, GameInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, TennisManager, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, GameElements, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, BowlingManager, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, BaseballManager, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerQuickplay_C, PlayerBatting, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameHandlerQuickplay_C, 0x03A1);
		}

		// class UAcceptInviteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__AcceptInviteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptInviteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptInviteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptInviteCallbackProxy, UnknownData_OCZM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptInviteCallbackProxy, 0x00D8);
		}

		// class UScramSceneComponent : public USceneComponent
		TEST_METHOD(Class__SportsScramble__ScramSceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSceneComponent, UnknownData_3NLU, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramSceneComponent, 0x0240);
		}

		// class UActorSet : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__ActorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSet, Mode, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSet, UnknownData_2CCM, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSet, Actors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSet, WorkingActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSet, UnknownData_3QDM, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSet, 0x0270);
		}

		// class UAdvancedSessionsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SportsScramble__AdvancedSessionsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSessionsLibrary, 0x0028);
		}

		// class UBaseballAIAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIAnimInstance, UnknownData_G97N, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAIAnimInstance, 0x035C);
		}

		// class AScramActor : public AActor
		TEST_METHOD(Class__SportsScramble__ScramActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, UnknownData_KEXP, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, CanBeHidden, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, UnknownData_15C6, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, DebugDrawMode, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, UnknownData_PWQQ, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActor, mDynamicAudioComponents, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramActor, 0x0348);
		}

		// class AScramAvatar : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, SkeletalMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, RootBoneName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, LeftHandBone, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, RightHandBone, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, LeftGrabBone, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, RightGrabBone, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, GlobalColorTeamRed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, GlobalColorTeamBlue, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, MaterialPrimaryClothesColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, mpAnimInstance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, SpawnSound, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, SpawnParticle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, DebugActor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, UsesSpawnAnimation, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, RestoringGame, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, UnknownData_BQ38, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, mpPlayer, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, mpSpawnParticleActor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramAvatar, UnknownData_P2LV, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramAvatar, 0x03D0);
		}

		// class ABaseballAvatar : public AScramAvatar
		TEST_METHOD(Class__SportsScramble__BaseballAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAvatar, HeadAngleBodyOffset, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAvatar, BodyTurnTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAvatar, ArmReach, 0x03DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAvatar, 0x03E0);
		}

		// class AScramMeshActor : public AStaticMeshActor
		TEST_METHOD(Class__SportsScramble__ScramMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, UnknownData_V7I1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, CanBeHidden, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, UnknownData_VS6X, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, DebugDrawMode, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, UnknownData_XW5J, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshActor, mpSkeletalMesh, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramMeshActor, 0x0350);
		}

		// class AScramPrimitiveActor : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__ScramPrimitiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, UnknownData_TJVL, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, Properties, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, MassRelativeImpulseThreshold, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, SimulatingNetPriority, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, ReplicateMotionState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, UnknownData_23Y8, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, OnPrimitiveDestroyed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, mClientTrajectoryPaused, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveActor, UnknownData_RIXH, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPrimitiveActor, 0x08EC);
		}

		// class AScramPrimitiveGrabbable : public AScramPrimitiveActor
		TEST_METHOD(Class__SportsScramble__ScramPrimitiveGrabbable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_FP2D, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, SmoothTime, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, CanBeGrabbed, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_L8NW, 0x08F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, InitialGrabDuration, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_IU4Y, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, InitialGrabPositionAlpha, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, InitialGrabRotationAlpha, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, InitialGrabScaleAlpha, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, PendingStealPositionAlpha, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, PendingStealRotationAlpha, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, PendingStealScaleAlpha, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, HidesAvatarHands, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_NP6O, 0x0931);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, AlternateHandMesh, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, AlternateHandSkeletalMesh, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, LefthandGripSetClass, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, RighthandGripSetClass, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, DefaultScale, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, RemoteScale, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, MinTrackedFramesForContinuousMotion, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, MinInferredFramesForContinuousMotion, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, FlipInLeftHand, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_RA2M, 0x0971);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, mpLefthandGripSet, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, mpRighthandGripSet, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, mpMainHandMesh, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, mpMainHandSkeletalMesh, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, mpProxyGrabbable, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPrimitiveGrabbable, UnknownData_AJ2B, 0x09A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPrimitiveGrabbable, 0x09F8);
		}

		// class AScramBall : public AScramPrimitiveGrabbable
		TEST_METHOD(Class__SportsScramble__ScramBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, UnknownData_8EU3, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, mRandomFloat, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, UnknownData_6ZVP, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, mpBlobShadow, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, mpAnimInstance, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, UnknownData_BAPQ, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, mImmuneToInstruments, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBall, UnknownData_HPSS, 0x0B19);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBall, 0x0B20);
		}

		// class ABaseballBall : public AScramBall
		TEST_METHOD(Class__SportsScramble__BaseballBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, BowlingBallClass, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, BowlingBallDestroyDelay, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, UnknownData_VMFK, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mClientSpawnUpdate, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mClientHasSpawnUpdate, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mVisible, 0x0D31);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mForcedCharge, 0x0D32);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mIsImbued, 0x0D33);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, UnknownData_XYFE, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mpBowlingBall, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mNetworkMotionState, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, UnknownData_NW1N, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, mCanPitch, 0x0D96);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBall, UnknownData_DHWN, 0x0D97);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBall, 0x0ED0);
		}

		// class ABaseballBallClassifier : public AActor
		TEST_METHOD(Class__SportsScramble__BaseballBallClassifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, PitchingMound, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, HomePlate, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, OutfieldCenter, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, OutfieldEdge, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, OutfieldLocus, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, DoubleTripleMarkerPos, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, InfieldEdge, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, InnerFoul, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, InnerFoulSpeed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, FenceMargin, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, FieldCollisionTag, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallClassifier, UnknownData_AKVU, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBallClassifier, 0x0490);
		}

		// class ABaseballBallScrambleDisplay : public AActor
		TEST_METHOD(Class__SportsScramble__BaseballBallScrambleDisplay)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBallScrambleDisplay, 0x0328);
		}

		// class AScramSceneComponentActor : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramSceneComponentActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSceneComponentActor, ScramRoot, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSceneComponentActor, 0x0350);
		}

		// class ABaseballBallSelector : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BaseballBallSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, UpperRightScrambleTransform, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, UpperLeftScrambleTransform, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, LowerRightScrambleTransform, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, LowerLeftScrambleTransform, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, ImbuementFalloff, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, TargetClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, PitchingTargets, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, UnknownData_L161, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, mMasterScrambleList, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector, UnknownData_2I8R, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBallSelector, 0x0450);
		}

		// class UBaseballBatterAIAnimInstance : public UBaseballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballBatterAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBatterAIAnimInstance, SwingStartTime, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBatterAIAnimInstance, HeadTrackRotation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBatterAIAnimInstance, UnknownData_5V6L, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballBatterAIAnimInstance, 0x0370);
		}

		// class UBaseballCatcherAIAnimInstance : public UBaseballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballCatcherAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballCatcherAIAnimInstance, UnknownData_D26L, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballCatcherAIAnimInstance, 0x0360);
		}

		// class AScramTarget : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTarget, UnknownData_LJTT, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTarget, 0x0358);
		}

		// class ABaseballField : public AScramTarget
		TEST_METHOD(Class__SportsScramble__BaseballField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballField, FloorMaterial, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballField, PitchDirection, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballField, UnknownData_TXCO, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballField, 0x0370);
		}

		// class UBaseballFielderAIAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballFielderAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballFielderAIAnimInstance, UnknownData_UZXF, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballFielderAIAnimInstance, UnknownData_RRT8, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballFielderAIAnimInstance, Proxy, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballFielderAIAnimInstance, 0x0900);
		}

		// class UBaseballGlobalDataAsset : public UDataAsset
		TEST_METHOD(Class__SportsScramble__BaseballGlobalDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballGlobalDataAsset, Data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballGlobalDataAsset, 0x0270);
		}

		// class AScramInstrument : public AScramPrimitiveGrabbable
		TEST_METHOD(Class__SportsScramble__ScramInstrument)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_2VPN, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, HitPhysics, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_WF3M, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, BroadSwingRegion, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, CriticalSwingRegion, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, TightSwingRegion, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, TeeBallServiceRegion, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, LeverLength, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, LeverVelocitySmoothTime, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UseDeadReckoningVelocity, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_W5VS, 0x0A7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, GrabberVelocitySmoothTime, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, AngularVelocitySmoothTime, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, AngularVelocitySpeedBiasWeight, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MaxSwingSpeed, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, SwingSpeedBias, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, SwingSpeedMultiplier, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, AngularVelocityLeverContribution, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, IncomingBallVelocityMultiplier, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, IncomingBallAngularVelocityMultiplier, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, LateralSpinBias, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, DowncourtSpinMap, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, SpinSpeedContribution, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, NormalImpulseMultiplier, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, LateralImpulseMultiplier, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, SwingGesture, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, DowncourtNormalBiasSpeedRange, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, DowncourtNormalBiasMode, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_CMAQ, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MinDowncourtNormalYawMap, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MaxDowncourtNormalYawMap, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MinDowncourtNormalPitchMap, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MaxDowncourtNormalPitchMap, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, MotionBlurMovementThreshold, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_I370, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, mpAnimInstance, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, UnknownData_LZ2P, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInstrument, mQueuedInferredHits, 0x0D20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramInstrument, 0x0D30);
		}

		// class ABaseballInstrument : public AScramInstrument
		TEST_METHOD(Class__SportsScramble__BaseballInstrument)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, MaxValidSwingAngle, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, UnknownData_8559, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, mClientNeedsSelectorInitialization, 0x0F11);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, UnknownData_NNBY, 0x0F12);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, mSwungAtBalls, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrument, UnknownData_9X0Q, 0x0F28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballInstrument, 0x0F30);
		}

		// class ABaseballInstrumentSelector : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BaseballInstrumentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, SpawnerMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, SpawnerParticle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, ParticleFireDelay, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, UnknownData_RO46, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, Instruments, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, SpawnedInstruments, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, InstrumentDisplayCount, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, InstrumentDisplayHeight, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, InstrumentDisplaySpace, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, UnknownData_NCB5, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, DisplayPositionOverrides, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, InstrumentShowScaleCurve, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, SpawnerShowScaleCurve, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, RotationOffset, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, UnknownData_DR7G, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, mWorkingDisplayCount, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, UnknownData_LXHF, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, mInstrumentTable, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, mLastSelected, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, mDisplayBases, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, mDisplayParticle, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballInstrumentSelector, UnknownData_0C7E, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballInstrumentSelector, 0x0438);
		}

		// class AScramGlove : public AScramPrimitiveGrabbable
		TEST_METHOD(Class__SportsScramble__ScramGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, UnknownData_Z32Z, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, GrabberHoldPoint, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, GrabberHoldDirection, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, GrabHaptics, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, ReleaseHaptics, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, HapticMultiplier, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGlove, UnknownData_B5TC, 0x0A2C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGlove, 0x0A38);
		}

		// class ABaseballMitt : public AScramGlove
		TEST_METHOD(Class__SportsScramble__BaseballMitt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_2E6Q, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, MainHandAnimationAsset, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, AlternateHandAnimationAsset, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, BounceHaptics, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, BroadVolume, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, TightVolume, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayAcceptanceAngle, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayLength, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayCenter, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayRotator, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplaySpace, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, SelectionCount, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayShowPositionCurve, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, DisplayShowScaleCurve, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, OpenWideUpAngle, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, OpenWideForwardAngle, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, CatchCloseTime, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, CatchCloseDuration, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, GripCloseTime, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, CloseEmptyTime, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, SkillVariations, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, CanDropBall, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_Q4OX, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mSpawnableBalls, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_PYHJ, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mSpawnedBalls, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mClientSpawnedBalls, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_Y7JE, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mImmuneBalls, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_P57B, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mLateGrabBalls, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, mBounceImmunity, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballMitt, UnknownData_0J72, 0x0BA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballMitt, 0x0BB0);
		}

		// class UBaseballPitcherAIAnimInstance : public UBaseballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballPitcherAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballPitcherAIAnimInstance, HeadTrackRotation, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballPitcherAIAnimInstance, UnknownData_X7NY, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballPitcherAIAnimInstance, 0x0370);
		}

		// class ABaseballPitchingPropManager : public AScramActor
		TEST_METHOD(Class__SportsScramble__BaseballPitchingPropManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingPropManager, SpawnableList, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingPropManager, mActiveObjects, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballPitchingPropManager, 0x0368);
		}

		// class AScramBallTrigger : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramBallTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, UnknownData_YZBT, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, BallRadiusMode, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, Shape, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, UnknownData_VJIM, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, Radius, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, RadiusAABBScale, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, RightMargin, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, LeftMargin, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, TopMargin, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, BottomMargin, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, SupportsMultiplayerAutoTriggering, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, TriggerEnabled, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, UnknownData_HI7G, 0x036E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, mFutureHit, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallTrigger, UnknownData_0PW6, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBallTrigger, 0x0420);
		}

		// class ABaseballPitchingTarget : public AScramBallTrigger
		TEST_METHOD(Class__SportsScramble__BaseballPitchingTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, ScrambleIcon, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, BallClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, ImbuedBall, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, ShowToClient, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, TargetLocationDesignation, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget, UnknownData_09H3, 0x0433);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballPitchingTarget, 0x0440);
		}

		// class UBaseballRunnerAIAnimInstance : public UBaseballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__BaseballRunnerAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballRunnerAIAnimInstance, UnknownData_57ON, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballRunnerAIAnimInstance, Proxy, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballRunnerAIAnimInstance, 0x08E0);
		}

		// class USportState : public UObject
		TEST_METHOD(Class__SportsScramble__SportState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USportState, 0x0028);
		}

		// class UBaseballState : public USportState
		TEST_METHOD(Class__SportsScramble__BaseballState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, VisitorsScore, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, HomeScore, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, Inning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, TopOfInning, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, FirstPitchOfInning, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, UnknownData_4CV0, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, Outs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, Strikes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, Balls, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, RunnerOnFirst, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, RunnerOnSecond, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, RunnerOnThird, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, IsLocalPlayerBatting, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, BatterInstrument, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballState, PitcherScrambleOptions, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballState, 0x0060);
		}

		// class AThrowingGlove : public AScramGlove
		TEST_METHOD(Class__SportsScramble__ThrowingGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, ThrowData, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, StartLagDist, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, CurveFitDist, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, FirstFrameFilterCount, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, MaxReliableInferredFrames, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, StartSmoothTime, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, VelocitySmoothingFrameCount, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, LinearSmoothing, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, AngularSmoothing, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, SideArmAngle, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, BeginAutoReleaseSpeed, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, EndAutoReleaseMaxSpeedPercentage, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, DebugDrawTime, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, DebugCycleFrameCount, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AThrowingGlove, UnknownData_SS77, 0x0A88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AThrowingGlove, 0x0AE0);
		}

		// class ABaseballThrowingGlove : public AThrowingGlove
		TEST_METHOD(Class__SportsScramble__BaseballThrowingGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, TrajectoryHelper, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, TargetZone, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, YawBiasStrength, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, PitchBiasStrength, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, UnderhandPitchBiasStrength, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, SpinForceConversionAlpha, 0x0AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, AngularRotationStrength, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, UnknownData_GFGS, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, SpeedAlphaMap, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, MaxTrackedHandSpeed, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, MultiplayerMaximumSpeed, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, FlubSpeedThreshhold, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, GrabRadiusForStationaryObjects, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, GrabRadiusForMovingObjects, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, GripFriction, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, MaxMeasuredTangentDifference, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, ReleaseTime, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, StickDrivenGloveMaxCrossTime, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, UnknownData_K767, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, BowlingGloveClass, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, InferredPitchOffsetFromHead, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, UnknownData_DWOX, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, mpBowlingGlove, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballThrowingGlove, UnknownData_LYB6, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballThrowingGlove, 0x0B70);
		}

		// class ABattingAvatar : public ABaseballAvatar
		TEST_METHOD(Class__SportsScramble__BattingAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingAvatar, MinTimeBetweenSwings, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingAvatar, UnknownData_7D9D, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABattingAvatar, 0x0410);
		}

		// class UScramAvatarAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__ScramAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, HeadRotation, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, UnknownData_12C8, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, LeftHandTransform, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, RightHandTransform, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, LeftGrabbableTransform, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, RightGrabbableTransform, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, BodyRotation, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramAvatarAnimInstance, UnknownData_XI27, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramAvatarAnimInstance, 0x0440);
		}

		// class UBattingAvatarAnimInstance : public UScramAvatarAnimInstance
		TEST_METHOD(Class__SportsScramble__BattingAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBattingAvatarAnimInstance, DesiredState, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBattingAvatarAnimInstance, Handedness, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBattingAvatarAnimInstance, UnknownData_NHCE, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBattingAvatarAnimInstance, 0x0450);
		}

		// class UBlobShadowComponent : public USceneComponent
		TEST_METHOD(Class__SportsScramble__BlobShadowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_NYLY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, MaxCastHeight, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, DefaultHeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, Radius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, AspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, Opacity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, ScaleWithDistance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_P110, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FarDistance, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FarRadius, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FarOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FalloffExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, ZApproachTime, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, FollowParent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, visible, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_YU36, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, MaterialCollection, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, RayTraceChannels, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, mpFollowActor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, mpIgnoreActor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlobShadowComponent, UnknownData_FXWH, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlobShadowComponent, 0x02D0);
		}

		// class ABlobShadowManager : public AActor
		TEST_METHOD(Class__SportsScramble__BlobShadowManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlobShadowManager, mBlobShadows, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlobShadowManager, UnknownData_92O4, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlobShadowManager, 0x0340);
		}

		// class UBowlingAIAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__BowlingAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAIAnimInstance, UnknownData_1NT5, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingAIAnimInstance, 0x0360);
		}

		// class ABowlingAlley : public AScramActor
		TEST_METHOD(Class__SportsScramble__BowlingAlley)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, Regions, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, FloorMaterial, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, mpPlayer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, mBalls, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, mThrownBalls, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, mpPinsetter, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley, UnknownData_RAAE, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAlley, 0x03B0);
		}

		// class ABowlingAvatar : public AScramAvatar
		TEST_METHOD(Class__SportsScramble__BowlingAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar, MaxHeightToPlayThrowAnimation, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar, UnknownData_XTUN, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar, mpBowlingAnimInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar, UnknownData_CH4B, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAvatar, 0x03F0);
		}

		// class UBowlingAvatarAnimInstance : public UScramAvatarAnimInstance
		TEST_METHOD(Class__SportsScramble__BowlingAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatarAnimInstance, DesiredState, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatarAnimInstance, PlayingIdle, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatarAnimInstance, UnknownData_UKHU, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingAvatarAnimInstance, 0x0450);
		}

		// class ABowlingBall : public AScramBall
		TEST_METHOD(Class__SportsScramble__BowlingBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, VibrationGrabHaptics, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, RollVolumeAudioProperty, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, RollVolumeVsSpeed, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, RollPitchAudioProperty, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, RollPitchVsSpeed, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, RollingAudio, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, AddedAsInstigator, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, UnknownData_VQGG, 0x0B51);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, mpAlley, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, mpCurrentLane, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, mpCurrentSpline, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBall, UnknownData_I8HH, 0x0B70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingBall, 0x0D80);
		}

		// class ABowlingBallReturn : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BowlingBallReturn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, BallTable, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, OverrideBall, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, AnimateInTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, AnimateOutTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, StorageDistance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, HorizontalRangeForLightCone, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, VerticalRangeForLightCone, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, TurnOnConeForHeldBall, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, UnknownData_F6J1, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, SlideSound, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, SpeedVar, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, mStartPosition, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, mStoragePosition, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, UnknownData_HRI1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, mLightCones, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturn, UnknownData_UTY4, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingBallReturn, 0x03F0);
		}

		// class ABowlingBallReturnSlot : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BowlingBallReturnSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, AttachTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, DisposeTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, Radius, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, TopSpeed, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, Acceleration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, UnknownData_BB5I, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, AttachPoint, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, mpBall, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, mpTrack, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, mpClientBall, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, mpClientTrack, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, UnknownData_RPUB, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, mTargetTrackDistance, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingBallReturnSlot, UnknownData_BJH5, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingBallReturnSlot, 0x03C8);
		}

		// class UScramTrajectoryUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTrajectoryUtils, 0x0028);
		}

		// class UScramTrajectoryInfluencerComponent : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerComponent, UnknownData_I2QE, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerComponent, Order, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerComponent, MinimumValidScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerComponent, InfluencerEnabled, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerComponent, UnknownData_72KJ, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTrajectoryInfluencerComponent, 0x0258);
		}

		// class UScramTrajectoryInfluencerRegion : public UScramTrajectoryInfluencerComponent
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, TargetRegion, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, BufferRegion, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, SnapRegion, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, HintRegion, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, HintEnabled, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, DebugDrawShotCorrection, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerRegion, UnknownData_VJUX, 0x039A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTrajectoryInfluencerRegion, 0x03A0);
		}

		// class UScramTrajectoryInfluencerBaseball : public UScramTrajectoryInfluencerRegion
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerBaseball)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerBaseball, BaseballRole, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerBaseball, UnknownData_XDPU, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerBaseball, SkillFlags, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTrajectoryInfluencerBaseball, UnknownData_QAUU, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTrajectoryInfluencerBaseball, 0x03B0);
		}

		// class UScramTrajectoryInfluencerInterface : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTrajectoryInfluencerInterface, 0x0028);
		}

		// class AScramTrajectoryInfluencerManager : public AActor
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerManager, UnknownData_LM8N, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrajectoryInfluencerManager, 0x0338);
		}

		// class AScramTravelCapsule : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramTravelCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTravelCapsule, FadeOutInnerRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTravelCapsule, FadeOutOuterRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTravelCapsule, UnknownData_QD6S, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTravelCapsule, 0x0390);
		}

		// class UBowlingBallReturnTrack : public USplineComponent
		TEST_METHOD(Class__SportsScramble__BowlingBallReturnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingBallReturnTrack, mSlots, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingBallReturnTrack, UnknownData_P089, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingBallReturnTrack, 0x0660);
		}

		// class ABowlingBallTrigger : public AScramBallTrigger
		TEST_METHOD(Class__SportsScramble__BowlingBallTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingBallTrigger, 0x0420);
		}

		// class ABowlingCenterScoreboard : public AActor
		TEST_METHOD(Class__SportsScramble__BowlingCenterScoreboard)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingCenterScoreboard, 0x0328);
		}

		// class ABowlingConveyor : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__BowlingConveyor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, ConveyorSpeed, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, UnknownData_XHGK, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, ConveyorPhysicsMaterial, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, DebugForceArrowLength, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, DebugForceArrowRadius, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingConveyor, OverlappingActors, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingConveyor, 0x0378);
		}

		// class ABowlingFootballBlocker : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__BowlingFootballBlocker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, MovementSpace, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, MovementSpeed, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, HeadingDeltaRange, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, HeadingSmoothTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, RotationSmoothTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, SpeedSmoothTime, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, RotationJitter, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, BoundaryHoldTime, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, BlockingRadius, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, ClientAttachParent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, ClientRelativeLocation, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, ClientRelativeRotation, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, UnknownData_YEQ7, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, mTargetSpeed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, mTargetMoveDirection, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, UnknownData_CVKE, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, mTargetRotation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingFootballBlocker, UnknownData_T593, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingFootballBlocker, 0x0450);
		}

		// class ABowlingForceMagnet : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__BowlingForceMagnet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, MagneticForce, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, ForceApplication, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, InvertedForce, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, UnknownData_CGPG, 0x0356);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, DistanceFalloff, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, OnlyUseIfClosest, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, ApplyForcesToDrawIn, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, UnknownData_NCRV, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, Priority, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, PriorityDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingForceMagnet, UnknownData_XRS5, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingForceMagnet, 0x03E8);
		}

		// class UBowlingGlobalDataAsset : public UDataAsset
		TEST_METHOD(Class__SportsScramble__BowlingGlobalDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGlobalDataAsset, Data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingGlobalDataAsset, 0x01F0);
		}

		// class ABowlingGlove : public AScramGlove
		TEST_METHOD(Class__SportsScramble__BowlingGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, UnknownData_ZO5J, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, PointGrabRange, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, PointAtDirection, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, LinearVelocitySmoothTime, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, AngularVelocitySmoothTime, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, ReleaseTime, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, FollowThroughTime, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, PostReleaseDebugTime, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, BeginAutoReleaseSpeed, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, EndAutoReleaseMaxSpeedPercentage, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, InferredReleaseYawRandomization, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, ThrowAngularVelocityMultiplier, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, InferredBowlOffsetFromHead, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, InferredBowlMinimumHeight, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, UnknownData_TIDN, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, mpFollowThroughBall, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingGlove, UnknownData_MOF6, 0x0B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingGlove, 0x0B30);
		}

		// class UBowlingGutterTracker : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__BowlingGutterTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, GutterSystemActive, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, CountsTowardFrame, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, BallPlayOut, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, UnknownData_K1VU, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, MaxGutterTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, MaxTrackingLoss, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, KillTimeDelay, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, mLeftTracker, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingGutterTracker, mRightTracker, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingGutterTracker, 0x0280);
		}

		// class ABowlingLane : public AScramActor
		TEST_METHOD(Class__SportsScramble__BowlingLane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, LaneType, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, DisableBallDriftMotion, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, UnknownData_A8CG, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, VisualRollFriction, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, FrictionRegions, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, PitRegions, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, LaneBounceRegion, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, LaneFloorRegion, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, TargetAirRegion, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, TargetGroundRegion, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MinValidThrowYaw, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, ValidThrowPitch, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, ThrowBiasSpeedRange, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, UnknownData_W3XJ, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MinThrowBiasYawMap, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MaxThrowBiasYawMap, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MinThrowBiasPitchMap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MaxThrowBiasPitchMap, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, MaxThrowRotationAdjustment, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, UnknownData_8Z5B, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, AIData, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, DownLaneAssistPercentModifiers, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, AvoidGuttersAssistPercentModifiers, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, SplineAssistPercentModifiers, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, UsesBowlingPins, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, UnknownData_IV1N, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane, mSplines, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingLane, 0x04C8);
		}

		// class UBowlingLaneSpline : public USplineComponent
		TEST_METHOD(Class__SportsScramble__BowlingLaneSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, UnknownData_CRUN, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, SplineEnabled, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, UnknownData_4QVQ, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, EndInfluenceDistance, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, EndInfluenceSpeed, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, UnknownData_3TWN, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, InfluenceStrengthAtDistance, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, InfluenceStrengthAtAngle, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, InfluenceStrengthAtSpeed, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, AffectsRotation, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, UnknownData_1CA0, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, FastestPitchSmoothTime, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, FastestYawSmoothTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, FastestSpeedSmoothTime, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, FastestRotationSmoothTime, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, BounceTolerance, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, InfluenceMaxImprovement, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, UnknownData_QQYA, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, InfluencerMap, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, AILeftRightOffset, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, AIThrowYaw, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneSpline, mpLane, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingLaneSpline, 0x06B8);
		}

		// class UBowlingLaneCurve : public UBowlingLaneSpline
		TEST_METHOD(Class__SportsScramble__BowlingLaneCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneCurve, SplineRight, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneCurve, InfluenceTime, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneCurve, mInfluencedBalls, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingLaneCurve, UnknownData_UWLG, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingLaneCurve, 0x06E0);
		}

		// class ABowlingLaneFlipper : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__BowlingLaneFlipper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, Center, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, ActiveTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, ArcTime, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, UnknownData_HHPO, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, AudioFeedback, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, SoundVolume, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, UnknownData_DSKG, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, MovementControl, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, EffectBox, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, ParticleFX, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, mpLaunchTarget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneFlipper, UnknownData_UB7S, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingLaneFlipper, 0x03A8);
		}

		// class ABowlingPin : public AScramPrimitiveActor
		TEST_METHOD(Class__SportsScramble__BowlingPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPin, DepthTolerance, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPin, LinearRestThreshold, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPin, AngularRestThreshold, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPin, UnknownData_RMH5, 0x08F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingPin, 0x0920);
		}

		// class ABowlingPinsetter : public AActor
		TEST_METHOD(Class__SportsScramble__BowlingPinsetter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPinsetter, ActivePins, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingPinsetter, 0x0338);
		}

		// class ABowlingPlinko : public AScramActor
		TEST_METHOD(Class__SportsScramble__BowlingPlinko)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, LocalBallHorizontalRange, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, LocalBallVerticalRange, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, WidgetHorizontalRange, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, WidgetVerticalRange, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, LocalBallResolveDepth, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinko, UnknownData_FGFY, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingPlinko, 0x03A0);
		}

		// class ABowlingPlinkoBall : public AScramMeshActor
		TEST_METHOD(Class__SportsScramble__BowlingPlinkoBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinkoBall, mpWidget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinkoBall, mResolving, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingPlinkoBall, UnknownData_FR2M, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingPlinkoBall, 0x0360);
		}

		// class ABowlingScoreKeeper : public AScramActor
		TEST_METHOD(Class__SportsScramble__BowlingScoreKeeper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingScoreKeeper, FrameSetPerPlayer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingScoreKeeper, NumPlayers, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingScoreKeeper, NumFrames, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingScoreKeeper, MaxPinsPerFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingScoreKeeper, UnknownData_RXHG, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingScoreKeeper, 0x0368);
		}

		// class ABowlingSpaceInvaderAlien : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BowlingSpaceInvaderAlien)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, RelativePosition, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, AlienID, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, Row, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, Column, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, Lane, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, ScoreValuePositive, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, ScoreValueNegative, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, MeshComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, LastUpdatePostion, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, UnknownData_F69Q, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, mpGroup, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, mIsActive, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderAlien, UnknownData_G9NY, 0x0399);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingSpaceInvaderAlien, 0x03A0);
		}

		// class ABowlingSpaceInvaderGroup : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__BowlingSpaceInvaderGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, GameStartDelay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, AlienTimeValue, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, AutoRestart, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, UnknownData_BYF2, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, ResetTime, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, MaxWidth, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, MaxHeight, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, InitialSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, UpdateTimeStep, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, MinimumUpdateTimeStep, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, AlienRadius, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, VerticalBuffer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, LaneHalfWidth, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, LaneLength, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, DownLaneMovement, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, FixedEdges, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, UnknownData_FWCP, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, Lane, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, InvaderClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, AlienGroup, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, MoveSounds, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, NegativeSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, mpNetHelper, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, UnknownData_82MR, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, mGroupOrigin, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderGroup, UnknownData_KWH1, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingSpaceInvaderGroup, 0x0418);
		}

		// class ABowlingSpaceInvaderNetHelper : public AScramActor
		TEST_METHOD(Class__SportsScramble__BowlingSpaceInvaderNetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderNetHelper, mAliens, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderNetHelper, UnknownData_LXU6, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderNetHelper, mpNetSoundSave, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingSpaceInvaderNetHelper, UnknownData_7LRJ, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingSpaceInvaderNetHelper, 0x0390);
		}

		// class UBowlingSpinKicker : public UBoxComponent
		TEST_METHOD(Class__SportsScramble__BowlingSpinKicker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingSpinKicker, UnknownData_8PJP, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingSpinKicker, SpinForceMultiplier, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingSpinKicker, AffectBouncing, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingSpinKicker, SendOverNetwork, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingSpinKicker, UnknownData_ISFN, 0x0596);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingSpinKicker, 0x05A0);
		}

		// class UBowlingState : public USportState
		TEST_METHOD(Class__SportsScramble__BowlingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingState, ScrambleState, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingState, TraditionalFrameSets, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingState, 0x00B8);
		}

		// class UBowlingUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SportsScramble__BowlingUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingUtils, 0x0028);
		}

		// class UCancelOculusMatchmakingCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__CancelOculusMatchmakingCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelOculusMatchmakingCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelOculusMatchmakingCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelOculusMatchmakingCallbackProxy, UnknownData_3400, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelOculusMatchmakingCallbackProxy, 0x0060);
		}

		// class UDestroyOculusSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__DestroyOculusSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyOculusSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyOculusSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyOculusSessionCallbackProxy, UnknownData_SJW0, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyOculusSessionCallbackProxy, 0x0070);
		}

		// class UDodgeballAIAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__DodgeballAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDodgeballAIAnimInstance, UnknownData_XQ6K, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDodgeballAIAnimInstance, 0x0360);
		}

		// class ADodgeballAvatar : public AScramAvatar
		TEST_METHOD(Class__SportsScramble__DodgeballAvatar)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADodgeballAvatar, 0x03D0);
		}

		// class ADodgeballBall : public AScramBall
		TEST_METHOD(Class__SportsScramble__DodgeballBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballBall, UnknownData_8SJX, 0x0B20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADodgeballBall, 0x0C00);
		}

		// class UDodgeballCaptainAIAnimInstance : public UDodgeballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__DodgeballCaptainAIAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDodgeballCaptainAIAnimInstance, 0x0360);
		}

		// class UDodgeballGlobalDataAsset : public UDataAsset
		TEST_METHOD(Class__SportsScramble__DodgeballGlobalDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDodgeballGlobalDataAsset, Data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDodgeballGlobalDataAsset, 0x0288);
		}

		// class ADodgeballGlove : public AThrowingGlove
		TEST_METHOD(Class__SportsScramble__DodgeballGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, ThrowAdjustmentVsAngle, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, ThrowAdjustmentSpeed, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, MinSpeedToAdjustThrow, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, UnknownData_60LZ, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, GrabRadiusVsSpeed, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, GrabRadiusFromHand, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, PointForward, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, PointingRadiusPadding, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, PointingHysteresisMargin, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, PointingLookAtAngle, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, ArmLengthForPointing, 0x0B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, mpPointedAtAI, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballGlove, UnknownData_3BD3, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADodgeballGlove, 0x0B30);
		}

		// class ADodgeballInstrument : public AScramInstrument
		TEST_METHOD(Class__SportsScramble__DodgeballInstrument)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballInstrument, ThrowAdjustmentVsAngle, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADodgeballInstrument, UnknownData_12MI, 0x0D38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADodgeballInstrument, 0x0D40);
		}

		// class UDodgeballPawnAIAnimInstance : public UDodgeballAIAnimInstance
		TEST_METHOD(Class__SportsScramble__DodgeballPawnAIAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDodgeballPawnAIAnimInstance, 0x0360);
		}

		// class UScramMeshShadow : public UActorComponent
		TEST_METHOD(Class__SportsScramble__ScramMeshShadow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, ShadowGroup, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, UpdateInBeginPlay, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, UpdateEveryFrame, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, UnknownData_23KG, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, mpSettings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramMeshShadow, mpInstancedMesh, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramMeshShadow, 0x0110);
		}

		// class UFanMeshShadow : public UScramMeshShadow
		TEST_METHOD(Class__SportsScramble__FanMeshShadow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFanMeshShadow, NumColors, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFanMeshShadow, HatUVSplit, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFanMeshShadow, UnknownData_W7QY, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFanMeshShadow, 0x0120);
		}

		// class AFieldingPlayerManager : public AScramActor
		TEST_METHOD(Class__SportsScramble__FieldingPlayerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldingPlayerManager, TimeScalesPerZone, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldingPlayerManager, MaxApex, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldingPlayerManager, FieldingHeightRange, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldingPlayerManager, FieldingWidthMinimum, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldingPlayerManager, 0x0378);
		}

		// class AFlyTextLabel : public AScramActor
		TEST_METHOD(Class__SportsScramble__FlyTextLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, LiftSpeed, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, SizeScale, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, FlyTextCurve, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, ScaleVsDistanceCurve, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, TextRenderComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, PositiveMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, NegativeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, BonusMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFlyTextLabel, UnknownData_4M7D, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlyTextLabel, 0x03A0);
		}

		// class UGameInviteUtils : public UObject
		TEST_METHOD(Class__SportsScramble__GameInviteUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInviteUtils, 0x0028);
		}

		// class UHoopsLaneIndicator : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__HoopsLaneIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, LightInterDelay, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, UnknownData_OQ8L, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, IndicatorOnMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, IndicatorOffMaterial, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, AudioFeedback, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, SoundVolume, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, UnknownData_DBSF, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, mpFlipper, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, mLightArray, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoopsLaneIndicator, UnknownData_GA5V, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoopsLaneIndicator, 0x0290);
		}

		// class UInstancedFanColorRandomizer : public UActorComponent
		TEST_METHOD(Class__SportsScramble__InstancedFanColorRandomizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, NumColors, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, HatUVSplit, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, DefaultShadowValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, PerFrameUpdate, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, UnknownData_O234, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, mpStaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, mpInstancedMesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, mpMeshShadow, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFanColorRandomizer, UnknownData_TD7C, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedFanColorRandomizer, 0x0120);
		}

		// class UInstancedMesh : public UActorComponent
		TEST_METHOD(Class__SportsScramble__InstancedMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, DoInstance, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, UnknownData_QFC5, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, GroupTag, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, GetAndSetInstanceFloatValue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, SetInstanceFloatValueOnBeginPlay, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, UnknownData_UO1N, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, InstanceFloatValue, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedMesh, UnknownData_JANP, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedMesh, 0x0120);
		}

		// class AInstancedMeshManager : public AActor
		TEST_METHOD(Class__SportsScramble__InstancedMeshManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedMeshManager, UnknownData_RCZ3, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedMeshManager, 0x0378);
		}

		// class UInviteFriendCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__InviteFriendCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInviteFriendCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInviteFriendCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInviteFriendCallbackProxy, UnknownData_VIL1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInviteFriendCallbackProxy, 0x00A0);
		}

		// class UJoinOculusSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__JoinOculusSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinOculusSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinOculusSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinOculusSessionCallbackProxy, UnknownData_LF9V, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinOculusSessionCallbackProxy, 0x0120);
		}

		// class AMenuInstrument : public AScramInstrument
		TEST_METHOD(Class__SportsScramble__MenuInstrument)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, ActivateTime, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DeactivateTime, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, BaseOffsetFromPivot, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, UnknownData_C4KJ, 0x0D44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, ScaleCurve, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, LaserBeam, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, LaserRoot, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, LaserDot, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DefaultColor, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, PulseColor, 0x0D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, PulseSpeed, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DotScaleDefault, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, PulseDotScaleRadius, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DefaultLaserPointerLength, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DefaultLaserDotDistance, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DotHitPointOffset, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, RaycastDistance, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, ScaleConversion, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, IsActive, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, UnknownData_TX20, 0x0D91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DotDistanceThreshold, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, DotSmoothTime, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, CurrentInteractable, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, useMenuPointer, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument, UnknownData_P4XI, 0x0DA9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuInstrument, 0x0DD0);
		}

		// class UMovingLaneAssist : public UBowlingLaneSpline
		TEST_METHOD(Class__SportsScramble__MovingLaneAssist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovingLaneAssist, UnknownData_8UVN, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovingLaneAssist, UnknownData_ND1Y, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovingLaneAssist, 0x06D0);
		}

		// class AMusicManager : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__MusicManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager, TrackA, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager, TrackB, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager, mpIncomingTrack, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager, mpOutgoingTrack, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager, UnknownData_WQEM, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMusicManager, 0x0380);
		}

		// class ANetworkMotionStateManager : public AActor
		TEST_METHOD(Class__SportsScramble__NetworkMotionStateManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetworkMotionStateManager, mSentStates, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetworkMotionStateManager, mTryStates, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetworkMotionStateManager, mReplicatedStates, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetworkMotionStateManager, UnknownData_2G1K, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANetworkMotionStateManager, 0x03A0);
		}

		// class APitchingAvatar : public ABaseballAvatar
		TEST_METHOD(Class__SportsScramble__PitchingAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APitchingAvatar, UnknownData_FQ2Z, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APitchingAvatar, 0x0410);
		}

		// class UPitchingAvatarAnimInstance : public UScramAvatarAnimInstance
		TEST_METHOD(Class__SportsScramble__PitchingAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitchingAvatarAnimInstance, DesiredState, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitchingAvatarAnimInstance, Handedness, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitchingAvatarAnimInstance, UnknownData_RWRG, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPitchingAvatarAnimInstance, 0x0450);
		}

		// class UPitchingPropInterface : public UInterface
		TEST_METHOD(Class__SportsScramble__PitchingPropInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPitchingPropInterface, 0x0028);
		}

		// class APlayByPlay : public AActor
		TEST_METHOD(Class__SportsScramble__PlayByPlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlay, UnknownData_V13G, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlay, mpPlayingAudio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlay, UnknownData_ZVBL, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlay, mpAudioComponents, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlay, UnknownData_RG9G, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayByPlay, 0x0390);
		}

		// class APlayByPlayBaseball : public APlayByPlay
		TEST_METHOD(Class__SportsScramble__PlayByPlayBaseball)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlayBaseball, PlayByPlays, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlayBaseball, UnknownData_CNSA, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayByPlayBaseball, 0x03A8);
		}

		// class ATennisBall : public AScramBall
		TEST_METHOD(Class__SportsScramble__TennisBall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, AllowForceOutOfPlay, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, mClientSpawnHasUpdate, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, UnknownData_6P8N, 0x0B22);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, mClientSpawnUpdate, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, UnknownData_7UI6, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, mpFutureBallHitterObjectToIgnore, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, UnknownData_NAE0, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, mpSender, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, mpTarget, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisBall, UnknownData_MX8C, 0x0DC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisBall, 0x0F10);
		}

		// class UTennisBoxComponent : public UBoxComponent
		TEST_METHOD(Class__SportsScramble__TennisBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, UnknownData_GPE7, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, UnknownData_3X8M, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, PhysicalMaterial, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, AllowHitSplineBallsDynamically, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, UnknownData_97WH, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, mFutureHit, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, UnknownData_VYDR, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, mBallHits, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisBoxComponent, UnknownData_V836, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisBoxComponent, 0x0630);
		}

		// class APlayByPlayTennis : public APlayByPlay
		TEST_METHOD(Class__SportsScramble__PlayByPlayTennis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayByPlayTennis, PlayByPlays, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayByPlayTennis, 0x0398);
		}

		// class AScramActorFollower : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramActorFollower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActorFollower, ActorToFollow, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActorFollower, RotateToVelocity, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramActorFollower, UnknownData_TNDA, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramActorFollower, 0x0358);
		}

		// class UScramActorInterface : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramActorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramActorInterface, 0x0028);
		}

		// class UScramBallAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__ScramBallAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, UnknownData_A8TF, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, LinearVelocity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, AngularVelocity, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, HasBounced, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, UnknownData_ZCOR, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, mpOwningActor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, mpSkeleton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, OwnerIsValid, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBallAnimInstance, UnknownData_B0G0, 0x0391);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBallAnimInstance, 0x03A0);
		}

		// class UScramBallHitter : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramBallHitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBallHitter, 0x0028);
		}

		// class AScramBallManager : public AActor
		TEST_METHOD(Class__SportsScramble__ScramBallManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallManager, maxBalls, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallManager, UnknownData_MUC8, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallManager, mBalls, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBallManager, mBallTriggers, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBallManager, 0x0350);
		}

		// class AScramBaseAI : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramBaseAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseAI, HeadTrackTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseAI, UnknownData_GB0X, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseAI, SpawnSound, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseAI, SpawnParticle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseAI, UnknownData_DEOZ, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseAI, 0x0368);
		}

		// class UScramBaseAIAnimNotify : public UAnimNotify
		TEST_METHOD(Class__SportsScramble__ScramBaseAIAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBaseAIAnimNotify, Socket, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBaseAIAnimNotify, 0x0040);
		}

		// class UScramBaseAIAnimNotifyState : public UAnimNotifyState
		TEST_METHOD(Class__SportsScramble__ScramBaseAIAnimNotifyState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBaseAIAnimNotifyState, 0x0030);
		}

		// class UScramBaseballAIAnimNotify : public UScramBaseAIAnimNotify
		TEST_METHOD(Class__SportsScramble__ScramBaseballAIAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBaseballAIAnimNotify, NotifyType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBaseballAIAnimNotify, UnknownData_1PKE, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBaseballAIAnimNotify, 0x0048);
		}

		// class UScramBaseballAIAnimNotifyState : public UScramBaseAIAnimNotifyState
		TEST_METHOD(Class__SportsScramble__ScramBaseballAIAnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBaseballAIAnimNotifyState, NotifyType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBaseballAIAnimNotifyState, UnknownData_M5EL, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBaseballAIAnimNotifyState, 0x0038);
		}

		// class AScramBaseballBatterAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBaseballBatterAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, SwingChance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ContactChance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ContactChancePitchSpeedMod, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ContactChancePitchSpinMod, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultMediumSpeedMultiplier, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultSlowSpeedMultiplier, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, WaitAfterSwings, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UnknownData_FU8O, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultRegionChancesUL, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultRegionChancesUR, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultRegionChancesLL, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultRegionChancesLR, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ResultRegionChancesBALL, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, LeftFieldAngles, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, CenterFieldAngles, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, RightFieldAngles, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, GroundBallAngles, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, LineDriveAngles, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, SweetSpotAngles, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, PopFlyAngles, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, SpeedRange, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, CriticalFractionRange, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, SwingHitTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, FreebieHitDelay, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UnknownData_8O54, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, ContactChanceVsEquipment, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, VerticalResultVsBall, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UseFastLoop, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UnknownData_FY0W, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, FastLoopIdle, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, FastLoopSwing, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, Bat, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, mpBall, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UnknownData_PBNR, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, mpSkeletalMesh, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, mpAnimInstance, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, UnknownData_JRLF, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballBatterAI, mSwungAtBalls, 0x0E68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseballBatterAI, 0x0E78);
		}

		// class AScramBaseballCatcherAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBaseballCatcherAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, CatchRadius, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveCatchTime, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, PostCatchGloveDelay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, PostCatchDelay, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveRecenterTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_X7DX, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, HandJoint, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, SkeletalMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveMeshComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, BallMeshComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, CatchPlaneRoot, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, ThrowPoint, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MittArrows, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MittArrowUpParameter, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MittArrowDownParameter, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MittArrowLeftParameter, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MittArrowRightParameter, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveInfluencer, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, ThrowFlightTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, HorizontalVarianceRange, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, VerticalVarianceRange, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DepthVarianceRange, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveModes, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_5RX1, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftMarginHorizontal, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftMarginTop, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftMarginBottom, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftFrequencyHorizontal, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftFrequencyVertical, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftStrikeTimeScale, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftBallTimeScale, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, DriftSmoothTime, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, StickDrivenSmoothTime, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, StickDrivenRecenterDelay, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, ScriptedGloveLeftRightFraction, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, ScriptedGloveUpDownFraction, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, ScriptedSmoothTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, PitchingTargetParameterCollection, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MaterialParameterGlovePos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MaterialParameterShadowSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveShadowSize, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_DJZB, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, MaterialParameterShadowIntensity, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, GloveShadowIntensity, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_DUU0, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mpBall, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_OC9L, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mNetAnimState, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mNetThrowSide, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_NX7X, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mpAnimInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_HO8A, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mDriftSignY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mDriftSignZ, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, UnknownData_LHSA, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballCatcherAI, mpPitchingTargetMaterialParameters, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseballCatcherAI, 0x0530);
		}

		// class AScramBaseballFielderAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBaseballFielderAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, MultiplayerMoveSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchRadius, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchStopRunningRadius, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchHeight, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchPrepTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchPauseTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchRetireOthersTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, CatchRetireOthersDistance, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, PauseBeforeReturnTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, FieldRange, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, InterceptingSteeringParameters, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, InterceptingSpeedPercentageIncrease, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, InterceptingSpeedMax, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, FieldingSteeringParameters, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, MultiplayerInterceptingSteeringParameters, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, ReturningSteeringParameters, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, TurnTime, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, MinRunSpeed, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, LookUpTime, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, DropChancePercentageVsMovement, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, DropChancePercentageVsSpeed, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, DropChanceMax, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, DropBallSpeed, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, OutfieldMovementScale, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, OutfieldMovementDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, AlwaysDropBall, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_BRL8, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, BatterRunAdvantageForNoFumble, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, DebugMe, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, IsOutfielder, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_Y3BC, 0x0436);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, OutfieldMovementRange, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_D97N, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mHasMoveTarget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_MDO9, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mMoveTarget, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mStandStillRefCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mState, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_HVEP, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mDesiredLookUpAngle, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mUseFieldingSteeringParams, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_A7H0, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mInterceptingSpeedMultiplier, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_16WW, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mpAnimInstance, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_5XHA, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mpDroppedBall, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, mIgnoredBalls, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballFielderAI, UnknownData_TJ2E, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseballFielderAI, 0x04F0);
		}

		// class AScramBaseballPitcherAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBaseballPitcherAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ScrambleMods, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, DelayBeforePitchTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, HoldTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, BallRegionWidth, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ChanceBallUp, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ChanceBallDown, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ChanceBallLeft, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ChanceBallRight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, CatchLocation, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, BowlingThrowParameters, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, LeftHandBone, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, RightHandBone, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, NumScrambleBallsToChoose, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, ShowScrambleBalls, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, UnknownData_HPGQ, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, HeadTrackPitchClamp, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, HeadTrackYawClamp, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, PercentageChanceToWinAScrambleBall, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, PercentageChanceThatBallIsImbued, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, PercentageChanceToChooseAScrambleBall, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, UnknownData_273D, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, SkeletalMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, TargetRoot, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, OverrideBall, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, UnknownData_LK8G, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, mpBall, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, mpAnimInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, UnknownData_NBG1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, mSpawnableBalls, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballPitcherAI, UnknownData_PLAP, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseballPitcherAI, 0x0688);
		}

		// class AScramBaseballRunnerAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBaseballRunnerAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, MoveSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, TurnTime, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, DespawnAnticipationTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, DespawnAnimationDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, UnknownData_2GOO, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, mDestinationBase, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, mSnapToDestination, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, UnknownData_9COZ, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, mpAnimInstance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBaseballRunnerAI, UnknownData_RY4Q, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBaseballRunnerAI, 0x03C0);
		}

		// class AScrambleTarget : public AScramBallTrigger
		TEST_METHOD(Class__SportsScramble__ScrambleTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScrambleTarget, 0x0420);
		}

		// class UScramBounceLighting : public UActorComponent
		TEST_METHOD(Class__SportsScramble__ScramBounceLighting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, LightingGroup, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, BounceColorParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, UpdateEveryFrame, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, UnknownData_3Q54, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, InterpolateTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, mpMesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, mpSettings, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBounceLighting, UnknownData_RAE8, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBounceLighting, 0x0128);
		}

		// class ATextureSamplerSettings : public AActor
		TEST_METHOD(Class__SportsScramble__TextureSamplerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, Texture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, XCenter, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, XScale, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, YCenter, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, YScale, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextureSamplerSettings, UnknownData_YAY8, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextureSamplerSettings, 0x0360);
		}

		// class AScramBounceLightingSettings : public ATextureSamplerSettings
		TEST_METHOD(Class__SportsScramble__ScramBounceLightingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBounceLightingSettings, LightingGroup, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBounceLightingSettings, 0x0368);
		}

		// class AScramBowlingAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramBowlingAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MovingLaneWidthRange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, HoopsLaneTimeEpsilon, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, HoopsLaneTimeCorrection, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, ThrowParameters, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, LeftRightThrowOffset, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MoveAndTurnTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MinBallCountToChooseFrom, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, ChooseOffset, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, RollOffset, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, PickUpTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, DebugBallType, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, Difficulty, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, UnknownData_U18B, 0x03BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, RateOfThrow, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, RateOfThrowMatchTimeLeftScalar, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, RateOfThrowScoreDifferentialScalar, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, GetABallPhaseMaxTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MinTimeToDetectGutterball, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MaxTimeToDetectStrike, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, ChanceToChooseGreatBall, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, ChanceToChooseBadBall, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, EstimatedThrowEventTime, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, MaxTimeToWaitForThrowWindow, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, UnknownData_A1R0, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, SkeletalMesh, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, UnknownData_SEWW, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, mpBall, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, mpAnimInstance, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, mPins, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramBowlingAI, UnknownData_PSM6, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramBowlingAI, 0x0540);
		}

		// class UScramBowlingAIAnimNotify : public UScramBaseAIAnimNotify
		TEST_METHOD(Class__SportsScramble__ScramBowlingAIAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBowlingAIAnimNotify, NotifyType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBowlingAIAnimNotify, UnknownData_GL0N, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBowlingAIAnimNotify, 0x0048);
		}

		// class UScramBowlingAIAnimNotifyState : public UScramBaseAIAnimNotifyState
		TEST_METHOD(Class__SportsScramble__ScramBowlingAIAnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBowlingAIAnimNotifyState, NotifyType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBowlingAIAnimNotifyState, UnknownData_HG82, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBowlingAIAnimNotifyState, 0x0038);
		}

		// class UScramBoxInteractableComponent : public UBoxComponent
		TEST_METHOD(Class__SportsScramble__ScramBoxInteractableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBoxInteractableComponent, OnStartPointingAt, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBoxInteractableComponent, OnStopPointingAt, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBoxInteractableComponent, OnActivate, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBoxInteractableComponent, OnDeactivate, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramBoxInteractableComponent, UnknownData_BQ6R, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramBoxInteractableComponent, 0x05D0);
		}

		// class UScramCableComponent : public UCableComponent
		TEST_METHOD(Class__SportsScramble__ScramCableComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramCableComponent, 0x0610);
		}

		// class UScramCameraComponent : public UCameraComponent
		TEST_METHOD(Class__SportsScramble__ScramCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramCameraComponent, UnknownData_K4BQ, 0x0790);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramCameraComponent, 0x07A0);
		}

		// class AScramCameraCover : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramCameraCover)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, FlashMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, FadeOutMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, TrophyVignette, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, GameInviteVignette, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, mVignetteQueue, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover, UnknownData_OSSA, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramCameraCover, 0x0398);
		}

		// class AScramTrajectoryInfluencerActor : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramTrajectoryInfluencerActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerActor, UnknownData_3GAU, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerActor, Order, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerActor, MinimumValidScale, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerActor, InfluencerEnabled, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrajectoryInfluencerActor, UnknownData_59PX, 0x0361);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrajectoryInfluencerActor, 0x0368);
		}

		// class AScramCourt : public AScramTrajectoryInfluencerActor
		TEST_METHOD(Class__SportsScramble__ScramCourt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, NetClearInfluencer, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, SinglesInBoundsInfluencerFrontOfNet, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, SinglesInBoundsInfluencerBackOfNet, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, DoublesInBoundsInfluencerFrontOfNet, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, DoublesInBoundsInfluencerBackOfNet, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, FloorMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, matchType, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, UnknownData_WKPN, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, FullCourtLength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, SinglesCourtWidth, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, DoublesCourtWidth, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, ServiceLineDistance, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCourt, PlayAreaMargin, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramCourt, 0x03B0);
		}

		// class UScramDataSingleton : public UObject
		TEST_METHOD(Class__SportsScramble__ScramDataSingleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDataSingleton, TennisData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDataSingleton, BaseballData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDataSingleton, BowlingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDataSingleton, DodgeballData, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramDataSingleton, 0x0048);
		}

		// class AScramDodgeballAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramDodgeballAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballAI, CollisionComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballAI, UnknownData_76MP, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramDodgeballAI, 0x0378);
		}

		// class UScramDodgeballAIAnimNotify : public UScramBaseAIAnimNotify
		TEST_METHOD(Class__SportsScramble__ScramDodgeballAIAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDodgeballAIAnimNotify, NotifyType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDodgeballAIAnimNotify, UnknownData_RYGY, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramDodgeballAIAnimNotify, 0x0048);
		}

		// class UScramDodgeballAIAnimNotifyState : public UScramBaseAIAnimNotifyState
		TEST_METHOD(Class__SportsScramble__ScramDodgeballAIAnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDodgeballAIAnimNotifyState, NotifyType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramDodgeballAIAnimNotifyState, UnknownData_GSJK, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramDodgeballAIAnimNotifyState, 0x0038);
		}

		// class AScramDodgeballCaptainAI : public AScramDodgeballAI
		TEST_METHOD(Class__SportsScramble__ScramDodgeballCaptainAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballCaptainAI, UnknownData_3IPV, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballCaptainAI, mpAnimInstance, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramDodgeballCaptainAI, 0x0388);
		}

		// class AScramDodgeballPawnAI : public AScramDodgeballAI
		TEST_METHOD(Class__SportsScramble__ScramDodgeballPawnAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, FetchSpeed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, ThrowSpeed, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, PassSpeed, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, MinimumPassDelay, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, HandSocket, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, HandSocketOffset, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, DelayBeforeThrowing, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, DelayAfterPickup, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, DelayAfterThrow, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, PassUpContribution, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, WanderRadius, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, WanderTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, WanderSpeed, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, UnknownData_S6RI, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, mpAnimInstance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, mpGrabbable, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramDodgeballPawnAI, UnknownData_2RX9, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramDodgeballPawnAI, 0x0418);
		}

		// class AScramEquipmentSet : public AScramPrimitiveGrabbable
		TEST_METHOD(Class__SportsScramble__ScramEquipmentSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramEquipmentSet, DominantHandEquipment, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramEquipmentSet, OffHandEquipment, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramEquipmentSet, UnknownData_AETJ, 0x0A08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramEquipmentSet, 0x0A10);
		}

		// class UScramEventBasePayload : public UObject
		TEST_METHOD(Class__SportsScramble__ScramEventBasePayload)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventBasePayload, 0x0028);
		}

		// class UScramEventObjectPayload : public UScramEventBasePayload
		TEST_METHOD(Class__SportsScramble__ScramEventObjectPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventObjectPayload, ObjectParameter, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventObjectPayload, 0x0030);
		}

		// class UScramEventCollisionPayload : public UScramEventBasePayload
		TEST_METHOD(Class__SportsScramble__ScramEventCollisionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventCollisionPayload, OtherActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventCollisionPayload, HitLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventCollisionPayload, HitNormal, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventCollisionPayload, 0x0048);
		}

		// class UScramEventTennisEventPayload : public UScramEventBasePayload
		TEST_METHOD(Class__SportsScramble__ScramEventTennisEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventTennisEventPayload, PlayerIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventTennisEventPayload, TennisEventType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventTennisEventPayload, UnknownData_BBSL, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventTennisEventPayload, 0x0030);
		}

		// class UScramEventBaseballEventPayload : public UScramEventBasePayload
		TEST_METHOD(Class__SportsScramble__ScramEventBaseballEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBaseballEventPayload, PlayerIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBaseballEventPayload, BaseballEventType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBaseballEventPayload, UnknownData_R5J7, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBaseballEventPayload, Ball, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventBaseballEventPayload, 0x0038);
		}

		// class UScramEventBowlingEventPayload : public UScramEventBasePayload
		TEST_METHOD(Class__SportsScramble__ScramEventBowlingEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBowlingEventPayload, PlayerIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBowlingEventPayload, BowlingEventType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBowlingEventPayload, UnknownData_WK3L, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramEventBowlingEventPayload, BallActor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramEventBowlingEventPayload, 0x0038);
		}

		// class AScramEventManager : public AActor
		TEST_METHOD(Class__SportsScramble__ScramEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramEventManager, UnknownData_QV4K, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramEventManager, 0x0388);
		}

		// class UScramGameInstance : public UGameInstance
		TEST_METHOD(Class__SportsScramble__ScramGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, EditorPlatform, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterAiDifficulty, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterScrambleBats, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterScrambleBalls, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterInnings, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterFreebiesEnabled, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_9462, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterStrikeoutCount, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterWalkCount, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballFilterFreebieCount, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, AllowClientBeginPlay, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_JXET, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, ApplicationWillEnterBackground, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, ApplicationHasEnteredForeground, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, ApplicationWillDeactivate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, ApplicationHasReactivated, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, ApplicationWillTerminate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mSportPreferences, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_I4YH, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, SavedSportState, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, GameInviteMaxPingCount, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, BaseballLocalPlayerIsHomeTeam, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_7KBC, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, OnPendingGameInvitesUpdated, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, OnGameInvitePing, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, OnMatchStart, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, OnNetworkGameFailure, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, OnPendingGameFailure, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, InputFocusRegainDelay, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_QR1D, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mShelfActors, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mpShelfWorld, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mpSaveData, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_OKPL, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mAchievementQueueLocal, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, mAchievementQueueOculus, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance, UnknownData_XNE7, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramGameInstance, 0x0370);
		}

		// class AScramGameMode : public AGameModeBase
		TEST_METHOD(Class__SportsScramble__ScramGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode, SeamlessTravelActors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode, UnknownData_3HMW, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode, mReadyPlayers, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGameMode, 0x0418);
		}

		// class AScramGameState : public AGameStateBase
		TEST_METHOD(Class__SportsScramble__ScramGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, OnPingStatusChange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, activeBallClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, Sport, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, UnknownData_97RF, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, PingSmoothing, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, PingThreshold, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, UnknownData_ZWAQ, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, PauseCapsuleBPClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, TrophyManagerBPClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, MusicManagerClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, PauseCapsule, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, mPauseHiddenComponents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, mPauseHiddenInstancedComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, UnknownData_7IYM, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, mAllHiddenComponents, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, mAllHiddenInstancedComponents, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState, UnknownData_5JZO, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGameState, 0x0410);
		}

		// class UScramGrabbable : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramGrabbable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramGrabbable, 0x0028);
		}

		// class UScramGrabber : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramGrabber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramGrabber, 0x0028);
		}

		// class AScramGripSet : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramGripSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGripSet, ForehandGrip, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGripSet, BackhandGrip, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGripSet, OverheadGrip, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGripSet, UnderhandGrip, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGripSet, 0x0370);
		}

		// class AScramHandshakeActor : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramHandshakeActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramHandshakeActor, 0x0348);
		}

		// class AScramHitManager : public AActor
		TEST_METHOD(Class__SportsScramble__ScramHitManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramHitManager, MaxBallPhysXSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramHitManager, UnknownData_64M4, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramHitManager, 0x03A0);
		}

		// class UScramHittableActor : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramHittableActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramHittableActor, 0x0028);
		}

		// class UScramHullVisibility : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__ScramHullVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramHullVisibility, CullMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramHullVisibility, DebugRenderOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramHullVisibility, Verts, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramHullVisibility, VisualizeClipping, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramHullVisibility, UnknownData_ZIR7, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramHullVisibility, 0x0280);
		}

		// class UScramInstrumentAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__ScramInstrumentAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, UnknownData_VGHD, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, MovementDirection, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, InstrumentSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, InstrumentMaxSpeed, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, PhysicsBlendWeight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, PhysicsBlendLimits, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, BlendSmoothingTime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, mpOwningActor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, mpSkeleton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, OwnerIsValid, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, UnknownData_JIZ3, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, WorldToLocalForward, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, WorldToLocalRight, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, WorldToLocalUp, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramInstrumentAnimInstance, UnknownData_KAFA, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramInstrumentAnimInstance, 0x03C0);
		}

		// class AScramInviteManager : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramInviteManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInviteManager, OnShellInviteAccepted, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramInviteManager, UnknownData_25GF, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramInviteManager, 0x03D8);
		}

		// class AScramKeyboard : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramKeyboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramKeyboard, LeftInteractor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramKeyboard, RightInteractor, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramKeyboard, 0x0358);
		}

		// class AScramLauncher : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, LaunchPoint, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, LaunchTarget, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, BallClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, ScrambleMods, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, UseSpeed, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, UnknownData_OJX1, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, TravelSpeed, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, TravelTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, LaunchAngularVelocity, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, BounceAngularVelocity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, SpinStrengthCompensation, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, FiringMode, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, EnableSplineCorrection, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, UnknownData_M32Y, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, TargetRegion, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, InsertBounce, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, CounteractDamping, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, LaunchChargeShot, 0x03EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, UnknownData_OXGS, 0x03EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, DebugSimulationTime, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, EnableTennisAvoidCenter, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, ForceAvoidCenter, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, TennisShotType, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, Handedness, 0x03F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, BowlingThrowParameters, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, LaunchedBallsShouldHitBallHitters, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, IsScrambleTarget, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramLauncher, UnknownData_9G2T, 0x041A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramLauncher, 0x0480);
		}

		// class UScramLookAtActivator : public USceneComponent
		TEST_METHOD(Class__SportsScramble__ScramLookAtActivator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, UnknownData_U43Q, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, DeactivationAngle, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, ActivationAnglePitch, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, DeactivationAnglePitch, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, ActivationDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, DeactivationDelay, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, GlancingAt, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, GlancingAway, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, LookingAt, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, LookingAway, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramLookAtActivator, UnknownData_7GL9, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramLookAtActivator, 0x02A0);
		}

		// class AScramMeshShadowSettings : public ATextureSamplerSettings
		TEST_METHOD(Class__SportsScramble__ScramMeshShadowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramMeshShadowSettings, ShadowGroup, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramMeshShadowSettings, 0x0368);
		}

		// class UScramNetworkHelperComponent : public UScramSceneComponent
		TEST_METHOD(Class__SportsScramble__ScramNetworkHelperComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramNetworkHelperComponent, 0x0240);
		}

		// class AScramPauseCapsule : public AActor
		TEST_METHOD(Class__SportsScramble__ScramPauseCapsule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, MinimumUsableRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, AnchorPullDistance, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, BlackPulseFraction, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, IsInTransition, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, UnknownData_CNWL, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, OnPauseCapsuleOn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseCapsule, OnPauseCapsuleRemoved, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPauseCapsule, 0x0358);
		}

		// class AScramPauseManager : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramPauseManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPauseManager, UnknownData_57R9, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPauseManager, 0x0358);
		}

		// class AScramPlayer : public APawn
		TEST_METHOD(Class__SportsScramble__ScramPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_LGI4, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, OnPlayerInitComplete, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, OnAvatarLookChanged, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, PlayerRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, LeftHandClass, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RightHandClass, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, AvatarClassPerSport, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, LeftHandPossessorClass, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RightHandPossessorClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, BoundaryClass, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, CameraCoverClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RemoteTransformSmoothTime, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RestrictedBuffer, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RestrictedFadeBuffer, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnPointRadius, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnAreaFrontMargin, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnAreaBackMargin, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnAreaLateralMargin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnAreaMinimumWidth, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, MaxArmLength, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, CheckPermittedArea, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_N8TM, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, LeftHand, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, RightHand, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, Avatar, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, Boundary, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, VR_Controller_HMD, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, FirstPersonCamera, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, PlayerRegionRoot, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, PlayerFloorRegionRoot, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, HandOffsetScale, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, HandScale, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, HeadPlusHandRadius, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ArmPivotToHead, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ShoulderDropHeight, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, OutOfBoundaryTimeLimit, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, DefaultNetVisible, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_E5DF, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, NetworkMotionStateRate, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, OnPauseRequested, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_99E6, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, OnAvatarSelected, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, DebugDrawMode, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_C3SC, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_SM6K, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, ReturnIndicator, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mpVoiceChat, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mpCameraCover, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_1FUV, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mPreferences, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mRestoringGame, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_XMW7, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mClientTransforms, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_6POL, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mClientPlayAreaDiagonal, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_O3AS, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mRepRemoteTennisReturn, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_THNR, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mNetVisible, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_HT4M, 0x094D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mClientPausedPerReason, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, UnknownData_HCDL, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer, mpNetworkMotionStateManager, 0x09A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayer, 0x09B0);
		}

		// class AScramPlayerBoundary : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramPlayerBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugMinimumPlayArea, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugOverrideLocalPlayBox, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, UnknownData_J7DH, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugLocalPlayBoxOverride, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, OverridePlayArea, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, UnknownData_N8Y1, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, PlayAreaWidthOverride, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, PlayAreaLengthOverride, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, BaselineMarginOverride, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardLineVisible, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, UnknownData_IFIU, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardLineHeight, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardLineBuffer, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardEdgeIncrement, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardEdgeMeshes, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugHazardScaleEnabled, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, UnknownData_V2RI, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugHazardScaleRateX, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugHazardScaleRateY, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, DebugHazardScaleCap, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardCornerTemplate, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, HazardEdgeTemplate, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, mpPlayer, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, mHazardCorners, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, mHazardEdges, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary, UnknownData_8ODH, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerBoundary, 0x0418);
		}

		// class AScramPlayerCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__SportsScramble__ScramPlayerCameraManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerCameraManager, 0x2470);
		}

		// class AScramPlayerController : public APlayerController
		TEST_METHOD(Class__SportsScramble__ScramPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, SeamlessTravelActors, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, HeartbeatSendInterval, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, HeartbeatTimeout, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, OnHeartbeatConnected, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, OnHeartbeatDisconnected, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, OnHeartbeatSustained, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, mLocalPlayerRestarted, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, UnknownData_LJ0O, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, NetworkHelper, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController, UnknownData_V4SH, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerController, 0x06F0);
		}

		// class AScramPlayerHand : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramPlayerHand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnknownData_0ASA, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, GrabberHoldPoint, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, GrabberHoldDirection, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, ProxyModel, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, Handedness, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnknownData_462M, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, GrabRadius, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, StealRadius, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, MinBallInfluenceSpeed, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, HighlightedUIObject, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, ForehandAngle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, BackhandAngle, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, OverheadAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnderhandAngle, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, GrabHaptics, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, HitHaptics, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, ImpulseHapticExponent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, MassHapticExponent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, MinHapticFeltImpulse, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, MaxHapticFeltImpulse, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, HitHapticMultiplier, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnknownData_FB5B, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, SwapIndicatorClass, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpPlayerController, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpPlayer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpPossessor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpSwapIndicator, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpClientSpawnedActor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpClientHasCurrentGrabbableActor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnknownData_S99O, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, mpClientCurrentGrabbableActor, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand, UnknownData_3T78, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHand, 0x0438);
		}

		// class AScramPlayerHandPossessor : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramPlayerHandPossessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, MotionController, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, RightShoulderOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, ForearmLength, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, UpperArmLengthRange, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, MinElbowAngle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, InferenceMode, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, DeadReckoningVelocityDecayEnabled, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, UnknownData_OGW4, 0x036E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, DeadReckoningVelocityDecayTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, DeadReckoningAccelerationDamping, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, SteamRotationAdjustment, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, UnknownData_5ABO, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, mpPlayer, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, mpHand, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHandPossessor, UnknownData_DMX0, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHandPossessor, 0x03E0);
		}

		// class AScramPlayerTrigger : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramPlayerTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerTrigger, Width, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerTrigger, Length, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerTrigger, PresentPlayers, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerTrigger, 0x0368);
		}

		// class AScramPlayerServeTrigger : public AScramPlayerTrigger
		TEST_METHOD(Class__SportsScramble__ScramPlayerServeTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, UnknownData_WV1T, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, SpawnOffset, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, AcceptanceAngle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, AcceptanceSpeed, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, DilationDuration, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, ApexTimeScale, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, ServeHeight, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, ServeSeparation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, ServeSeparationAngle, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, RadialMagnusCompensation, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, LaunchAngularVelocity, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, ServeSpeedFaith, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, MinServeSpeed, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, MaxServeSpeed, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, UnknownData_NXE4, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, mpBall, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerServeTrigger, mpClientBall, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerServeTrigger, 0x0420);
		}

		// class AScramTrophy : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramTrophy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, TrophyName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, TrophyDataTable, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, LookAtTimeThreshold, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, LookAtAngleThreshold, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, MessageStayTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, DisplayOffsetTowardPlayer, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, DisplayMessageScale, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, IsCheckingPlayerLookAtMe, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, UnknownData_VGMP, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, TrophyData, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, Player, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, TrophyMesh, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophy, UnknownData_KGJ7, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrophy, 0x0460);
		}

		// class AScramTrophyGlove : public AScramGlove
		TEST_METHOD(Class__SportsScramble__ScramTrophyGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, CurrentGrabbedTrophy, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, CurrentPointingAtTrophy, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, LaserPoint, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, LaserRoot, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, LaserDot, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, DefaultColor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, PulseColor, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, PulseSpeed, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, DotScaleDefault, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, PulseDotScaleRadius, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, DotHitPointOffset, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, DefaultLaserPointerLength, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, DefaultLaserDotDistance, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, TrophyRotateSpeed, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, RaycastDistance, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, ScaleConversion, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, IsActive, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, IsGrabEnabled, 0x0A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyGlove, UnknownData_3DXK, 0x0A8E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrophyGlove, 0x0AC0);
		}

		// class AScramTrophyManager : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramTrophyManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager, TrophyTable, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager, TrophiesEnabled, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager, UnknownData_ZXHO, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager, TrophyEarnedIgnoreTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager, UnknownData_E84A, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrophyManager, 0x03B0);
		}

		// class UScramUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SportsScramble__ScramUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramUtils, 0x0028);
		}

		// class AScramVoiceChat : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramVoiceChat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramVoiceChat, UnknownData_NZUA, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramVoiceChat, 0x0378);
		}

		// class UScramWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__SportsScramble__ScramWidgetComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramWidgetComponent, 0x06B0);
		}

		// class ASkiBallTrigger : public ABowlingBallTrigger
		TEST_METHOD(Class__SportsScramble__SkiBallTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkiBallTrigger, 0x0420);
		}

		// class USpectateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__SpectateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectateSessionCallbackProxy, UnknownData_MBCI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectateSessionCallbackProxy, 0x0128);
		}

		// class USplineMoverComponent : public UActorComponent
		TEST_METHOD(Class__SportsScramble__SplineMoverComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, OnReachedEnd, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, UnknownData_08BR, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, MovementMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, RotateToSpline, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, paused, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, ShouldLoop, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, TopSpeed, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, Acceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, UnknownData_3ZOQ, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, mpSplineComponent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, mpSceneComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMoverComponent, UnknownData_1GIW, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMoverComponent, 0x0148);
		}

		// class UStartOculusMatchmakingCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__StartOculusMatchmakingCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, OnSuccessHost, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, OnSuccessClient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, OnTimeout, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, OnCancel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartOculusMatchmakingCallbackProxy, UnknownData_0U9S, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartOculusMatchmakingCallbackProxy, 0x0100);
		}

		// class ASwapIndicator : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__SwapIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, SwapCollar, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, SwapIcon, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, InitialTime, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, ConfirmTime, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, GlowLerpParameter, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, GlowColorParameter, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, UnknownData_DF17, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, LeftHandVisuals, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, RightHandVisuals, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, mpHand, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, mpSwapActor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, mpOriginalMesh, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, mpOriginalMaterials, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, mpSwapMaterials, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator, UnknownData_OIJA, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwapIndicator, 0x05D0);
		}

		// class AScramReturnTarget : public AScramTarget
		TEST_METHOD(Class__SportsScramble__ScramReturnTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, MinIncomingSpeed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, OutgoingSpeedRange, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, CurveWidth, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, CurveMaxDegrees, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, PlayerRegion, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramReturnTarget, UnknownData_KOBL, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramReturnTarget, 0x03C0);
		}

		// class UScramSaveData : public USaveGame
		TEST_METHOD(Class__SportsScramble__ScramSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, LocalizationCulture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, TrophyCompletion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, TrainingProgress, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, HighScores, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, NamedValues, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, TutorialCompleted, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, UserSettings, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, PlayerPreferences, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, UnknownData_2EHZ, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, mSlotName, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, mUserIndex, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramSaveData, UnknownData_MS86, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramSaveData, 0x01A0);
		}

		// class UScramSceneComponentInterface : public UInterface
		TEST_METHOD(Class__SportsScramble__ScramSceneComponentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramSceneComponentInterface, 0x0028);
		}

		// class AScramSpectatorPawn : public ASpectatorPawn
		TEST_METHOD(Class__SportsScramble__ScramSpectatorPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn, NetworkHelper, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSpectatorPawn, 0x03B8);
		}

		// class AScramSportManagerBase : public AScramActor
		TEST_METHOD(Class__SportsScramble__ScramSportManagerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, LocalHumanCanBePlayer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, RemoteHumanCanBePlayer, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, SaveSportStateInSingleplayer, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, SaveSportStateInMultiplayer, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, UnknownData_D2XS, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, mpPlayers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, mpRecentSportState, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBase, UnknownData_8ACU, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerBase, 0x0398);
		}

		// class AScramSportManagerBaseball : public AScramSportManagerBase
		TEST_METHOD(Class__SportsScramble__ScramSportManagerBaseball)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitchLookAtTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, CatcherThrowLookAtTime, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitchLookAtAngle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, TimeBeforeDeletingBall, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, OverrideBattingSkill, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, OverrideSkillLevel, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_EWF2, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, BallClass, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, BallScrambleProperties, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, RunnerClass, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, OutfieldCenter, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, OutfieldEdge, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, OutfieldLocus, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, DoubleTripleMarkerPos, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitcherPos, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, InfieldEdge, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, RunnerSpawn, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, FirstBase, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, SecondBase, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, ThirdBase, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, HomePlate, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, InnerFoul, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, InnerFoulSpeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, HomePlateBox, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, RunnerOnFirst, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, RunnerOnSecond, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, RunnerOnThird, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, IsLocalPlayerBatting, 0x047B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, InstrumentDamageEnabled, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitcherScrambleEnabled, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_BX6I, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, BallsCalledInARow, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, WalksAndFreebiesEnabled, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_CT2D, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, NumBallsForFreebie, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, NumBallsForWalk, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, MaxFieldedBalls, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, FenceMargin, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, BallScrambleDisplay, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitchingRegionAngle, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitchingMoundExclusionRadius, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, MaxInvalidTime, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, GroundKillDelay, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, PitcherAvatar, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, BatterAvatar, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, FieldCollisionTag, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, ScrambledBalls, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mpStrikeZone, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mGameRunning, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_M54M, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mpRunnersAtBase, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_TEU2, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mScrambleBallProperties, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mpBallScrambleDisplay, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_38MG, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, mTracker, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball, UnknownData_XTH2, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerBaseball, 0x06C0);
		}

		// class AScramSportManagerBowling : public AScramSportManagerBase
		TEST_METHOD(Class__SportsScramble__ScramSportManagerBowling)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerBowling, 0x0398);
		}

		// class AScramSportManagerDodgeball : public AScramSportManagerBase
		TEST_METHOD(Class__SportsScramble__ScramSportManagerDodgeball)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, Team1Channel, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, Team2Channel, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, BallChannel, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, UnknownData_BMDT, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, BallClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, RacketClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, PlayerHeadRadius, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, PlayerVsBallRestitution, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, PlayerHeadSpeedMultiplier, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, UnknownData_OZWW, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, HitHaptic, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, DamageFlashDuration, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, DamageFlashIntensity, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, UnknownData_8JHR, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, mThrownBalls, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerDodgeball, UnknownData_FDGA, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerDodgeball, 0x0448);
		}

		// class AScramSportManagerTennis : public AScramSportManagerBase
		TEST_METHOD(Class__SportsScramble__ScramSportManagerTennis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, WinMargin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, PointsToWinGame, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, GameWinMargin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, GamesToWinMatch, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, ServeLookAtTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, ServeLookAtAngle, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, LineThicknessForDustPuff, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_L0HO, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, DustPuff, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, EnableBadmintonRules, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_LZXU, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, MinShotsForLongRally, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, ShouldSwitchServeDuringGame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_UIVO, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, NumPointsBeforeSwitchingServe, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, BallCleanupDelay, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, Player2ServesFirst, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_SJEC, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mInPlayBallInfo, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mRepInPlayBallInfo, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mSentInitialServeEvent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mRallyStage, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_IVDK, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mRallyShotCount, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mBallHitTheNet, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_FLM0, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mServer, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mSetScore, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, mGameScore, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis, UnknownData_W9BY, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerTennis, 0x0470);
		}

		// class AScramStrikeZone : public AScramSceneComponentActor
		TEST_METHOD(Class__SportsScramble__ScramStrikeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, UnknownData_1ZGZ, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, FrontRegion, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, BackRegion, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, BallRegion, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, FrontRoot, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, BackRoot, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, ThrowInfluencer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, StrikeZonePitch, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramStrikeZone, StrikeZoneHit, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramStrikeZone, 0x0480);
		}

		// class AScramTennisAI : public AScramBaseAI
		TEST_METHOD(Class__SportsScramble__ScramTennisAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, FirstServe, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, SecondServe, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, FirstServeReturn, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, SecondServeReturn, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RallyShot, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, HitSoundPtr, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RacquetPtr, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, BallClass, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RacquetMesh, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, DelayBeforeRecentering, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, OvershootTime, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RecenterSpeed, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RecenterChance, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RecenterForServeSpeed, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, RecenterForReceiveServeSpeed, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MinBallHeightAtPlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxBallHeightAtPlayer, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, AvoidPlayerDistance, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ServeTossHeight, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ServeHitHeight, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, TimeAtCenterToResetMoveDistance, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, SwingRadius, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxHitHeight, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, IdealHitHeight, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MinimumOutDistance, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, FuzzyIn, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxOffCourtDistance, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxHitRadius, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxSwingRadius, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ServePositionOffset, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, HitPercentageDecayPerRallyShot, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, HitPercentageFloor, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, UnknownData_X82V, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, WinReactions, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, LoseReactions, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, TripChanceVsRallyLength, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ScrambleMods, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ChargedSliceSpeedMultiplier, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ChargedFlatSpeedMultiplier, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, LobSpeedMultiplier, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, PositiveScrambleTargetHitPercentage, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, NeutralScrambleTargetHitPercentage, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxHorizontalAngleForScrambleTarget, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, MaxVerticalAngleForScrambleTarget, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, PrepSwingTime, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, UnprepSwingTime, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, NetIsRaised, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, UnknownData_IXZ9, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ScrambleTargetAngleForMaxSpin, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, LobDistanceFromBaseline, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, ShotSkill, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, UnknownData_OVKS, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, mpServingBall, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, mpMissedBall, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, UnknownData_ON4F, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, mpAnimInstance, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI, mpInterceptingBall, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTennisAI, 0x0740);
		}

		// class UScramTennisAIAnimNotify : public UScramBaseAIAnimNotify
		TEST_METHOD(Class__SportsScramble__ScramTennisAIAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAIAnimNotify, NotifyType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAIAnimNotify, UnknownData_TKDO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTennisAIAnimNotify, 0x0048);
		}

		// class UScramTennisAIAnimNotifyState : public UScramBaseAIAnimNotifyState
		TEST_METHOD(Class__SportsScramble__ScramTennisAIAnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAIAnimNotifyState, NotifyType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAIAnimNotifyState, UnknownData_J5NT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTennisAIAnimNotifyState, 0x0038);
		}

		// class UScramTimeLineComponent : public UActorComponent
		TEST_METHOD(Class__SportsScramble__ScramTimeLineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_AU9W, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, PlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_U3FK, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, PositionCurve, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, PositionMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_83CR, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, RotationCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, RotationMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_HG39, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, ScaleCurve, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, ScaleMode, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, PlayMode, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_S010, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, OnFinished, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, UnknownData_8QBU, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTimeLineComponent, mpTargetComponent, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTimeLineComponent, 0x0158);
		}

		// class UTennisAIAnimInstance : public UAnimInstance
		TEST_METHOD(Class__SportsScramble__TennisAIAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, UnknownData_7XAV, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, LocomotionPlayRate, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, SwingPlayRate, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, HeadTrackRotation, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, DesiredState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, UnknownData_ZBGV, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, Reaction, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, SwingResult, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, MoveDirection, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAIAnimInstance, UnknownData_VGHV, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisAIAnimInstance, 0x0390);
		}

		// class ATennisAvatar : public AScramAvatar
		TEST_METHOD(Class__SportsScramble__TennisAvatar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, RecenteringSmoothTime, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, InterceptingSmoothTimeMultiplier, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, FollowThroughDuration, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, ServeBallDetectionRadius, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, UnknownData_ABOY, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, mpTennisAnimInstance, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, UnknownData_8RCS, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, mpServeBall, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar, UnknownData_7ITI, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAvatar, 0x0410);
		}

		// class UTennisAvatarAnimInstance : public UScramAvatarAnimInstance
		TEST_METHOD(Class__SportsScramble__TennisAvatarAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatarAnimInstance, DesiredState, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatarAnimInstance, Handedness, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatarAnimInstance, UnknownData_XTCA, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisAvatarAnimInstance, 0x0450);
		}

		// class UTennisGlobalDataAsset : public UDataAsset
		TEST_METHOD(Class__SportsScramble__TennisGlobalDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisGlobalDataAsset, Data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisGlobalDataAsset, 0x0428);
		}

		// class ATennisInstrument : public AScramInstrument
		TEST_METHOD(Class__SportsScramble__TennisInstrument)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisInstrument, UnknownData_ZASR, 0x0D30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisInstrument, 0x0E90);
		}

		// class UTennisState : public USportState
		TEST_METHOD(Class__SportsScramble__TennisState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, RallyStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, UnknownData_L7TV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, SetScore, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, GameScore, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, Server, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, UnknownData_V5NV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, Ball, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, player1Instrument, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, player2Instrument, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisState, activeArenaScramble, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisState, 0x0078);
		}

		// class UTimeDisplayWidget : public UUserWidget
		TEST_METHOD(Class__SportsScramble__TimeDisplayWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeDisplayWidget, 0x0210);
		}

		// class ATravelSpline : public AActor
		TEST_METHOD(Class__SportsScramble__TravelSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelSpline, mpSpline, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATravelSpline, 0x0330);
		}

		// class ATrophyAwardListenerBase : public AScramActor
		TEST_METHOD(Class__SportsScramble__TrophyAwardListenerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyAwardListenerBase, TrophyAwardRequirement, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyAwardListenerBase, TrophyAwardProgress, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyAwardListenerBase, TrophyID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyAwardListenerBase, IsPersistent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyAwardListenerBase, UnknownData_5D5C, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrophyAwardListenerBase, 0x0360);
		}

		// class ATrophyGrabbable : public AScramPrimitiveGrabbable
		TEST_METHOD(Class__SportsScramble__TrophyGrabbable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, GrabPositionOffset, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, GrabRotationOffset, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, GrabbedScaleModifier, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, RespawnTimeOnRelease, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, CanPlayerInteractWith, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, TrophyWasEarned, 0x0A19);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, UnknownData_QV3E, 0x0A1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, TrophyData, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, PitchMin, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, PitchMax, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyGrabbable, UnknownData_HTDC, 0x0AE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrophyGrabbable, 0x0B20);
		}

		// class UUpdateSessionCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__SportsScramble__UpdateSessionCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, UnknownData_G54I, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateSessionCallbackProxyAdvanced, 0x0090);
		}

		// class UAnimCustomInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimCustomInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCustomInstance, UnknownData_45OG, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCustomInstance, 0x0360);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimCustomInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0360);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_OPWY, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class UAvatarSeupWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AvatarSeupWidget__AvatarSeupWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSeupWidget_C, TextHair, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSeupWidget_C, TextMesh, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvatarSeupWidget_C, TextSkin, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvatarSeupWidget_C, 0x0228);
		}

		// class ATN_Challenge_06_ReturnWall_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_06_ReturnWall__TN_Challenge_06_ReturnWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UnknownData_PFCF, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, GameOver, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UnknownData_6LM2, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, TimeBetweenLauncherFire, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, AnnouncerSequence, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, FirstPauseCompleted, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, SecondPauseCompleted, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, ThirdPauseCompleted, 0x06E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UnknownData_KXGS, 0x06E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, TargetAnimationPlayRate, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, GameLength, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UnknownData_3DAT, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, NW_Court, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, FakeCurrentScore, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, maxBalls, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, LaunchingBall, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, UnknownData_4051, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_06_ReturnWall_C, Paired, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_06_ReturnWall_C, 0x0718);
		}

		// class ABP_TrophyAward_FinalChallengeBase_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_FinalChallengeBase__BP_TrophyAward_FinalChallengeBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, UnknownData_S01D, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, ChallengeTrophyIDs, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, counter, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, UnknownData_JCRX, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, PrependString, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_FinalChallengeBase_C, FirstID, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_FinalChallengeBase_C, 0x03D8);
		}

		// class ABattingTee_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BattingTee__BattingTee_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Audio_Pole2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Audio_BallReady, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, StaticMesh_Ball, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BallLocation, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BB_Stadium_01_Freebee_Pole2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Audio_Pole1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BB_Stadium_01_Freebee_Pole1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Audio_Base, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BB_Stadium_01_Freebee_Base, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TelescopingPieces, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Root, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Audio_HomePlateAnim, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BB_Stadium_01_Freebee_HomeplateLeft, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BB_Stadium_01_Freebee_HomeplateRight, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, HomePlate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Timeline_FakeBallAppear_rise_6AB2154B4882B3F6C30452BDC5970E15, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Timeline_FakeBallAppear__Direction_6AB2154B4882B3F6C30452BDC5970E15, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_MQUK, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Timeline_FakeBallAppear, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, HomePlateAnimate_rise_EA260D1C4D8EFDA366C175A4EC2AC79D, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, HomePlateAnimate__Direction_EA260D1C4D8EFDA366C175A4EC2AC79D, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_ONOT, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, HomePlateAnimate, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Base_Rise_rise_A641D9A1486C0156548249924A7EEBEF, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Base_Rise__Direction_A641D9A1486C0156548249924A7EEBEF, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_U46U, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Base_Rise, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_1_Rise_rise_A2E1C6A643E3A3C4E6C80EBF282A52D7, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_1_Rise__Direction_A2E1C6A643E3A3C4E6C80EBF282A52D7, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_ON4A, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_1_Rise, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_2_Rise_rise_A093A79C460E5F89371A78AF7AA45B20, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_2_Rise__Direction_A093A79C460E5F89371A78AF7AA45B20, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_ICN2, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole_2_Rise, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, FloorHeight, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_RRIN, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Ball, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeBallHit, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Instructions, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BallRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, NoTip, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, BallHasBeenHit, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_NBWA, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole2_StartLocation_Z, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Pole1_StartLocation_Z, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, Base_StartLocation_Z, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, PlateLeft_StartLocation_Y, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, PlateRight_StartLocation_Y, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_20ST, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeBallAwaitingHit, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, AutoActivateDeactivate, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeBeingActivated, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeBeingDeactivated, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_ZD4D, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeDeactivated, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, TeeBeingOff, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, UnknownData_IE3K, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, FakeBallStartScale, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingTee_C, FakeBallFinalScale, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABattingTee_C, 0x0484);
		}

		// class UBW_ScoreCardFrameSet_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCardFrameSet_Widget__BW_ScoreCardFrameSet_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame4, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame6, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame7, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame8, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Frame9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, FrameFinal, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_5, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_6, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_7, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_8, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_9, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_10, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_11, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_12, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_13, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_14, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_15, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Image_16, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, Player, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, PlayerBG, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, score, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, ScoreBG, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, MajorColor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameSet_Widget_C, MinorColor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCardFrameSet_Widget_C, 0x0328);
		}

		// class UBW_CenterScoreboard_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_CenterScoreboard_Widget__BW_CenterScoreboard_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, BlueCar, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, BlueMotion, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, CountdownText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, FinishLine, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, OverlayParent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Ball1_Off, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Ball1_On, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Ball2_Off, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Ball2_On, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Games, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player1Text, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Ball1_Off, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Ball1_On, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Ball2_Off, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Ball2_On, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Games, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, Player2Text, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, RedCar, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, RedMotion, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, StartingLine, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, TimerText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, TrainingRoomFinishLine, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_CenterScoreboard_Widget_C, TrainTimerText, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_CenterScoreboard_Widget_C, 0x02C8);
		}

		// class ATN_PingPongPaddle_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_PingPongPaddle__TN_PingPongPaddle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_PingPongPaddle_C, 0x0FB8);
		}

		// class ABW_Train_01_BasicBowling_Casual_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_01_BasicBowling_Casual__BW_Train_01_BasicBowling_Casual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, UnknownData_NKWT, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, Audio_BasicBowling_06, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, Audio_BasicBowling_05, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, Audio_BasicBowling_04, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, Audio_BasicBowling_03, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, PracticeBallPickedUp, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, PracticeOver, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, Retrying, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, UnknownData_EZ6P, 0x04A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, TutorialBallTable, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, AnnouncementDuration, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, OriginalPlayerSkill, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_01_BasicBowling_Casual_C, WhatWasTheBowlingEvent, 0x04CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_01_BasicBowling_Casual_C, 0x04CE);
		}

		// class ABB_Scoreboard_Training_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Scoreboard_Training_BP__BB_Scoreboard_Training_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, AudioStrikeout, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, AudioHomerun, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, MediaMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Root, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_5_Baseball_01_Movement_1AB085C74BC0E7ED6F2FF1B172696372, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_5_Baseball_02_Movement_1AB085C74BC0E7ED6F2FF1B172696372, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_5__Direction_1AB085C74BC0E7ED6F2FF1B172696372, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_J3U4, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_6, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_4_Transition_96ED5D6D418A3E00A6EF34AEE292DEDE, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_4__Direction_96ED5D6D418A3E00A6EF34AEE292DEDE, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_HD6F, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_5, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3_Large_Star_02_Scale_1A2B51E7476161B719C35481929B2687, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3_Action_Lines_01_Scale_1A2B51E7476161B719C35481929B2687, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3_Baseball_01_Scale__1A2B51E7476161B719C35481929B2687, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3_Large_Star_01_Scale_1A2B51E7476161B719C35481929B2687, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3__Direction_1A2B51E7476161B719C35481929B2687, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_P46H, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2_Line_01_Movement_30BE4E0C4192769E247ECAB5F82480DD, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2_Line_02_Movement_30BE4E0C4192769E247ECAB5F82480DD, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2_Line_03_Movement_30BE4E0C4192769E247ECAB5F82480DD, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2_Out_Movement_30BE4E0C4192769E247ECAB5F82480DD, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2_Strike_Movement_30BE4E0C4192769E247ECAB5F82480DD, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2__Direction_30BE4E0C4192769E247ECAB5F82480DD, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_B5PJ, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_3, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_1_Borders_7A03DF6740D6D9C71DDE5E9F8D5EB975, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_1__Direction_7A03DF6740D6D9C71DDE5E9F8D5EB975, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_8FQY, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_0_Logo_Scale_B2B18ACA4987669D3D3D699CDAB8EF73, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_0_Transition_Large_Bars_B2B18ACA4987669D3D3D699CDAB8EF73, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_0_Transition_Scrolling_Word_Bars_B2B18ACA4987669D3D3D699CDAB8EF73, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_0__Direction_B2B18ACA4987669D3D3D699CDAB8EF73, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_X4CF, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timeline_1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, VideoMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, MediaComplete, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, MediaSequenceComplete, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, CurrentTime, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, ClockActive, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_UTY4, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, TimerCountdownComplete, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, ScoreboardWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, ActiveVideo, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, OldVideo, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_9WT6, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, TimerDisplayReady, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, GrandSlam, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, TimerActive, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, UnknownData_EBRE, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, Timer, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Training_BP_C, PixelGridScale, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Scoreboard_Training_BP_C, 0x047C);
		}

		// class UBB_PitchingInstruction_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_PitchingInstruction__BB_PitchingInstruction_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_PitchingInstruction_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_PitchingInstruction_C, InstructionText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_PitchingInstruction_C, 0x0220);
		}

		// class ATrophyProp_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TrophyProp_Base__TrophyProp_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, InstancedMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Bling, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Top, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Mid, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Base, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, RotatingMovement, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, GlowColor, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, SweepColor, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, SportType, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, UnknownData_0PFI, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, EmissiveColor, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, SportColor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, UnknownData_ANQ8, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Base_NonInstMat, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Mid_NonInstMat, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Top_NonInstMat, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, Bling_NonInstMat, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, NonInstanceMaterials, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, ChallengeTrophyNumber, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, UnknownData_QIH1, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyProp_Base_C, ExtraBling_NonInstMat, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrophyProp_Base_C, 0x03E0);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_TJ60, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_0JE4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class ABW_Minigame_HumanVsAI_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_Minigame_HumanVsAI__BW_Minigame_HumanVsAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_HumanVsAI_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_HumanVsAI_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_HumanVsAI_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_HumanVsAI_C, BowlingAlleys, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_HumanVsAI_C, Manager, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Minigame_HumanVsAI_C, 0x0360);
		}

		// class UDummyAvatarAnimBp_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__DummyAvatarAnimBp__DummyAvatarAnimBp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, UnknownData_UMLT, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_Root_FCD2272F4D9F4241717D0589BB7D8BD0, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_3CC0A59E4DBA07F1933DDAB841C366CD, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_0EE53BA049CFEDE87EC8C287DACC36D5, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_E9E3F1044753BBAC645AB689F3810AB7, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_F5DE3F644CBA620065DD588D10F8199D, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_CFC94E884E04A956FEFD39BD372898FA, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_739882BE439D36CF1D829F8A1E13855D, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_7FA625714825AD50A6EBCD90E37E7EEE, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_8AE755864D094FC51AD135B97BC39659, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_74F5F057475A307689ED0981BCE19155, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_1A2317B2495858C42B48F6AACD39F23E, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_C75761144A7A95776C075ABF01371880, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_39C851B740E9F142032145946563A6F5, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_19DB0226491669CF00EB6695B13A30E3, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_AB7CB9B242780D2FEBDF3D9EC74E8B29, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_6F8D91814E21414B7BA5DDBA34080DBA, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_9F0393EA4B21FE508BA036849B72D37B, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_BEA29B5D4759C8316CC5B9901864FD7E, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_A3105AA245D4615F1FF9DF8D63177FFC, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_5001A3084D609604F2FDB48D003EFB5C, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_TransitionResult_2ADA40F345293C83794B0AA0E4C85B0E, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_0A5EC3044F355516E4D21382DB9A49DF, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_C40C2CCC405C065BA5D11EB71558C7C1, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_AAD459CB4737E76E5253FA99F7E84F16, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_7CA996C34801A661090461940B8ACA43, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_6C5E3D53411F3C150FE856A53457F2C0, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_8D91FD414BC9943EAF431C89A67E7D50, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_693C94274C5E570A5A29A697797A55EC, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_C6BB0A544994E9FD8FE5C2915E4BF703, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_1BB4E2B345002168EA17D493DE8B6DB7, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_48B964754B4CA898D7C1D78C1D094B11, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_6340057C4CD094BD82A9738F001469FC, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_76D468C74ED059A3DB78D6A1073A68E0, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_07B6FB164EE8DB35D860FBA6ED0745FA, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_BD9E382E4B2D71BE4C8FA69A84F09508, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_ED99E6C84B246AF4C028108A282A8353, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_C6714D064ED49773C0068CB6F203C518, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_C0D378C34A6272F126F78FBC4115BF0C, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_E3053F45402CF76DAD44A594C815FFB8, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_33E953864E50C2531078C993FC338CF4, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_E733E4F64232B7A45213489876D01ED7, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_3571C3E149DC3D826480879A565037F5, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_B5B96A8243FEAF2CB1E49DA1C6421816, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_1B084E1F4CF5A70FB062D693CA7F1BFD, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_B46E97E54BBAE805B361DCB15B875CBD, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_24568D804FBBAB53337D908ECB2D9BDB, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_2E8A971241ECEF4FC37614BAD063FCE7, 0x1468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_D8C735454684D6BB2D510A932F0919CC, 0x14A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_86DF90E34C3EDE72C49F66979019D755, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_6F1FBFE74E57E1432DE12EBBE9C89198, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_5856C1C349F526E665ECB0A7634A62ED, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_8B4A65044B61F1F0AB629DBB0524CD10, 0x1668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_442C4734449F48A9C9C4CFB95A374091, 0x1708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_SequencePlayer_33D75ED64D7453E4FEB29C81F03C32E9, 0x1748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateResult_BA63751841E98D108B9289BFC5A22662, 0x17E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, AnimGraphNode_StateMachine_CC3DF3D240BC53CE5B773B8AB09454FF, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, Sad, 0x1908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, Happy, 0x1909);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, Look, 0x190A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, LookR, 0x190B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, StopLook, 0x190C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, SpawnLeftSide, 0x190D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDummyAvatarAnimBp_C, SpawnRightSide, 0x190E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDummyAvatarAnimBp_C, 0x190F);
		}

		// class ABB_PingPongPaddle_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_PingPongPaddle__BB_PingPongPaddle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PingPongPaddle_C, 0x0FC8);
		}

		// class ABB_CricketBat_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_CricketBat__BB_CricketBat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_CricketBat_C, 0x0FC8);
		}

		// class ABB_BowlingBall_BW_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BowlingBall_BW__BB_BowlingBall_BW_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BowlingBall_BW_C, UnknownData_Q7XO, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BowlingBall_BW_C, UberGraphFrame, 0x0F08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BowlingBall_BW_C, 0x0F10);
		}

		// class UResultsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResultsWidget__ResultsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, CompletionCount, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, HorizontalBox_CurrentScore, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, HorizontalBox_HighScore, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, Text_CurrentScore, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, Text_CurrentScoreCount, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, Text_HighScore, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, Text_HighScoreCount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, Text_Subtitle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, TrophyCondition, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, TrophyCount, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, TrophyDescription, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsWidget_C, TrophyText, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResultsWidget_C, 0x0270);
		}

		// class APitching_Target_02_C : public AScramTarget
		TEST_METHOD(BlueprintGeneratedClass__Pitching_Target_02__Pitching_Target_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, BallOverlapDetection, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, FlashScoreWidget, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, StaticMeshOuter, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ChangeSize_Scale_F7B5E7404970E33ED2A7A9B23B676B7A, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ChangeSize__Direction_F7B5E7404970E33ED2A7A9B23B676B7A, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UnknownData_FYZ3, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ChangeSize, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, TargetOverlapDetection, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, FlashTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UnknownData_5EIE, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ScoreText, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, InitialScale, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UnknownData_EABA, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, Impacts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, TargetMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, FlashScoreColor, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, FlashScoreAmount, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ShowFlashScore, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ShowTargetScore, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UnknownData_R010, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, DrawSize, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, PlayStrikeSound, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, UnknownData_K3H6, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, StrikeSound, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ImpactSound, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitching_Target_02_C, ImpactSoundMultiplier, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APitching_Target_02_C, 0x0424);
		}

		// class ATennisScramble_RaiseNet_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_RaiseNet__TennisScramble_RaiseNet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_RaiseNet_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_RaiseNet_C, 0x0388);
		}

		// class ATennisScrambleTargetGroup_NetNotifier_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__TennisScrambleTargetGroup_NetNotifier__TennisScrambleTargetGroup_NetNotifier_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_NetNotifier_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_NetNotifier_C, DefaultSceneRoot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_NetNotifier_C, TriggeredByBall, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScrambleTargetGroup_NetNotifier_C, 0x0440);
		}

		// class ABW_ScoreKeeper_BP_C : public ABowlingScoreKeeper
		TEST_METHOD(BlueprintGeneratedClass__BW_ScoreKeeper_BP__BW_ScoreKeeper_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreKeeper_BP_C, DefaultSceneRoot, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_ScoreKeeper_BP_C, 0x0370);
		}

		// class UButton_3dPanelImageWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_3dPanelImageWidget__Button_3dPanelImageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_3dPanelImageWidget_C, PanelText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_3dPanelImageWidget_C, 0x0218);
		}

		// class ATennisArenaScoreboard_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TennisArenaScoreboard__TennisArenaScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Cover2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Cover1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, BallLoc2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, BallLoc1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Tennisscramble_Scoreboard_Base, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Widget, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover2_Alpha_0FB27A7A4B2C921A2C7A1A8B4B1EE516, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover2__Direction_0FB27A7A4B2C921A2C7A1A8B4B1EE516, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, UnknownData_IQ7T, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover1_Alpha_E2B441B0427A658A2EBD19A8CDC64408, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover1__Direction_E2B441B0427A658A2EBD19A8CDC64408, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, UnknownData_CNSI, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, Timeline_Cover1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, ArenaScoreboardWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, ShowAdvantage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, TraditionalScoring, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, UnknownData_VUW4, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, AdText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, GameInstance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, BallLeft, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, BallRight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, RightSpawnDelay, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisArenaScoreboard_C, LeftSpawnDelay, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisArenaScoreboard_C, 0x03D8);
		}

		// class UGutterTracker_BP_C : public UBowlingGutterTracker
		TEST_METHOD(BlueprintGeneratedClass__GutterTracker_BP__GutterTracker_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, UnknownData_GV9V, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, LeftParticleTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, ParticleTemplate, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, Left_Particle_Actor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, RightParticleTransform, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGutterTracker_BP_C, Right_Particle_Actor, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGutterTracker_BP_C, 0x0308);
		}

		// class ATennisScramble_TennisRacket_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_TennisRacket__TennisScramble_TennisRacket_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_TennisRacket_C, 0x0380);
		}

		// class ATN_Instrument_Base_C : public ATennisInstrument
		TEST_METHOD(BlueprintGeneratedClass__TN_Instrument_Base__TN_Instrument_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UberGraphFrame, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, SwingParticleSystem, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, ScramBounceLighting, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, AudioBallHit, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Timeline_Emissive_alpha_5D9A1EFE49C3E85973EAE3A186FC7413, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Timeline_Emissive__Direction_5D9A1EFE49C3E85973EAE3A186FC7413, 0x0EB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_2MDW, 0x0EB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Timeline_Emissive, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Grow_Scale_02DB3B08431413463BEFE6A1532DF421, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Grow__Direction_02DB3B08431413463BEFE6A1532DF421, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_TN0N, 0x0EC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Grow, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Shrink_Scale_00D980264E5F46E73667E1A03F355299, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Shrink__Direction_00D980264E5F46E73667E1A03F355299, 0x0ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_Z7CB, 0x0ED5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, Shrink, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, InitialScale, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_U0F2, 0x0EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, DefaultBallHItSFX, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, DefaultBallHItHardSFX, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, HardHitSpeedThreshold, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, MinimumHitSpeedThreshold, 0x0F04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, SFXOverrides, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, InitialPhysicsOff, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, OldHitPhysics, 0x0F19);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_CHXB, 0x0F1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, MotionBlurScale, 0x0F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, EmmisiveSlot, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UseEmissiveTint, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_K4TE, 0x0F2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, DefaultTint, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, DefaultSweepColor, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, DefaultIntensity, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, NormalHitColor, 0x0F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, SliceHitColor, 0x0F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, ChargeHitColor, 0x0F74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, ChargeSliceHitColor, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, ShotType, 0x0F94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_7R68, 0x0F95);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, EmmissiveMaterial, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, CrossPlayRestriction, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, UnknownData_QPXK, 0x0FA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, CrossPlayKillTime, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Instrument_Base_C, AcceleratorColor, 0x0FA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Instrument_Base_C, 0x0FB8);
		}

		// class ADemoMainMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DemoMainMenu__DemoMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Position3, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Position2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Position1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Position0, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, MenuRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, ChoiceMade, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Buttons, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, GameInstance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, TouchActor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, Touching, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADemoMainMenu_C, ShowFeatures, 0x0391);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADemoMainMenu_C, 0x0392);
		}

		// class ATN_Challenge_02_DoubleCross_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_02_DoubleCross__TN_Challenge_02_DoubleCross_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_1ONT, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, DoubleCross_ParticleTrigger, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, GameOver, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_HWI4, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, TimeBetweenLauncherFire, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, FirstPauseCompleted, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, SecondPauseCompleted, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, ThirdPauseCompleted, 0x06DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_78UC, 0x06DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, TargetAnimationPlayRate, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, GameLength, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_2Y0N, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, NW_Court, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, Alt_AnnouncerSequence, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UseAlternateSequence, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_GJVA, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, AnnouncerSequence, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, TargetCount, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, TotalCount, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, TimeLeft, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, BonusScore, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, PreChallengePreferences, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, Left_Restriction, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, Right_Restriction, 0x0735);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, UnknownData_B7C4, 0x0736);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, LaunchPattern, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, PatternIndex, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, StreakCount, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, MatchScore, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, MismatchScore, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, HitBalls, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, ShotCount, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, MaxShotCount, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_02_DoubleCross_C, LaunchPatternInverse, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_02_DoubleCross_C, 0x0780);
		}

		// class UArenaScrambler_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ArenaScrambler__ArenaScrambler_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArenaScrambler_C, 0x0028);
		}

		// class ABP_TrophyRoomMonitorDisplay_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyRoomMonitorDisplay__BP_TrophyRoomMonitorDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, IconActive, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, IconNormal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, UnLocked, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, Locked, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, SS_TrophyR_Panel_Sm_GridS_v6_mir, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, SS_TrophyR_Logo, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, Text_and_Line, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, Widget, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, IconRotate_rotate_EB6A0F0E49F517CAD34CA3832400A57F, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, IconRotate__Direction_EB6A0F0E49F517CAD34CA3832400A57F, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, UnknownData_WDA2, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, IconRotate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, TrophyName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, EmissiveMat, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, BaseMat, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyRoomMonitorDisplay_C, ProgressText, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyRoomMonitorDisplay_C, 0x03C0);
		}

		// class ABB_FoamFinger_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_FoamFinger__BB_FoamFinger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_FoamFinger_C, 0x0FC8);
		}

		// class ABW_Train_02_BasicBowling_Standard_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_02_BasicBowling_Standard__BW_Train_02_BasicBowling_Standard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, UnknownData_VR76, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, Audio_BasicBowling_06, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, Audio_BasicBowling_05, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, Audio_BasicBowling_04, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, Audio_BasicBowling_03, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, PracticeBallHeld, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, PracticeBallPickedUpFromRack, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, PracticeOver, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, Retrying, 0x04A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, UnknownData_Y9O6, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, TutorialBallTable, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, AnnouncementDuration, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_02_BasicBowling_Standard_C, OriginalPlayerSkill, 0x04CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_02_BasicBowling_Standard_C, 0x04CD);
		}

		// class UQuarterPanelWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuarterPanelWidget__QuarterPanelWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuarterPanelWidget_C, SubHeaderText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuarterPanelWidget_C, 0x0218);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_X2YV, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_QZ0Z, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_JFSW, 0x0576);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_09YX, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_GKP6, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0620);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0180);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_W2TS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class AChallenge_ScramSportManager_TN_C : public AScramSportManagerTennis
		TEST_METHOD(BlueprintGeneratedClass__Challenge_ScramSportManager_TN__Challenge_ScramSportManager_TN_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UberGraphFrame, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Umpire_Vox, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, AudioCrowd, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, AudioOrgan, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Root, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, MatchStarted, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, GameOver, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, MatchOver, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Ace, 0x049B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, DoubleFault, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Out, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_WVBY, 0x049E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, NetTextDisplayTime, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Player1Serve, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, DebugBallsSetting, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_U932, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, GameInstance, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ServeOffset, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ScorePlayer1, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ScorePlayer2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Player1Winner, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_LC80, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, MatchComplete, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ServeLocationIndicator, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, OrganFadeOuttime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_64PM, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ServeLauncher, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, GameCount, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ShowDebugText, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_6MHZ, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, DebugButton, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, InfoDisplayStingerIntroTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_WJLU, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ReceiveLocationIndicator, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, LocalHelper, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, GameComplete, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ServeReady, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, LocalIsPlayer1, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_8OO5, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, PointComplete, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, BallInPlay, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, PreServeStart, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, p1won, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_QEVA, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, LetServeResult, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Player1Reference, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, Player2Reference, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, OC5Demo, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, OC5DemoServeChange, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, MusicStarted, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, IsSpectator, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_PW51, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, PlayByPlayActor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, FaultServeResult, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, TraditionalScoring, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, ShowAdvantage, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, UnknownData_C8H4, 0x05BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, PauseBubbleActor, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ScramSportManager_TN_C, AIOpponent, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChallenge_ScramSportManager_TN_C, 0x05D0);
		}

		// class AScramTrophyManager_BP_C : public AScramTrophyManager
		TEST_METHOD(BlueprintGeneratedClass__ScramTrophyManager_BP__ScramTrophyManager_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, DefaultSceneRoot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, TrophySpawnForwardOffset, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, TrophySpawnRightOffset, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, TrophySpawnUpOffset, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, ButtonPressCount, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, TrophyGetSoundList, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, PreAnnounceDelay, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, Initialized, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, UnknownData_TQXU, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, Logs, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, NewlyEarnedTrophies, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, CurrentSport, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, UnknownData_QAGP, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, NewlyEarnedAvatars, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, OnEarnedTrophyDispatcher, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, NewlyEarnedSkinPacks, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, NewlyEarnedHairPacks, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, GameModeTrophyID, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyManager_BP_C, LastGameModeID, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrophyManager_BP_C, 0x0470);
		}

		// class ABP_TrophyAward_BW_TrainingComplete_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_TrainingComplete__BP_TrophyAward_BW_TrainingComplete_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_TrainingComplete_C, 0x03D8);
		}

		// class ABP_TrophyAward_BW_SpareMe_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_SpareMe__BP_TrophyAward_BW_SpareMe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_SpareMe_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_SpareMe_C, 0x03C0);
		}

		// class UInfoDisplay_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoDisplay_Widget__InfoDisplay_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoDisplay_Widget_C, StringText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoDisplay_Widget_C, 0x0218);
		}

		// class UQpDetailsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QpDetailsWidget__QpDetailsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsWidget_C, PanelText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsWidget_C, ScaleBox_PanelText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQpDetailsWidget_C, 0x0220);
		}

		// class ABB_Trail_Normal_Flat_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Trail_Normal_Flat__BB_Trail_Normal_Flat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Trail_Normal_Flat_C, 0x037C);
		}

		// class ABatterAvatar_BP_C : public ABattingAvatar
		TEST_METHOD(BlueprintGeneratedClass__BatterAvatar_BP__BatterAvatar_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatterAvatar_BP_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatterAvatar_BP_C, Timeline_0_Alpha_2AFEBB70439211A9A855EC8A9FB22FE3, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatterAvatar_BP_C, Timeline_0__Direction_2AFEBB70439211A9A855EC8A9FB22FE3, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatterAvatar_BP_C, UnknownData_9BUS, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatterAvatar_BP_C, Timeline_1, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABatterAvatar_BP_C, 0x0428);
		}

		// class UButton_Standard_widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_Standard_widget__Button_Standard_widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, Switcher, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, TextArrow, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, TextLarge, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, TextNarrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, TextStandard, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_Standard_widget_C, TextWide, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_Standard_widget_C, 0x0240);
		}

		// class ABowlingAI_Normal_Blueprint_C : public ABowlingAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BowlingAI_Normal_Blueprint__BowlingAI_Normal_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAI_Normal_Blueprint_C, 0x054A);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_J2FR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class ATennisPlayByPlay_Blueprint_C : public APlayByPlayTennis
		TEST_METHOD(BlueprintGeneratedClass__TennisPlayByPlay_Blueprint__TennisPlayByPlay_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisPlayByPlay_Blueprint_C, DefaultSceneRoot, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisPlayByPlay_Blueprint_C, 0x03A0);
		}

		// class UBaseballAIFielder_AnimBP_C : public UBaseballFielderAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseballAIFielder_AnimBP__BaseballAIFielder_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, UberGraphFrame, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_Root_1BCC0DC44A6DA04B3F107D8DB97D2011, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_999F3FB0416058ABF06B8EAFB05EDB7F, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_E842FE0E4BC2F8CC0A7FF5898F0245F8, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_E3E05B8E4273482271C3D38A250F71CF, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_53C93A6D45ECE83A85E0EAB131524AE3, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_E8679DFA4370A1D1D3B85495B79D1D93, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_1ADF16AD48105C94A990C9BC30281351, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_E87F11E14655EC5CAD09BDB32E2413FA, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_E439AEEB41128D497EF6D0924E6395F7, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_886A20BF4A188C57E80DA59C9EFB2C75, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_06594D81401DE621616DCA96A1FF73FC, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_26A5B0ED46B1588F3D542DA28A197165, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_14210766434E3FBB95D13982234ABED4, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_14D6D91A456CEC3DF54ED1ACBF786415, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_SequencePlayer_9B9C1B2440F8B712959C45841139CA69, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_00731AF84A9EDB3D94C508A39BD4F7ED, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_9173B1534FD9CA8E3AC84AA5226B895C, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_TransitionResult_413109DD4E67925275EC548A307B650C, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_BlendSpacePlayer_3B8119A04FC9E81C730493A3F0093729, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_D96AC1204ECDE223BB0D7C906C3A63FF, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_RandomPlayer_A762FB7A4E74890497BF7CBCD3DB0869, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_2B877C1C4EE512BB52E01CADDE9AB8E7, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateMachine_4BAEF80F4FB5F4BE24BDC19FF12C5C31, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_032059D044747296D8801CB775266401, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateMachine_6F5BBAE245DB2E510A132EBC7DC234D5, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_79AE14B6408EFDFC52A94B89EFAA93CD, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_SequencePlayer_EBB138534FE3E34AE598A9808B443974, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_5C4363E24346098F034A9783BE604935, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_BlendSpacePlayer_D704E9814209F7E88835E5B02991CBD3, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_8C35C2234B339A2B37BC3E9E771AD7C9, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_SequencePlayer_0D3BC64D4C2DE37B0DDD2592544EF20D, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_CC6DE6D9487BAFD2237934A3EAD4D344, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_SequencePlayer_843C6FE84A00DB9DA7D70CA256075A29, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateResult_7DB3D7464F5AB5EEFA47FFB6D1386DB4, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIFielder_AnimBP_C, AnimGraphNode_StateMachine_2F70EF9B44BCF6A318C1BB97644C0845, 0x16E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAIFielder_AnimBP_C, 0x17C0);
		}

		// class ATennisAI_Medium_C : public AScramTennisAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__TennisAI_Medium__TennisAI_Medium_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAI_Medium_C, 0x07C1);
		}

		// class ABW_VideoBoard_Stadium_C : public ABW_VideoBoard_Training_C
		TEST_METHOD(BlueprintGeneratedClass__BW_VideoBoard_Stadium__BW_VideoBoard_Stadium_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_VideoBoard_Stadium_C, 0x03A0);
		}

		// class ABB_Pineapple_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Pineapple__BB_Pineapple_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Pineapple_C, UberGraphFrame, 0x1038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Pineapple_C, 0x1040);
		}

		// class UBP_TrophyR_Complete_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TrophyR_Complete__BP_TrophyR_Complete_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyR_Complete_C, Description, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyR_Complete_C, EarnedDate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyR_Complete_C, EditableTextBox_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyR_Complete_C, Title, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TrophyR_Complete_C, 0x0230);
		}

		// class UTrophyAwardedInfoWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TrophyAwardedInfoWidget__TrophyAwardedInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedInfoWidget_C, Text_Date, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedInfoWidget_C, Text_Id, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedInfoWidget_C, Text_Info, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedInfoWidget_C, Text_Subtitle, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrophyAwardedInfoWidget_C, 0x0230);
		}

		// class ABW_Pineapple_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Pineapple__BW_Pineapple_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pineapple_C, UnknownData_HKL4, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pineapple_C, AdditionalMassMesh, 0x0F08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Pineapple_C, 0x0F10);
		}

		// class ABB_Ball_Base_C : public ABaseballBall
		TEST_METHOD(BlueprintGeneratedClass__BB_Ball_Base__BB_Ball_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UberGraphFrame, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, AudioPitch, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, BlobShadow, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, Timeline_GrowTrail_Scale_EAC4699C467D508D7B749B8DFB566EAE, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, Timeline_GrowTrail__Direction_EAC4699C467D508D7B749B8DFB566EAE, 0x0EEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_RJ27, 0x0EED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, Timeline_GrowTrail, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, DebugPrintHitSpeed, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, DisableScramble, 0x0EF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_3OL9, 0x0EFA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, SpawnVFX, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, SpawnVFXScale, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_AZBP, 0x0F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, SpawnSFX, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, DespawnSFX, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ImbuedVFX, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ImbuedParticle, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ImbuedVFXScale, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_GKTQ, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedHitVFX, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedParticle, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedHitSFX, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, SliceParticle, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedSliceParticle, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedSliceVFX, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ChargedSliceVFXScale, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_JZCG, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, SliceSFX, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, CurrentTrail, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, TrailScale, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_VTWI, 0x0FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, TrailMap, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, TrailScalar, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, WindowHit, 0x0FFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, FloorHit, 0x0FFD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_EY63, 0x0FFE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, RollingFX, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, OutfieldTargetHit, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_NGX9, 0x1009);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, ImbuedTrailColor, 0x100C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, HitByBat, 0x101C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, UnknownData_01FE, 0x101D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, BounceSound, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, GroundImpactVFX, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Ball_Base_C, GrassImpactVFX, 0x1030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Ball_Base_C, 0x1038);
		}

		// class ABB_Train_03_ScramblePitching_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_03_ScramblePitching__BB_Train_03_ScramblePitching_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog31, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog30, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog29, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog28, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog27, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog26, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog25, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog24, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog23, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog22, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog21, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog_Nice, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog20, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog_Great, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog19, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog10, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog09, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog08, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog07, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog06, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Audio_Dialog05, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, OriginalPitchingPreferences, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PitcherCaughtFirstBall, 0x06D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Retrying, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_LDJM, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, PauseBetweenVO, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UmpireCallDelay, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Frisbee, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PitcherSeesFrisbee, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_4TEZ, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, FrisbeeBasketballPingPong, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_CatcherCaughImbuedFrisbee, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_OK0Z, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, WiffleFrisbeePingPong, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_SwapBallArray, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_TNTU, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, SFX_BallGoodSound, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_FirstTargetHit, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PitcherCaughtSecondBall, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PitcherGrabbedFirstFrisbee, 0x072A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_SecondTargetHit, 0x072B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PitcherCaughtThirdBall, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_NonImbuedFrisbeeOption, 0x072D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_CatcherCaughtNonImbuedFrisbee, 0x072E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_ImbuedFrisbeeOption, 0x072F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_BatterSpawned, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_PlayerGrabbedImbuedFrisbee, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_BatterHitFrisbee, 0x0732);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_Over, 0x0733);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, TargetTracking, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, TrainingIconActive, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, PlayerHasSpecialBall, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_IU38, 0x073A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, HitFirstFrisbeeTargetVOTimer, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_FirstBaseballInMittOrThrowingHand, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_IL77, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, GrabFrisbeeVOTimer, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_FirstFrisbeeInMittOrThrowingHand, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_OPOR, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, BaseballEventBall, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, RestoreScrambleBallSetting, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, Tutorial_DontAnnoyThePlayer, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, UnknownData_BZZ1, 0x076A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_03_ScramblePitching_C, GrabImbuedFrisbeeVOTimer, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_03_ScramblePitching_C, 0x0778);
		}

		// class AMenu_SportOptions_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_SportOptions__Menu_SportOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, TeamMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, ButtonMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, ButtonLocs, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, StaticMesh2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, StaticMesh1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, StaticMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, Widget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, Offset, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1FM, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1FL, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1Team, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R2Low, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L2Low, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R1Low, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L1Low, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L3, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2R0, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP2L0, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1R, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1M, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP1L, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP0R, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, LocP0L, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, Scene, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, StandardButtons, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, ArrowButtons, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, Sport, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, UnknownData_JEAS, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, SportsOptionWidget, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, GameInstance, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P0TextList, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P0CurrentIndex, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, UnknownData_HG23, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P2TextList0, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P2CurrentIndex0, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P2CurrentIndex1, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P2CurrentIndex2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, P2CurrentIndex3, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, OptionalButtonR, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, OptionalButtonL, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, GameCountIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, PointCountIndex, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_SportOptions_C, BowlingButtons, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_SportOptions_C, 0x04B0);
		}

		// class AScramSportManagerBaseball_Blueprint_C : public AScramSportManagerBaseball
		TEST_METHOD(BlueprintGeneratedClass__ScramSportManagerBaseball_Blueprint__ScramSportManagerBaseball_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, InnerFoulLoc, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Audio_AmbientCrowd_Loop, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, InstrumentSelectorRightLoc, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, InstrumentSelectorLeftLoc, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLocRF, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLocSS, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLocCF, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLocC, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLocLF, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderLoc1B, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AudioOrgan, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfieldLocusLoc, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, RunnerHomeLoc, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ThirdBaseLoc, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, SecondBaseLoc, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FirstBaseLoc, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, RunnerSpawnLoc, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, InfieldEdgeMarker, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, DoubleTripleMarker, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfieldFenceEdge, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfieldFenceCenter, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BatterLoc, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitcherLoc, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StaticMesh, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Timeline_OrganFade_Scale_F2AE027C4A618FA4D20BE980962382FF, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Timeline_OrganFade__Direction_F2AE027C4A618FA4D20BE980962382FF, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_Y87P, 0x078D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Timeline_OrganFade, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, GameElements, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, strikeZone, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, GameInstance, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, EquipmentSet, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, MaxOuts, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Outs, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_SY5O, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchingLocation, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StartPosButtons, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StartChoiceMenu, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, VisitorsTotalScore, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, HomeTotalScore, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, CurrentInning, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, MaxInnings, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PointsForSingle, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PointsForDouble, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PointsForTriple, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PointsForHomeRun, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, TopOfTheInning, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_XAKP, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitcherPointsStrike, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AwayTeamMaterial, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, HomeTeamMaterial, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FielderList, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, CatcherActor, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, LocalHelper, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, SwitchSidesMessageDuration, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StrikeRegistered, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_IXG4, 0x0875);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PreferredHandP1, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BallLocation, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_GD3S, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PreferredHandP2, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, WaitForScoreboardVideo, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, WaitForRunners, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_CWT4, 0x089A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OrganFadeOuttime, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BattersBoxIndicator, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PlayerBatterStrikezone, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AIBatterStrikezone, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AIPlayerEnabled, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, FirstPitchOfInning, 0x0949);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_QBD9, 0x094A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchTarget, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchTargetScoreAmount, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_CJH8, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BattingTargetActor, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfieldTargetScoreAmt, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, DebugBallsSetting, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_9Z6Q, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, InstrumentSelector, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BattingTeePosition, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_OWTU, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, SFX_BatBreak, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BatBroken, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PlayerInPosition, 0x0991);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_ETE3, 0x0992);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ScrambleMenu, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ScrambleMenuChoice, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BallInPlay, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_5KUA, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OnSidesSwitchedDispatcher, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PauseBubbleActor, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchingMinArea, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchingMaxArea, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BattingTee, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PitchingPropManager, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ScrambleBalls, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ScrambleInstruments, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BatProgression, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Ball_Selector_Listener, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, PlayByPlay, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, Strikes, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StrikeoutCount, 0x0A54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ShouldResetCount, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_KU5I, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BatterToPitcherInfluencer, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, GameCompleted, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfielderCFMovementRange, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OurfielderRFMovementRange, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, OutfielderLFMovementRange, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, LogoPopup, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, BasesLoaded, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_V5MO, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AiBatter, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AiLook, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, StikeoutBool, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_3LPT, 0x0AC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, AwayTeamMittMaterial, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, HomeTeamMittMaterial, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ChallengeAIGame, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ChallengeSpawnsPitcher, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, IsHostBatting, 0x0AE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_1ZQU, 0x0AE3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, DelayBeforeFirstAiSpawn, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, RestoredBatterInstrument, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, RestoredPitcherScrambleOptions, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, RestoringGame, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, UnknownData_UIOS, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, ScrambleInstrumentsPool, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, WalkOffGameWinner, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBaseball_Blueprint_C, HomeRun_, 0x0B19);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerBaseball_Blueprint_C, 0x0B1A);
		}

		// class ABP_TrophyAward_BW_Limit_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Limit__BP_TrophyAward_BW_Limit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Limit_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Limit_C, ScoreThreshold, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Limit_C, 0x03C4);
		}

		// class UInfoScreenWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoScreenWidget__InfoScreenWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoScreenWidget_C, Text_Message, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoScreenWidget_C, 0x0218);
		}

		// class ATN_Minigame_WhackABall_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_WhackABall__TN_Minigame_WhackABall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, UnknownData_FI4P, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, GameWall, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, BallTargets, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, LauncherSelectionButtons, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, LauncherChoiceButtons, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, LauncherSelection, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, UnknownData_PDKD, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, GameSelector, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, ActivePayloads, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, LauncherLeft, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, LauncherRight, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, GameOver, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, UnknownData_4CWW, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_WhackABall_C, CountdownActor, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_WhackABall_C, 0x03E8);
		}

		// class ATN_ChallengeRacket_Blue_C : public ATN_ChallengeRacket_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeRacket_Blue__TN_ChallengeRacket_Blue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Blue_C, UberGraphFrame, 0x1040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeRacket_Blue_C, 0x1048);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_1OCF, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_G9GR, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_RAWW, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_OSMI, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_3FJA, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x05C0);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_RLMS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_Y53U, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_6R66, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_09BQ, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0280);
		}

		// class ABB_PitchTarget_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_PitchTarget__BB_PitchTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, SmallerTarget_5, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, SmallerTarget_4, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, SmallerTarget_3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, SmallerTarget_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, AvatarMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActor_Target_5, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActor_Target_4, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActor_Target_3, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActor_Target_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ShowAvatar, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_T9VR, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetCount, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ValidThrow, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_V6X3, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActorInstance_2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActorInstance_3, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActorInstance_4, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ChildActorInstance_5, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, AvoidDoubleHit, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetOneUnbroken, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetTwoUnbroken, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetThreeUnbroken, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetFourUnbroken, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, PlayStrikeSoundOnHit, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, RandomTarget, 0x03B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_OPNR, 0x03B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, AllTargets, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UpdateScoreboardScore, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ShowFlashScore, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_QQSN, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, DisabledTargets, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ShowTargetScore, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_Q37Z, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetScore, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, PerferredMaterial, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ScoreColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ScoreDrawSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, RespawnTargetOnImpact, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UnknownData_SRJQ, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, ReplacementSound, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, TargetHit, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, AllowTargetReset, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchTarget_C, UseSmallTargets, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PitchTarget_C, 0x0452);
		}

		// class ATN_Scoreboard_TennisBall_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Scoreboard_TennisBall__TN_Scoreboard_TennisBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, RotatingMovement, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, Tennisscramble_Scoreboard_ServingsignBall, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, Timeline_Scale_Scale_3EA184F44EDFF7E1EE2348A8496D3C66, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, Timeline_Scale__Direction_3EA184F44EDFF7E1EE2348A8496D3C66, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, UnknownData_JIZE, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, Timeline_Scale, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Scoreboard_TennisBall_C, ScaleUpComplete, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Scoreboard_TennisBall_C, 0x0368);
		}

		// class ABW_GoldenBall_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_GoldenBall__BW_GoldenBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GoldenBall_C, UnknownData_V2ZG, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GoldenBall_C, ParticleSystem_Sparkle, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GoldenBall_C, ScoreMultiplier, 0x0F10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_GoldenBall_C, 0x0F14);
		}

		// class AServeLocationIndicator_C : public AScramPlayerServeTrigger
		TEST_METHOD(BlueprintGeneratedClass__ServeLocationIndicator__ServeLocationIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, AttractAudio, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, AttractParticleSystem, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, DespawnAudio, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, SpawnAudio, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, DespawnParticleSystem, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, SpawnParticleSystem, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, Root, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, PlayerEntered, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, UnknownData_G7NN, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, BallGrabbed, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, BallSpawned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, ShowOnLocalMachine, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, UseAttractAudio, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, UnknownData_HN9D, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, Timer, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, ShouldBeVisible, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, UnknownData_AMJN, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLocationIndicator_C, CurrentBall, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServeLocationIndicator_C, 0x04A8);
		}

		// class ABW_PassNPlay_ScrambleTargetGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_PassNPlay_ScrambleTargetGroup__BW_PassNPlay_ScrambleTargetGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, Icon_Ball_Left, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, Icon_Instrument_Right, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateInstrument_Alpha_FC9AC03D451772A0BAA1389ED1007FCC, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateInstrument__Direction_FC9AC03D451772A0BAA1389ED1007FCC, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, UnknownData_K4U5, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateInstrument, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateBall_Alpha_677664524D0597123935C7800F52279C, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateBall__Direction_677664524D0597123935C7800F52279C, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, UnknownData_W4CM, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, RotateBall, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, ActiveTargets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, TennisManager, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, ManagedGamePaused, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, UnknownData_LVO0, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, Icon_Instrument, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_PassNPlay_ScrambleTargetGroup_C, Icon_Ball, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_PassNPlay_ScrambleTargetGroup_C, 0x0398);
		}

		// class ABW_Trail_Hook_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Trail_Hook__BW_Trail_Hook_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Trail_Hook_C, 0x037C);
		}

		// class ACMN_Trail_Disc_Normal_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Disc_Normal__CMN_Trail_Disc_Normal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Disc_Normal_C, 0x037C);
		}

		// class ABW_Basketball_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Basketball__BW_Basketball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Basketball_C, 0x0F01);
		}

		// class ABW_Multiplayer_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_Multiplayer__BW_Multiplayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, GameInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, HubButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, GameMode, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, HasClient, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, UnknownData_M3JG, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, GameStartButtons, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, StartMenu, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, GameManager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Multiplayer_C, BowlingEndGameButton, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Multiplayer_C, 0x0380);
		}

		// class AChallengeTemp_C : public AChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__ChallengeTemp__ChallengeTemp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeTemp_C, UnknownData_AS1Q, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeTemp_C, UberGraphFrame, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChallengeTemp_C, 0x04A0);
		}

		// class ABB_BaseballBat_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BaseballBat__BB_BaseballBat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BaseballBat_C, 0x0FC8);
		}

		// class ATN_GameSelector_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_GameSelector__TN_GameSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, Buttons, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, GeoChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, MainMenu, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, GameActive, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, UnknownData_RFH8, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, GameInstance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, MinigameScoreboard, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, UsingNewMenuSystem, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, DebugButtonUsed, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, UnknownData_F8RF, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, DebugMainMenu, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GameSelector_C, AllowReset, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_GameSelector_C, 0x0389);
		}

		// class ATN_ChallengeBall_Red_C : public ATN_ChallengeBall_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeBall_Red__TN_ChallengeBall_Red_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Red_C, UnknownData_T2L5, 0x1189);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Red_C, UberGraphFrame, 0x1190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeBall_Red_C, 0x1198);
		}

		// class ATN_TennisBall_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_TennisBall__TN_TennisBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisBall_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisBall_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_TennisBall_C, 0x1160);
		}

		// class ABP_TrophyAward_BB_Challenge03_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BB_Challenge03__BP_TrophyAward_BB_Challenge03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BB_Challenge03_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BB_Challenge03_C, 0x03E0);
		}

		// class ABaseballAIFielder_Hard_Blueprint_C : public ABaseballAIFielder_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIFielder_Hard_Blueprint__BaseballAIFielder_Hard_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIFielder_Hard_Blueprint_C, 0x054A);
		}

		// class ABaseballPracticeArenaLight_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__BaseballPracticeArenaLight__BaseballPracticeArenaLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, InstancedMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, StaticMesh_FullLight, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, ParticleSystem, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, FlyTextLocation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, Root, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, StaticMeshList, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, ShowFlashScore, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, UnknownData_MTIF, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, FlashScoreColor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, FlashScoreAmount, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, UnknownData_E8X5, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, BallActor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, ScoreText, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, LightFixtureHitDetected, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, FlashTime, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, DeactivationDelay, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, ReactivationDelay, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, DestroyAfterHit, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, UnknownData_QEIC, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, GameManager, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaLight_C, PlayerBrokeLightFixture, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballPracticeArenaLight_C, 0x04E0);
		}

		// class AScramPlayerHand_BP_C : public AScramPlayerHand
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHand_BP__ScramPlayerHand_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_C, ButtonFlashMesh, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_C, GameInstance, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_C, Flashing, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHand_BP_C, 0x0451);
		}

		// class ABB_Strikezone_C : public AScramStrikeZone
		TEST_METHOD(BlueprintGeneratedClass__BB_Strikezone__BB_Strikezone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, UberGraphFrame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, StrikeQuad, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, TextRender, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, StrikeDetected, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, BallDetected, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, ShrinkOnSpawn, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, CatcherPresent, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, UnknownData_98YB, 0x04BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Strikezone_C, Strike_Quad_Actor, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Strikezone_C, 0x04C8);
		}

		// class UDebugString_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugString_Widget__DebugString_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugString_Widget_C, TextBlock_1, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugString_Widget_C, 0x0218);
		}

		// class ABowlingAI_Easy_Blueprint_C : public ABowlingAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BowlingAI_Easy_Blueprint__BowlingAI_Easy_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAI_Easy_Blueprint_C, 0x054A);
		}

		// class ABW_Challenge_04_Hoops_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_04_Hoops__BW_Challenge_04_Hoops_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, UnknownData_IVQU, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, PracticeOver, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, UnknownData_4VZ5, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, TutorialBallTable, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, SaveData, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, SecondPauseCompleted, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, FirstPauseCompleted, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, UseAlternateAnnouncerVO, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, UnknownData_TF15, 0x0583);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, PrimaryAudioList, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, CenterScoreboardBP, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, AssignedBall, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_04_Hoops_C, BowlingLaneMgr, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_04_Hoops_C, 0x05B8);
		}

		// class ATennisAI_Easy_C : public AScramTennisAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__TennisAI_Easy__TennisAI_Easy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAI_Easy_C, 0x07C1);
		}

		// class UButton_AvatarEditWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_AvatarEditWidget__Button_AvatarEditWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_AvatarEditWidget_C, NameText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_AvatarEditWidget_C, 0x0218);
		}

		// class AMenu_MpReady_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_MpReady__Menu_MpReady_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, AvatarRemotePos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, AvatarLocalPos, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, Widget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, StaticMesh1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, GameInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, AvatarLocal, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, ReadyWidget, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpReady_C, AvatarRemote, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_MpReady_C, 0x0378);
		}

		// class UBW_Score_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_Score__BW_Score_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, LargeScoreText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, ScoreText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, SmallScoreText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, SpareScaleBox, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, SpareText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, StrikeScaleBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_Score_C, StrikeText, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_Score_C, 0x0250);
		}

		// class ACountdown_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Countdown__Countdown_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Widget_Component, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Timeline_ScaleUp_Scale_5F8626E347F9F5D50E22D58082E3EE83, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Timeline_ScaleUp__Direction_5F8626E347F9F5D50E22D58082E3EE83, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, UnknownData_UM56, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Timeline_ScaleUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, CountDownComplete, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, CountdownWidget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, Count, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, InitialScale, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, DestroySelf, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, UnknownData_8YYB, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, GoMessage, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, BW_DelayTwo, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, BW_DelayOne, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, BW_DelayGo, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, CountdownDelay, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, GoShrinkDelay, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, UnknownData_HH8W, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, ThreeDisplayed, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, TwoDisplayed, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, OneDisplayed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACountdown_C, BowlDisplayed, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACountdown_C, 0x03E8);
		}

		// class AGripSet_CheeseWheel_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_CheeseWheel__GripSet_CheeseWheel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_CheeseWheel_C, 0x0370);
		}

		// class UPnpWinnerTitleWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PnpWinnerTitleWidget__PnpWinnerTitleWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPnpWinnerTitleWidget_C, SubTitleText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPnpWinnerTitleWidget_C, 0x0218);
		}

		// class UGameDetailsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameDetailsWidget__GameDetailsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsWidget_C, CompleteText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsWidget_C, DescText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsWidget_C, TitleText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsWidget_C, TrophyBox, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsWidget_C, TrophyText, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameDetailsWidget_C, 0x0238);
		}

		// class UJoinInviteMessageWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__JoinInviteMessageWidget__JoinInviteMessageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinInviteMessageWidget_C, MessageText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinInviteMessageWidget_C, 0x0218);
		}

		// class UTennisScrambleWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TennisScrambleWidget__TennisScrambleWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisScrambleWidget_C, IconLarge, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisScrambleWidget_C, 0x0218);
		}

		// class APauseCapsule_C : public AScramPauseCapsule
		TEST_METHOD(BlueprintGeneratedClass__PauseCapsule__PauseCapsule_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, Timeline_BlackPulse_PulseFraction_888B747745B5438B170A658880780761, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, Timeline_BlackPulse__Direction_888B747745B5438B170A658880780761, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, UnknownData_CJZ0, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, Timeline_BlackPulse, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, GameInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, CapsuleAlreadyExisted, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, UnknownData_SIUI, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, PauseMenu, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, TransitionReady, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, PlayerController, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, BlackPulseDuration, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, UnknownData_WFSU, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, GameState, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseCapsule_C, PulseEnd, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APauseCapsule_C, 0x03C8);
		}

		// class ABaseballPitchingTarget_BP_C : public ABaseballPitchingTarget
		TEST_METHOD(BlueprintGeneratedClass__BaseballPitchingTarget_BP__BaseballPitchingTarget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, UberGraphFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Icon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, ParticleBurst, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, ScalingAnimation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Frame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, DefaultSceneRoot, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Frames, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Imbued_Color, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, RegularColor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Imbued_Frame_Color, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Regular_Frame_Color, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Break_Sound, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, Particles, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPitchingTarget_BP_C, PitchingTargetHit, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballPitchingTarget_BP_C, 0x0518);
		}

		// class AMenu_JoinInvite_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_JoinInvite__Menu_JoinInvite_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, AudioSlide, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, WidgetMessageComp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, DeclineAllPos, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ListOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ScaleRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, StaticMesh_Middle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, StaticMesh_Top, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, WidgetNamesComp, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, RightButtons, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Arrows, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ArrowPosBottom, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ArrowPosTop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ButtonPosMiddleR, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ButtonPosTopR, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Scene, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_ScaleMenu_Alpha_5F9C35E64A50CABEA258C59E40A85BB1, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_ScaleMenu__Direction_5F9C35E64A50CABEA258C59E40A85BB1, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, UnknownData_26NP, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_ScaleMenu, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_MoveMessage_Alpha_6DF8BAB0417746D3C4DD65937281A7B5, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_MoveMessage__Direction_6DF8BAB0417746D3C4DD65937281A7B5, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, UnknownData_042W, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Timeline_MoveMessage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Buttons, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ArrowButtons, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, InviteList, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, InviteList_TestData, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, DisplayIndex, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, UnknownData_GE4R, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ButtonJoinTop, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ButtonJoinMiddle, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ButtonJoinBottom, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, SelectionStarted, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ArrowUp, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, ArrowDown, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, JoinPlayer, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, DeclineAll, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, JoinInviteWidget, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, Red, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, UnknownData_5WQT, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_JoinInvite_C, MessageWidget, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_JoinInvite_C, 0x0488);
		}

		// class ABB_GolfBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_GolfBall__BB_GolfBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_GolfBall_C, 0x1038);
		}

		// class AMenu_Language_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Language__Menu_Language_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, StaticMesh1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocFR, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocMiddleJP, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocRightKO, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocLeftES, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Scene1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocDE, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ButtonLocEN, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Scene, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, WidgetComp, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Root, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, OptionChanged, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Red, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, UnknownData_XSK6, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, LeftButton, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, RightButton, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, OptionChanging, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, ExternallyDisabled, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, UnknownData_LB6K, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, MiddleButton, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, LeftButton2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, RightButton2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, MiddleButton2, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, English, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, French, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, German, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Spanish, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Japanese, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Korean, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, Setup, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, UnknownData_LSYT, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, SelectedButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Language_C, KoreanOld, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Language_C, 0x0470);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_U6U2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BIHR, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_58CT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BDBA, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_QPDM, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_CFH1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_IGVF, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x00D0);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_0GTE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_FPC0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// class UMovieSceneBindingOverridesInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverridesInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverridesInterface, 0x0028);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_84TO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_E60T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_Y2SF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_E1TU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_ISY9, 0x0342);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZSAW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_OGXA, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZJFR, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_4ZKL, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_0Q9K, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x07C8);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_DMRT, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_1ZCX, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0150);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_AG1Y, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// class ALauncher_Tennis_C : public ALauncher_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Launcher_Tennis__Launcher_Tennis_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Returnit_Balllauncher_Telescoping_Piston, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Returnit_Balllauncher_Telescoping_Head_B, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Returnit_Balllauncher_Telescoping_Head_A, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Returnit_Balllauncher_Telescoping_Base, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, StaticMesh, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Timeline_ScaleUp_Scale_4DC8DD2D4FAA8082484CB7B11A8F7512, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Timeline_ScaleUp__Direction_4DC8DD2D4FAA8082484CB7B11A8F7512, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, UnknownData_UYWV, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, Timeline_ScaleUp, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Tennis_C, InitialScale, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALauncher_Tennis_C, 0x057C);
		}

		// class ABW_Challenge_01_SkeeBall_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_01_SkeeBall__BW_Challenge_01_SkeeBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, UnknownData_B2Q1, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, PracticeOver, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, UnknownData_HNQR, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, TutorialBallTable, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, SaveData, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, AlternateAudioList, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, SecondPauseCompleted, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, FirstPauseCompleted, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, UseAlternateAnnouncerVO, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, UnknownData_5KSG, 0x0593);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, PrimaryAudioList, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, CenterScoreboardBP, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, AssignedBall, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_01_SkeeBall_C, SkeeBallLaneActor, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_01_SkeeBall_C, 0x05C8);
		}

		// class ABP_TrophyAwardBase_C : public ATrophyAwardListenerBase
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAwardBase__BP_TrophyAwardBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, TrophyManager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, Sport, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, CanOnlyObtainInChallenges, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, ShowDebugMessages, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, UnknownData_IRBR, 0x037B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, TrophyRowEntry, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAwardBase_C, CanObtainInChallenges, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAwardBase_C, 0x0391);
		}

		// class AGripSet_Pineapple_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Pineapple__GripSet_Pineapple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Pineapple_C, 0x0370);
		}

		// class UBaseballAIBatter_AnimBP_C : public UBaseballBatterAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseballAIBatter_AnimBP__BaseballAIBatter_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_Root_CC828ABE4120FF9ACCBBA88E632B9B60, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_A982C91E4612FBE619A99F841DBF93DD, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_2B3AB8A846A8EC9AFC4DED9685152207, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_00D159EC49F15F8D0C0298B0BB4286CF, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_2A5C4F1B43CDC0112B301C8586D6110F, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_EC065F3645C8A1D0C1EC2AAF04337607, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_08F0F4B0439E1E646C5ACC8626C7088C, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_47A55FA446634FECD8EA85AE5AD187ED, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_A68F141245A3642FB71367A821EB4D93, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_27BAF6014CFB541BB177C68C59BF0574, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_E45757FD4FF297A06604ACBA09E508F2, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_1B4179324DA8955E3AAE89A0DDCDB7CA, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_9FE017B04A98BD4974E8F6982E7A7108, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_47BA82A241CF4C0838A3D89F5AAC2025, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_03D3521B423107518AC88299E6D42E38, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_TransitionResult_D7447D9E415072241389699493FCC460, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_CD2F02214A0C655CA2EA85AD8A174E10, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_117E47804F546766918675A4834F4D38, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_7CD029334D2EDE60F203FAA22143B9AA, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_6273A59048F44A020C7878B6D931AE8A, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_1009F9A44805CE1EE5F36D8D3510D2BD, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_4E8B04D4468B1B35A008AE8131362BE2, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_55B5480A41DB62BB249B5FBFF170B9E8, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_562892D74700A01453172893A231039A, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_E4149449411A14ED0EE8D4817EAFAF84, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_2E0F6014472FDFD12ECE75BCFE5D4B34, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_ModifyBone_8613FAB14DBE0B5CAEC5EA9C99ECBFCA, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_2C9ED0984E2019D9F2936DB78FB888CE, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_FD2D2603448F0DFF9ED93696EC4DA9B5, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_334E381842009BD76D77128F81FF25B3, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_66DD11874B38412E84233FAFE4BC9A6D, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_AC8ECE6C4A20609847AC6EB68C1D23EA, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_2A6F3AA24997281327A0D7811925E49C, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_SequencePlayer_0FB95BAD4A5C19F1609B15AFDD7FD3F4, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_6650D3C14BB3962ACDA57CB011ADC56A, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_LocalToComponentSpace_5CF566364DF4B8845C57738335BDDBE5, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_ModifyBone_4D945F9E4A68895B574C248C2DEC3A15, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateResult_EE69C9AC4E8353175C4033B5723D83BF, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, AnimGraphNode_StateMachine_51A784ED4EC134DC257E32BFC38F49C5, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, Negative_Reaction, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, Idle_Sequence, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, Fidget_Sequence, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, EnterStrikeLooking, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, UnknownData_ZVSV, 0x1359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIBatter_AnimBP_C, StrikeLooking_Sequence, 0x1360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAIBatter_AnimBP_C, 0x1368);
		}

		// class ABB_Minigame_Pitching_Whack_C : public ABB_Minigame_Pitching_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_Whack__BB_Minigame_Pitching_Whack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, UnknownData_TB6U, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, Influencer, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, CountdownActor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, CurrentScore, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, UnknownData_OJDV, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, GameSelector, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, WhackDelayBeforeThrow, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, WhackDelayAfterThrow, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, WhackTimeLimit, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, UnknownData_6PBY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, LargeScoreboard, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Whack_C, TrainingScoreboard, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_Whack_C, 0x0490);
		}

		// class UDebugHandButton_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DebugHandButton_Widget__DebugHandButton_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugHandButton_Widget_C, Icon_Image, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugHandButton_Widget_C, Text, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugHandButton_Widget_C, 0x0220);
		}

		// class AHub_MenuButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Hub_MenuButton__Hub_MenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ButtonLoc, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ButtonOffset, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ScaleRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, IconSet, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Backing, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Icon, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, IconBacking, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, IconFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Root, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Pulse_Alpha_972634BA4EE2056355C908A12E2EFA4D, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Pulse__Direction_972634BA4EE2056355C908A12E2EFA4D, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UnknownData_2BUE, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Pulse, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_ButtonMove_Alpha_0A920E89479400CB4532F48D49BE4E06, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_ButtonMove__Direction_0A920E89479400CB4532F48D49BE4E06, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UnknownData_XW9K, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_ButtonMove, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_IconRotate_rotate_7886C013425AABDBCD4F1E9DE93F15D0, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_IconRotate__Direction_7886C013425AABDBCD4F1E9DE93F15D0, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UnknownData_NS1D, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_IconRotate, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Scale_Alpha_3780072F4BA15FDADDBDDCA3E7CB6C29, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Scale__Direction_3780072F4BA15FDADDBDDCA3E7CB6C29, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UnknownData_BYRR, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Timeline_Scale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Type, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, UnknownData_VHH8, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, Button, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ButtonSelected, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, SelectionComplete, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ButtonPreDestroy, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_MenuButton_C, ScalingDown, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHub_MenuButton_C, 0x0401);
		}

		// class UHub_MenuButtonWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Hub_MenuButtonWidget__Hub_MenuButtonWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHub_MenuButtonWidget_C, InfoText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHub_MenuButtonWidget_C, TitleText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHub_MenuButtonWidget_C, 0x0220);
		}

		// class AChallengeBase_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__ChallengeBase__ChallengeBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_MaxFastness, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_MoreFaster, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_Faster, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_ChallengeMusic, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_Countdown, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Audio_BackgroundMusic, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Root, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, ChallengeLevelComplete, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, InfoPanel, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Announcer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, GameElements, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, CountdownActor, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, InstructionalText01, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, InstructionalText02, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, SFX_StartOfMatchMusic, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, TargetScore, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, CurrentScore, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, AnnouncerAudioList, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, AnnouncerSitIdle, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_J9RI, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, TN_IconGroup, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, AnnouncerAnimBP, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, LoopingMusicDelay, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_M6FF, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, BW_IconGroup, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, GameInstance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, TrophyRequirementMet, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_J2MI, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, BB_IconGroup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, OpenCapsuleOnSpawn, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_875T, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, SFX_StingerLose, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, SFX_StingerWin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, RestartedChallenge, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_ScramBalls, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_ScramRackets, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_ScramCourt, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_Ruleset, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_4K6L, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_GamesToWin, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BW_SF_ScramBalls, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BW_SF_ScramLanes, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BW_SF_SpecialBalls, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BW_SF_Ruleset, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_FilterScramBalls, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_FilterScramBats, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_QP_HomeTeam, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, UnknownData_9NC1, 0x047B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_FilterStrikeoutCount, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_FilterWalkCount, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_FilterInnings, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_PointsToWin, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_TN_SF_AI_Difficulty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BW_SF_AI_Difficulty, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Save_BB_AI_Difficulty, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, Challenge_AI_Difficulty, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallengeBase_C, SkipAnnouncer, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChallengeBase_C, 0x0491);
		}

		// class ATN_Minigame_RoboTest_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_RoboTest__TN_Minigame_RoboTest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, UnknownData_VS59, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, ActivePayloads, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_RoboTest_C, LauncherLeft, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_RoboTest_C, 0x0390);
		}

		// class AMenu_PanelImages_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_PanelImages__Menu_PanelImages_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, PanelPosR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, PanelPosCR, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, PanelPosCL, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, PanelPosL, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, PanelPosC, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, SelectionStarted, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, SelectionComplete, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, LocTextNames, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, Images, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PanelImages_C, Buttons, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_PanelImages_C, 0x03B0);
		}

		// class AButton_Sports_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_Sports__Button_Sports_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, ButtonLocLeft, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, ButtonLocRight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, ButtonLocMiddle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, StaticMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, WidgetComp, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, PanelLocText, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, OptionChanged, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, Red, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, UnknownData_35LO, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, LeftButton, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, RightButton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, OptionChanging, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, ExternallyDisabled, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, UnknownData_J73F, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Sports_C, MiddleButton, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_Sports_C, 0x03B0);
		}

		// class ABaseballAIBatter_Easy_Blueprint_C : public ABaseballAIBatter_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIBatter_Easy_Blueprint__BaseballAIBatter_Easy_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIBatter_Easy_Blueprint_C, 0x0ED2);
		}

		// class ATN_Train_09_UnlimitedServing_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_09_UnlimitedServing__TN_Train_09_UnlimitedServing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UnknownData_BM0P, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, maxBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, DelayBetweenLauncherBalls, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, LoopCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, BallsMissed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, BallsRegistered, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UnknownData_NR4S, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, LivingRoom_RightHanded_2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, LaunchTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, ActiveLaunchParameters, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UnknownData_PYWY, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, ModeButtons, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, SmashMenuPlayerSelection, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, MenuSelection, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UnknownData_7HFL, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, BallInPlay, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, ServeStyle, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, UnknownData_OQNY, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, InstrumentClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_09_UnlimitedServing_C, RandomBall, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_09_UnlimitedServing_C, 0x0699);
		}

		// class ATennisScramble_HockeyPuck_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_HockeyPuck__TennisScramble_HockeyPuck_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_HockeyPuck_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_HockeyPuck_C, 0x0388);
		}

		// class ABB_DeadEyeChallenge_Bonus_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_DeadEyeChallenge_Bonus__BB_DeadEyeChallenge_Bonus_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_ScaleScoreDown_Alpha_E7288B6B419CA82448B153BB84EB7066, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_ScaleScoreDown__Direction_E7288B6B419CA82448B153BB84EB7066, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UnknownData_AVX5, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_ScaleScoreDown, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleUp_Alpha_CE2370554070F2040759B9B0794885B2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleUp__Direction_CE2370554070F2040759B9B0794885B2, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UnknownData_WCBQ, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleUp, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_RevealBonusScore_Alpha_CD7AA00D4F340734EEAE2FAFAFCAE92F, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_RevealBonusScore__Direction_CD7AA00D4F340734EEAE2FAFAFCAE92F, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UnknownData_0J1J, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_RevealBonusScore, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleDown_Alpha_6ECFFABF4FC762B368BA70BE0C871F0A, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleDown__Direction_6ECFFABF4FC762B368BA70BE0C871F0A, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UnknownData_2FFJ, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusScaleDown, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusUp_Alpha_CF7E0B1F40CBEBBB07A482A3090E493C, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusUp__Direction_CF7E0B1F40CBEBBB07A482A3090E493C, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, UnknownData_QJDW, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, Timeline_BonusUp, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, BonusWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, StringText, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, ScoreReveal, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_DeadEyeChallenge_Bonus_C, BonusMovedUp, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_DeadEyeChallenge_Bonus_C, 0x03C0);
		}

		// class ATN_ChallengeRacket_Base_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeRacket_Base__TN_ChallengeRacket_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, UberGraphFrame, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, Timeline_0_alpha_13EA05DA45228A4A7B5F95A82739DB79, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, Timeline_0__Direction_13EA05DA45228A4A7B5F95A82739DB79, 0x0FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, UnknownData_AYO7, 0x0FC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, Timeline_1, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, DynamicMaterial, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, DefaultTints, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, NormalHitColors, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, ChargeHitColors, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, SliceHitColors, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, ChargeSliceHitColors, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, ShotTypes, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, UnknownData_MOD3, 0x1029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, DefaultIntensity_1, 0x102C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Base_C, NewVar_0_1, 0x1030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeRacket_Base_C, 0x1040);
		}

		// class ABP_TrophyAward_TN_SlappyFish_C : public ABP_TrophyAward_Tennis_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_SlappyFish__BP_TrophyAward_TN_SlappyFish_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_SlappyFish_C, UberGraphFrame, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_SlappyFish_C, 0x03B8);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_0OJY, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_PCF3, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_LACA, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x05B0);
		}

		// class ATennisScramble_TennisBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_TennisBall__TennisScramble_TennisBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_TennisBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_TennisBall_C, 0x0388);
		}

		// class ADebugString_BP_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__DebugString_BP__DebugString_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, Camera, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, DebugStringWidget, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, String, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, LifeTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, UnknownData_8EBD, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugString_BP_C, StringsList, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugString_BP_C, 0x0398);
		}

		// class ABB_FloorCollision_C : public ABaseballField
		TEST_METHOD(BlueprintGeneratedClass__BB_FloorCollision__BB_FloorCollision_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FloorCollision_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FloorCollision_C, FloorCollisionMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FloorCollision_C, BallLanded, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FloorCollision_C, BB_BallLanded, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_FloorCollision_C, 0x03A0);
		}

		// class UFeatherMenuWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FeatherMenuWidget__FeatherMenuWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFeatherMenuWidget_C, TitleText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFeatherMenuWidget_C, 0x0218);
		}

		// class AServeLauncher_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ServeLauncher__ServeLauncher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, SpawnParticleSystem, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, TN_BallExpandAudio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherCloseAudio, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherOpenAudio, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherStaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_SpeedHack_rise_33B95E9F4903AB0659258CA309446694, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_SpeedHack__Direction_33B95E9F4903AB0659258CA309446694, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_FNPT, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_SpeedHack, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_MoveToSide_alpha_06A56ACD4929305E5C50AD9F63962B45, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_MoveToSide__Direction_06A56ACD4929305E5C50AD9F63962B45, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_USQK, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_MoveToSide, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_DelayHack_Alpha_57DB0E8543296BF282002095CFD12263, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_DelayHack__Direction_57DB0E8543296BF282002095CFD12263, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_AFKI, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_DelayHack, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ScaleBallUpDown_Scalor_0300A44840850E2E0F196389785EFD61, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ScaleBallUpDown__Direction_0300A44840850E2E0F196389785EFD61, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_L90K, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ScaleBallUpDown, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherGrowShrink_Scalor_4CEC652840168CA44888AE8245425BC0, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherGrowShrink__Direction_4CEC652840168CA44888AE8245425BC0, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_766J, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, LauncherGrowShrink, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Rise_rise_92EF15324F30272CF96F94A621908078, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Rise__Direction_92EF15324F30272CF96F94A621908078, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_PNKA, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Rise, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Bobble_Position_1AE474B94BC8B455BDE1799BFBA797F2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Bobble__Direction_1AE474B94BC8B455BDE1799BFBA797F2, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_F7U1, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Bobble, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Spin_Scalor_77B28D424600CE42407828B99D5F0AC6, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Spin__Direction_77B28D424600CE42407828B99D5F0AC6, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_8YSA, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Timeline_Spin, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, BallFinalLocation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, PlayerOneServeLocation, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, PlayerTwoServeLocation, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, InitialScale, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, FloorHeight, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ServeScale, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ScaleBall, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_RFDH, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Ball, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, TeeBall, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_5EYZ, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, OnBallHit, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Instructions, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, BallRadius, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_NJ5S, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, GameInstance, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, NoTip, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Player1HasHit, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Player2HasHit, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, Player1Serving, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, XServeOffset, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, YServeOffset, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, BallHasBeenHit, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, MoveSpawnedBalls, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UpdateTeeBallMode, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, UnknownData_S6IO, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServeLauncher_C, ResetBallTimerHandle, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServeLauncher_C, 0x0480);
		}

		// class ABW_CurlingStone_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_CurlingStone__BW_CurlingStone_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_CurlingStone_C, 0x0F01);
		}

		// class ABB_BilliardBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BilliardBall__BB_BilliardBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BilliardBall_C, 0x1038);
		}

		// class AScramPlayerHandPossessor_BP_Left_C : public AScramPlayerHandPossessor_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHandPossessor_BP_Left__ScramPlayerHandPossessor_BP_Left_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHandPossessor_BP_Left_C, 0x03E0);
		}

		// class ATennisAIRacquet_Blueprint_C : public AScramMeshActor
		TEST_METHOD(BlueprintGeneratedClass__TennisAIRacquet_Blueprint__TennisAIRacquet_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAIRacquet_Blueprint_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAIRacquet_Blueprint_C, SwingParticleSystem, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAIRacquet_Blueprint_C, OwnerAI, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAIRacquet_Blueprint_C, 0x0368);
		}

		// class ABowlingModelRefs_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BowlingModelRefs__BowlingModelRefs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Root, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Bomb, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, BowlingBall, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Basketball, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, CheeseWheel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, CurlingStone, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Egg, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Football, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, GoldenBall, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Pineapple, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, RollingPin, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, TennisBall, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, Turkey, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingModelRefs_C, VibroBall, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingModelRefs_C, 0x0398);
		}

		// class UBB_PitchingTargetIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_PitchingTargetIcon__BB_PitchingTargetIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_PitchingTargetIcon_C, Icon_Image, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_PitchingTargetIcon_C, 0x0218);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class ABB_Challenge_06_3rdBase_Helper_C : public AFieldingPlayerManager
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_06_3rdBase_Helper__BB_Challenge_06_3rdBase_Helper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_Helper_C, DefaultSceneRoot, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_06_3rdBase_Helper_C, 0x0380);
		}

		// class ABW_ResultsTracks_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_ResultsTracks__BW_ResultsTracks_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, BW_Stadium_01_ResultsTrack_Player2_Pins, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, BW_Stadium_01_ResultsTrack_Player2_Balls, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, BW_Stadium_01_ResultsTrack_Bonus, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, BW_Stadium_01_ResultsTrack_Player1_Balls, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, BW_Stadium_01_ResultsTrack_Player1_Pins, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot4_Alpha_4781FE7B4126C673A5BCBA9CA837465F, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot4__Direction_4781FE7B4126C673A5BCBA9CA837465F, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UnknownData_53WU, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot3_Alpha_0AC394B14E2D9FC2D661A09AC1646006, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot3__Direction_0AC394B14E2D9FC2D661A09AC1646006, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UnknownData_L7GI, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot2_Alpha_8C94B76240EF9745C65E66A91DC441B4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot2__Direction_8C94B76240EF9745C65E66A91DC441B4, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UnknownData_Y7W9, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot1_Alpha_13CC57CE45C039264E0FE28587F8779A, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot1__Direction_13CC57CE45C039264E0FE28587F8779A, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UnknownData_Y7LN, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot0_Alpha_9DC82938497AFE3DEAD5BC8063DFECA6, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot0__Direction_9DC82938497AFE3DEAD5BC8063DFECA6, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, UnknownData_YB2R, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, Timeline_Slot0, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, P1_Pins, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, P1_Balls, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, bonus, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, P2_Balls, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ResultsTracks_C, P2_Pins, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_ResultsTracks_C, 0x03D8);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DisplayNodeExpansionStates, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0088);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0340);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_AC66, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bIsObjectProperty, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_6RBC, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_OO5S, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_0NDA, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x00F0);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x00F0);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x00F0);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x00F0);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0050);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_5YTB, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0070);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0050);
		}

		// class ABowlingLane_BankShot_C : public ABowlingLane_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BowlingLane_BankShot__BowlingLane_BankShot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, UberGraphFrame, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, ConveyorRoot, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, BlockerCol, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Plinko_4_3, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Plinko_4_2, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Plinko_2_3, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Plinko_0_2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Plinko_0_1, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, PlinkoBack, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, Box, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, StaticMesh_Vis_Bottom, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, SpawnLocations, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, ScoreValues, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_BankShot_C, RelightDelay, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingLane_BankShot_C, 0x05A4);
		}

		// class ABB_BowlingBall_BB_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BowlingBall_BB__BB_BowlingBall_BB_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BowlingBall_BB_C, 0x1038);
		}

		// class ADebugButtonGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DebugButtonGroup__DebugButtonGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, ButtonInfos, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, Columns, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, UnknownData_FXGM, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, ChoiceMade, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, Spacing, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, ButtonSelected, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, Buttons, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, AutoClose, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, UnknownData_FV87, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugButtonGroup_C, ChoiceMadePreAutoDestroy, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugButtonGroup_C, 0x0390);
		}

		// class ABB_Softball_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Softball__BB_Softball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Softball_C, 0x1038);
		}

		// class AFloorLightUp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FloorLightUp__FloorLightUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, Plane, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, TimelineScale_Scale_83EA0ADE467046AE00C88F9DB661EE87, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, TimelineScale__Direction_83EA0ADE467046AE00C88F9DB661EE87, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, UnknownData_2INY, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, TimelineScale, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUp_C, InitialScale, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFloorLightUp_C, 0x035C);
		}

		// class ATN_Train_06_ScrambleInstruments_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_06_ScrambleInstruments__TN_Train_06_ScrambleInstruments_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, UnknownData_XSTF, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, maxBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, DelayBetweenLauncherBalls, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LoopCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, BallsMissed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, BallsRegistered, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, UnknownData_LW7F, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LivingRoom_RightHanded_2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LaunchTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, ActiveLaunchParameters, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, IntroDone, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LauncherPos01_HitBatTarget, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LauncherPos02_HitNextBatTarget, 0x065E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LauncherPos03_HitPoolNoodle, 0x065F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LauncherPos04_HitFoamFinger, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_06_ScrambleInstruments_C, LauncherPos05_HitFloppyFish, 0x0661);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_06_ScrambleInstruments_C, 0x0662);
		}

		// class ATennisScramble_FoamFinger_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_FoamFinger__TennisScramble_FoamFinger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_FoamFinger_C, 0x0380);
		}

		// class ABP_TrophyAward_TN_FullService_C : public ABP_TrophyAward_TN_MatchCompleteBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_FullService__BP_TrophyAward_TN_FullService_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_FullService_C, UnknownData_4GFJ, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_FullService_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_FullService_C, UsingTraditionalServing, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_FullService_C, 0x03C9);
		}

		// class ABP_Trophy_BB_GoldenGlove_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_GoldenGlove__BP_Trophy_BB_GoldenGlove_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_GoldenGlove_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_GoldenGlove_C, LocalPlayer, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_GoldenGlove_C, CurrentHand, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_GoldenGlove_C, DistanceFieldedThreshold, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_GoldenGlove_C, 0x03F4);
		}

		// class UPlayerCountWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerCountWidget__PlayerCountWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCountWidget_C, SubHeaderText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCountWidget_C, 0x0218);
		}

		// class AScramPlayer_BP_C : public AScramPlayer
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayer_BP__ScramPlayer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UberGraphFrame, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, Timeline_Fade_Alpha_224CBD364A8D6ECA75A271AA329BF531, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, Timeline_Fade__Direction_224CBD364A8D6ECA75A271AA329BF531, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_05KO, 0x09BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, Timeline_Fade, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, Buttons, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_XLLX, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SpawnAnchor_Temp, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, BigMode, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_3LOK, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, Speed, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, GameInstance, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, PlayerFadedOut, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, FadeInDisabled, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, FadedOut, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, ReenablePause, 0x0A22);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_65XR, 0x0A23);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, ReturnIndicator_1, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, PlayerExitBoundary, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, PlayerEnterBoundary, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, VoicePermissionString, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoMode, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_B5YN, 0x0A61);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoOptionsFast, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoOptionsSlow, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoFastIndex, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoSlowIndex, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SlomoReset, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, UnknownData_614Z, 0x0A91);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, SaveData, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, RemotePlayerReady, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, PlayerRecentered, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, ActiveButtonActor, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, ThumbDownR, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayer_BP_C, ThumbDownL, 0x0AC9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayer_BP_C, 0x0ACA);
		}

		// class AMenu_GameDetails_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_GameDetails__Menu_GameDetails_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, TrophyOffset, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, TrophyCompleteMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, StaticMesh_CompleteRibbon, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, WidgetCompInfo, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, TrophyIncompleteMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, BackingMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, InfoBoxRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, WidgetCompDetails, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, MenuRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Scene, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Timeline_MenuScale_Alpha_AE81ADC04EE235D92F0925892DC06183, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Timeline_MenuScale__Direction_AE81ADC04EE235D92F0925892DC06183, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, UnknownData_RVPT, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Timeline_MenuScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, ResultsScoreComplete, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, DetailsWidget, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Mode, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, UnknownData_VH3C, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, Game, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, InfoWidget, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, ChallengeTrophyAwarded, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, UnknownData_XDR1, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, SaveData, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_GameDetails_C, ChallengeAttempted, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_GameDetails_C, 0x03D9);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class ATN_Challenge_07_ProLeague_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_07_ProLeague__TN_Challenge_07_ProLeague_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_07_ProLeague_C, UnknownData_R9G1, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_07_ProLeague_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_07_ProLeague_C, Crowd, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_07_ProLeague_C, Scoreboards, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_07_ProLeague_C, AnnouncerSequence, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_07_ProLeague_C, 0x06F0);
		}

		// class ABP_TrophyAward_BB_Challenge07_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BB_Challenge07__BP_TrophyAward_BB_Challenge07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BB_Challenge07_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BB_Challenge07_C, 0x03E0);
		}

		// class UNoPause_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NoPause_Widget__NoPause_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoPause_Widget_C, ImageIcon, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoPause_Widget_C, 0x0218);
		}

		// class ATN_FoamFinger_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_FoamFinger__TN_FoamFinger_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_FoamFinger_C, 0x0FB8);
		}

		// class ABB_StadiumWindowSpawner_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_StadiumWindowSpawner__BB_StadiumWindowSpawner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, AllWindows, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, ShowTargetScore, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, UnknownData_F9D9, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, GameManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StadiumWindowSpawner_C, AllLightFixtures, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_StadiumWindowSpawner_C, 0x0368);
		}

		// class UPnpWinnerNameWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PnpWinnerNameWidget__PnpWinnerNameWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPnpWinnerNameWidget_C, WinnerName, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPnpWinnerNameWidget_C, 0x0218);
		}

		// class AHub_Beacon_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Hub_Beacon__Hub_Beacon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, StaticMesh_Icon, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, StaticMesh_Backing, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, StaticMesh_Frame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, TopRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, ScaleLineRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, HeadRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, AllScaleRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, StaticMesh_Arrows, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, HeadMoveRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, StaticMesh_Line, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Offset, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Root, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_TransitionIcon_Alpha_495A686242EEC770F0A158815E90D715, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_TransitionIcon__Direction_495A686242EEC770F0A158815E90D715, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_5L2I, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_TransitionIcon, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Topscale_Alpha_2ADEF64340C855B18047DD910EA662CE, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Topscale__Direction_2ADEF64340C855B18047DD910EA662CE, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_PO97, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Topscale, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_RotateIcon_Alpha_A05FCFDD45C33DD0DF5467BC2CB873B1, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_RotateIcon__Direction_A05FCFDD45C33DD0DF5467BC2CB873B1, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_0AOY, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_RotateIcon, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Transform_Alpha_9D7F7B2F42B5A6B8DADB41A90808F051, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Transform__Direction_9D7F7B2F42B5A6B8DADB41A90808F051, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_SQSI, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_Transform, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_AllScale_Alpha_09FFD88D44067EB5D51393AC547C2260, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_AllScale__Direction_09FFD88D44067EB5D51393AC547C2260, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_IPEV, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Timeline_AllScale, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Type, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_MB6U, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, ActivationComplete, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Activating, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, TransitionStarted, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, UnknownData_68K0, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, Count, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, FirstRiseComplete, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHub_Beacon_C, PlaySpawnSfx, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHub_Beacon_C, 0x0411);
		}

		// class ABB_Minigame_Pitching_AI_Catching_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_AI_Catching__BB_Minigame_Pitching_AI_Catching_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, GameSelector, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, SportManager, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, strikeZone, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, GameInstance, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_AI_Catching_C, GameElements, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_AI_Catching_C, 0x0368);
		}

		// class ATN_Minigame_Practice_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_Practice__TN_Minigame_Practice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, UnknownData_GJC0, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, ActivePayloads, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LauncherLeftOld, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LauncherRightOld, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LauncherSelectionButtons, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LaucherChoiceMenu, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, GameWall, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LauncherLeft, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, LauncherRight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, ServeLauncher, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, ServeLocationIndicator, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, PracticeServe, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, UnknownData_Y50X, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, GameInstance, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Practice_C, DebugBallsSetting, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_Practice_C, 0x03E9);
		}

		// class AMenu_ChooseSport_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_ChooseSport__Menu_ChooseSport_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, StaticMeshR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, StaticMeshL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonPosBowling, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonPosBaseball, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonPosTennis, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, StaticMeshM, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, StaticMesh_Back, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, Widget, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, Scene, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonBaseball, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonTennis, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, ButtonBowling, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, GameInstance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, SportChosen, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSport_C, SelectionMade, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_ChooseSport_C, 0x03B8);
		}

		// class ATennisModelRefs_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TennisModelRefs__TennisModelRefs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Root, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, AcceleratorBall, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Baseball, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Basketball, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, BeachBall, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeBall, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeBallBlue, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeBallRed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishballStatic, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishballSkeleton, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishBallAnim, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Football, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Frisbee, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, GolfBall, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, PingPongBall, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Shuttlecock, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, SoccerBall, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, TennisBall, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, Wiffleball, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, BaseballBat, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeRacket, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeRacketBlue, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, ChallengeRacketRed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, CricketBat, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FoamFinger, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishRacketStatic, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishRacketSkeleton, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, FishRacketAnim, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, GolfClub, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, PingPongPaddle, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, PoolNoodleStatic, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, PoolNoodleSkeleton, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, PoolNoodleAnim, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, TennisRacket, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, TennisRacketPro, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, BlueRacketFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, RedRacketFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisModelRefs_C, RedRacketString, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisModelRefs_C, 0x0458);
		}

		// class AHubMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HubMenu__HubMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, StaticMesh13, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, StaticMesh10, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, StaticMesh7, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, StaticMesh4, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, StaticMesh3, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Sphere, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconLoc_Trophy, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconLoc_Tennis, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconLoc_Multiplayer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconLoc_Bowling, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconLoc_Baseball, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Beacons, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MenuLoc_Trophy, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MenuLoc_Bowling, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MenuLoc_Baseball, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MenuLoc_Multiplayer, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, ScramLookAtActivator_MULTIPLAYER, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, ScramLookAtActivator_TROPHYROOM, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, ScramLookAtActivator_BOWLING, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, ScramLookAtActivator_BASEBALL, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, TrophyRoom, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, multiplayer, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Bowling, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Baseball, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MenuLoc_Tennis, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, ScramLookAtActivator_TENNIS, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Tennis, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Root, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookAtEnabled, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, UnknownData_RUZV, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, HubMenuSelection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, Closing, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, UnknownData_2UGH, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconActors, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconBaseball, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconBowling, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconMultiplayer, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconTennis, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BeaconTrophy, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, TennisButton, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, AllButtons, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BaseballButton, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, BowlingButton, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, MultiplayerButton, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, TrophyRoomButton, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, NuxIntro, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, UnknownData_OGEH, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, SelectionStarted, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookinAtTennis, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookinAtBaseball, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookinAtBowling, 0x04BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookinAtMultiplayer, 0x04BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHubMenu_C, LookinAtTrophy, 0x04BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHubMenu_C, 0x04BD);
		}

		// class AFlyTextLabel_Blueprint_C : public AFlyTextLabel
		TEST_METHOD(BlueprintGeneratedClass__FlyTextLabel_Blueprint__FlyTextLabel_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFlyTextLabel_Blueprint_C, 0x03A0);
		}

		// class ABW_Train_03_ScrambleBalls_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_03_ScrambleBalls__BW_Train_03_ScrambleBalls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_03_ScrambleBalls_C, UnknownData_5SM5, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_03_ScrambleBalls_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_03_ScrambleBalls_C, PracticeOver, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_03_ScrambleBalls_C, 0x0481);
		}

		// class UButton_SideOptionWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_SideOptionWidget__Button_SideOptionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_SideOptionWidget_C, PanelText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_SideOptionWidget_C, 0x0218);
		}

		// class AArenaScrambleEffect_RaiseNet_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ArenaScrambleEffect_RaiseNet__ArenaScrambleEffect_RaiseNet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, Timeline_RaiseNet_Alpha_38FA3747460EE7CB9CF7FE91FDA69741, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, Timeline_RaiseNet__Direction_38FA3747460EE7CB9CF7FE91FDA69741, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, UnknownData_Q298, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, Timeline_RaiseNet, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, InitialTargetBottomMargin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, InitialBufferBottomMargin, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, Net, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, DisableLocations, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, Delay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArenaScrambleEffect_RaiseNet_C, InitialLocation, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArenaScrambleEffect_RaiseNet_C, 0x0378);
		}

		// class ATennisScramble_RandomRacket_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_RandomRacket__TennisScramble_RandomRacket_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_RandomRacket_C, 0x0380);
		}

		// class UScramTennisAI_AnimBP_C : public UTennisAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ScramTennisAI_AnimBP__ScramTennisAI_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_Root_D8CF000B45497057D5AD81A98BF35CCA, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_1EED930C4DA9F71AFF661AB302A6574E, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_47578A91436C6A8D1A8A3C86D2F9D591, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_DEB565A049AAB00EE9DA1E92673C4C31, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_0041FF4B446F72C3DC0F3A8A49BD3F3F, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_E1BD907B40E5F5510CD5ECB2A9A7E03A, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_40ACD8CF4C70AA8DBC7EC1BB45F31950, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_DA72B4014E984EF3ECBCFEA301449D35, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_84C8503241AEEEDCBD4B6ABF51C270BF, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_727962294C8D35C6192B1B8D3C45DFCD, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_5EC2169C4F9BEEFD7012299F250573AD, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_80F8DB9142D0167D7F5B4084D4962035, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_2238B3CF4616494924C233BD01A29C6A, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_842300A346BAE43059FD279E90A8F77A, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_42C771014E37E27F270B6C94FDA6848C, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_E7272BDA4A53884BCB1538931B25F97B, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_502F385D4E161A445C137B9150AF5C8B, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_08D22B96459EA0DD65D4EDB746F10DE5, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_3FE2F3724607C34F97F350ABA907E2EC, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_FB71761446C8C36878A467ABAEBE1552, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TransitionResult_BC55658C444E08F580C33EA4DFB7BB2D, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_7915A8134C2C7D5E24CB6A8760CA8EEB, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_E47B495E4607AF9E7F7B17867A0C0163, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_456C250F4C27F5FF015ACF855C09F008, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_C77ABCB248C4D1516F3DA5879BD8E818, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_1CA0BC45413DFFC361EB638722C28BF9, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_BlendListByInt_D51397D947B1F1689F3A86A729F2A060, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_7FA18C314063C6F27F2689AD0AA2CA5F, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_7DDFAB0B4D8BA17FAFA2D3A931593BBE, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_F9786E514FC41D6EB286118375A698CA, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_B90DF9804FF08E092FFE97A239EC9EFA, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_0C6BCFBB4C73D3F217F7CAB76CCD0757, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_059C872F47F5E67B0A807A966BAE528B, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_70F0C50F4D9553D714BA7F869E8F23E6, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_4027B029424807FE3A064DBB5AE4022D, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_2FBFF73648237A131CE3CC9AADB79169, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_F5FD7A6C413DAC22A95A34872FBB5C70, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_11733AF3453048C3FAF55EB2345E55AA, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_AB7A3187442F735A3A6C4389D0BA1BB1, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_31DF338845FFD2AC9EB0F7831D1DE8EF, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_46DA403742E5BA15C4340ABAC8193664, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_296CEA6F423568408DD6AE9287FF4C2B, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_8EDB34BF4C57619A550CD0BCCE455A81, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_LocalToComponentSpace_B71F9F7E4DEF00AC1CC0988D62B757E1, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_ModifyBone_E184F4714C6604D3CF64679C60D852F8, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_TwoWayBlend_ECCC1CAC498D8A231D94D28DBE0491AA, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_09B7EAC1401CD98D218C628C804B7DF2, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_SequencePlayer_E5B7F1644385FF3CBAACEEB66477BD77, 0x16B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateResult_D0349B194E52AB832B4102A3AD9252EE, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, AnimGraphNode_StateMachine_AD524CEA4ED83CB873F09793BBD6DF5F, 0x1798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, Forehands, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, Reactions, 0x1888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, Backhands, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramTennisAI_AnimBP_C, PlaySwingFX, 0x18A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramTennisAI_AnimBP_C, 0x18B8);
		}

		// class AFrontEndManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FrontEndManager__FrontEndManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, MenuRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, MenuScaleRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, StaticBottomButtonRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, LoopingConfetti_Leftovers, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_06, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_05, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_04, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_03, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_02, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ConfettiCannon_01, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AudioMenu, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AudioLogoDisappear, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AudioIntro, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Root, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_ErrorMessageScale_Alpha_A59E351D4C3828FDC44A39ABEEF795D9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_ErrorMessageScale__Direction_A59E351D4C3828FDC44A39ABEEF795D9, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_VFAG, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_ErrorMessageScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_RotateAnnouncer_Alpha_4B4F0E704FF2B70B4EF3E98B5E3E60C8, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_RotateAnnouncer__Direction_4B4F0E704FF2B70B4EF3E98B5E3E60C8, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_V7Z0, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Timeline_RotateAnnouncer, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, GameInstance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, intValue, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, IsSpectator, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, TutorialJustCompleted, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_DORZ, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Player, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, TripleTapEnabled, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_2OE1, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ButtonPresses, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, MainMenu, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DebugMainMenu, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, TempMenu, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DetailsMenu, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Sport, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, LoadTrainingLevel, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_00UD, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, LevelOverride, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, SelectedSport, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Selected1P, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_DD8L, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ActiveGameHandler, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, StandLocator, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Logo, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Announcer, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DisableLogoSpawn, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_2O7J, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, TrophyResetButton, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AnnouncerAnimBP, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ReplayNux, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, PlayerInitLocCorrect, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, PlayerInitLocWrong, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DoSetup, 0x045B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_N7LL, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, HubMenu, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, VoicePermissionString, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, MenuStand, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, MenuOffset, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AnnouncerAngle, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AlreadyLoopingConfetti, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, AllowOptionMenu, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_705J, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Header, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ErrorMenu, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ErrorButton, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, IntroMessageDisplayed, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, ShortIntro, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DemoMode, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, UnknownData_627A, 0x04AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, DemoMainMenu, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Begin_Intro_Timer, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Reveal_Timer, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFrontEndManager_C, Announcer_Timer, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFrontEndManager_C, 0x04D0);
		}

		// class ABB_Scoreboard_TopTimer_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Scoreboard_TopTimer_BP__BB_Scoreboard_TopTimer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, CurrentTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, ClockActive, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, UnknownData_AJVL, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_TopTimer_BP_C, TimerWidget, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Scoreboard_TopTimer_BP_C, 0x0350);
		}

		// class ABP_Trophy_BB_Candyman_C : public ABP_TrophyAward_Baseball_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Candyman__BP_Trophy_BB_Candyman_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Candyman_C, UnknownData_J7KG, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Candyman_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Candyman_C, 0x03C0);
		}

		// class ABatting_Target_01_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__Batting_Target_01__Batting_Target_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, Audio_Grow, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, Audio_Shrink, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ScoreWidget, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, StaticMesh, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, DefaultSceneRoot, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ChangeTargetSize_Scale_D9CDDB3D44C9C1EBFDDBB295ED36D6A0, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ChangeTargetSize__Direction_D9CDDB3D44C9C1EBFDDBB295ED36D6A0, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, UnknownData_X6RG, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ChangeTargetSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ScoreText, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ScoreAmount, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, UnknownData_N7Q8, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ScoreColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ImpactSound, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, TargetOverlapDetection, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, InitialTargetScale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, ScoreVisible, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABatting_Target_01_C, PlayImpactSound, 0x04BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABatting_Target_01_C, 0x04BE);
		}

		// class AQuarterPanel_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__QuarterPanel__QuarterPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, WidgetComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, StaticMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, LocTextName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AQuarterPanel_C, StartRed, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AQuarterPanel_C, 0x0359);
		}

		// class AGameHandlerTraining_C : public AGameHandlerBase_C
		TEST_METHOD(BlueprintGeneratedClass__GameHandlerTraining__GameHandlerTraining_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, Sport, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, UnknownData_9TIA, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, Scoreboards, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, GameInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, MiniGame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerTraining_C, GameElements, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameHandlerTraining_C, 0x0390);
		}

		// class ABW_Challenge_03_EasyPeesy_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_03_EasyPeesy__BW_Challenge_03_EasyPeesy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_03_EasyPeesy_C, UnknownData_LVUP, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_03_EasyPeesy_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_03_EasyPeesy_C, Crowd, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_03_EasyPeesy_C, PairedList, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_03_EasyPeesy_C, 0x0568);
		}

		// class UTrainingOptionsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TrainingOptionsWidget__TrainingOptionsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, Image_SelectionBack0, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, Image_SelectionBack1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, R0Parent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, R1Parent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, SelectionText0, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, SelectionText1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, TextL, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, TextM, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, TextR0, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrainingOptionsWidget_C, TextR1, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrainingOptionsWidget_C, 0x0260);
		}

		// class AMenu_Results_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Results__Menu_Results_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ParticlePos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarRPos, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarRotateR, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarLPos, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarRotateL, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, StaticMeshIcon, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, SkeletonLocRight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, SkeletonLocLeft, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Audio_HighScore, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Audio_Wipe, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Audio_Grow, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Audio_Slide, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, StaticMesh_ScoreBox, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, WidgetCompScoreBox, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ScoreBoxRoot, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, WidgetCompText, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, MenuRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Scene, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBoxBump_Alpha_FDB1CA6F4039A6159022DF91E7A99AF5, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBoxBump__Direction_FDB1CA6F4039A6159022DF91E7A99AF5, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_L4BC, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBoxBump, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBox_Alpha_E320AE7E4086102A8E7596B3DF0A8690, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBox__Direction_E320AE7E4086102A8E7596B3DF0A8690, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_NJII, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBox, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxBump_Alpha_84CFCA044B93199751CE1594230363F7, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxBump__Direction_84CFCA044B93199751CE1594230363F7, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_Q9WK, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxBump, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleMessage_Alpha_DFEA859340802F40C282C58B039A493F, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleMessage__Direction_DFEA859340802F40C282C58B039A493F, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_OQGM, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleMessage, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveAvatars_Alpha_567151534100813AC844ED9F7250D6AE, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveAvatars__Direction_567151534100813AC844ED9F7250D6AE, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_66ZK, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveAvatars, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleAvatars_Alpha_76D02C00449A024A0BB4A4910F6356C4, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleAvatars__Direction_76D02C00449A024A0BB4A4910F6356C4, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_NAKJ, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleAvatars, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowHighScore_Alpha_79C83438467B15F6C71136B634D43F43, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowHighScore__Direction_79C83438467B15F6C71136B634D43F43, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_SK6H, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowHighScore, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxText_Alpha_5C963E034277BAD06D16429B01E2470B, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxText__Direction_5C963E034277BAD06D16429B01E2470B, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_0U7S, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_SwapBoxText, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowInnerMessage_Alpha_9A8DA9EF46CBAAF11E0B2BB422D313C2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowInnerMessage__Direction_9A8DA9EF46CBAAF11E0B2BB422D313C2, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_J888, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ShowInnerMessage, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBox_Alpha_67B2FC6048F8CDA7624222B5EAA01778, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBox__Direction_67B2FC6048F8CDA7624222B5EAA01778, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_VT0W, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_ScaleBox, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveTitle_Alpha_69BA5BD146B9FF82587B8AB516EF6658, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveTitle__Direction_69BA5BD146B9FF82587B8AB516EF6658, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_94NP, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Timeline_MoveTitle, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ResultsDisplayComplete, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ResultsData, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, Mode, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_QYAQ, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ResultsWidget, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ResultsBoxWidget, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, GameName, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, ChallengeNoScore, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_5M8P, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, GameInstance, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarLRotStart, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, TwoAvatars, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UnknownData_F1ZN, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarR, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, AvatarL, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, HasMessage, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, HasScore, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, UseBump, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Results_C, QuickFail, 0x04D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Results_C, 0x04D4);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_P0O5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_PKQL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_82G7, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, RestrictedGameplayTagTables, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_RHNU, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0190);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_A7F6, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_SUJE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B0);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class ABP_TrophyAward_TN_TrainingComplete_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_TrainingComplete__BP_TrophyAward_TN_TrainingComplete_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_TrainingComplete_C, 0x03D8);
		}

		// class ABW_Pinsetter_C : public ABowlingPinsetter
		TEST_METHOD(BlueprintGeneratedClass__BW_Pinsetter__BW_Pinsetter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, UberGraphFrame, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, BW_CMN_PinSetter_Blue, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Audio_Ascend, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Audio_Descend, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Timeline_PinReset_Position_E25840F84F0560C8DE7A2886CF9F7859, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Timeline_PinReset__Direction_E25840F84F0560C8DE7A2886CF9F7859, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, UnknownData_DQL8, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Timeline_PinReset, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PinLocations, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PinResetComplete, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PinsetterLoc, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, UnknownData_RNWL, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PindeckHidden, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, LaneChanging, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PinResetting, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, NoPinRespawn, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Player1, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, UnknownData_7Z6P, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, Alley, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, PinLocationsOverride, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pinsetter_C, DisablePinRespawn, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Pinsetter_C, 0x03D1);
		}

		// class UFunctionLibraryLite_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__FunctionLibraryLite__FunctionLibraryLite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctionLibraryLite_C, 0x0028);
		}

		// class ATennisScramble_PoolNoodle_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_PoolNoodle__TennisScramble_PoolNoodle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_PoolNoodle_C, 0x0380);
		}

		// class ABW_Egg_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Egg__BW_Egg_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, UnknownData_YHZD, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, UberGraphFrame, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HatchVFXScale, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, TurkeyRotations, 0x0F14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, TurkeyOffsets, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, TurkeyDelays, 0x0F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, TurkeyKicks, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, UnknownData_I1XQ, 0x0F24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HatchParams, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HatchSFX, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, TurkeyList, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HatchVFX, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HatchCalled, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Egg_C, HadBowlingAuthority, 0x0F59);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Egg_C, 0x0F5A);
		}

		// class ABB_Equipment_Set_C : public AScramEquipmentSet
		TEST_METHOD(BlueprintGeneratedClass__BB_Equipment_Set__BB_Equipment_Set_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, UberGraphFrame, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, AnimatedMesh, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, Widget, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, TargetZone, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, BallTypeOverride, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, EquipmentGrabbed, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, OffhandMaterialOverride, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Equipment_Set_C, HomeTeam, 0x0A50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Equipment_Set_C, 0x0A51);
		}

		// class ABB_Trail_Normal_SmallGlow_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Trail_Normal_SmallGlow__BB_Trail_Normal_SmallGlow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Trail_Normal_SmallGlow_C, 0x037C);
		}

		// class UBall_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Ball__Ball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBall_C, 0x0028);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0108);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// class ATN_Chicken_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Chicken__TN_Chicken_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Chicken_C, UberGraphFrame, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Chicken_C, AnimationMesh, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Chicken_C, MaxRacketImpulse_1, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Chicken_C, MinRacketImpulse_1, 0x116C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Chicken_C, 0x1170);
		}

		// class AMenu_MpSportIcon_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_MpSportIcon__Menu_MpSportIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Audio, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Mesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Rotate_Alpha_507FE46C4F1B9498CBB390A1E95AEC25, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Rotate__Direction_507FE46C4F1B9498CBB390A1E95AEC25, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, UnknownData_HMML, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Rotate, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Scale_Alpha_A8C4E750457774424B9749BF228BE0BE, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Scale__Direction_A8C4E750457774424B9749BF228BE0BE, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, UnknownData_P5NA, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Timeline_Scale, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_MpSportIcon_C, Sport, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_MpSportIcon_C, 0x0369);
		}

		// class ATennisScramble_FloppyFish_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_FloppyFish__TennisScramble_FloppyFish_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_FloppyFish_C, 0x0380);
		}

		// class AGripSet_CurlingStone_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_CurlingStone__GripSet_CurlingStone_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_CurlingStone_C, 0x0370);
		}

		// class ABB_Minigame_BattingPractice_C : public ABB_Minigame_Batting_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_BattingPractice__BB_Minigame_BattingPractice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingPractice_C, UberGraphFrame, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingPractice_C, DelayOnPitches, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_BattingPractice_C, 0x043C);
		}

		// class UBW_ScoreCardBackground_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCardBackground_Widget__BW_ScoreCardBackground_Widget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCardBackground_Widget_C, 0x0210);
		}

		// class ABB_BatterToPitcherInfluencer_BP_C : public AScramSceneComponentActor
		TEST_METHOD(BlueprintGeneratedClass__BB_BatterToPitcherInfluencer_BP__BB_BatterToPitcherInfluencer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatterToPitcherInfluencer_BP_C, ScramTrajectoryInfluencerBaseball, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BatterToPitcherInfluencer_BP_C, 0x0358);
		}

		// class AAvatar_Spawn_Emitter_Actor_C : public ACMN_ParticleEmitter_C
		TEST_METHOD(BlueprintGeneratedClass__Avatar_Spawn_Emitter_Actor__Avatar_Spawn_Emitter_Actor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAvatar_Spawn_Emitter_Actor_C, 0x036A);
		}

		// class AScramPlayerController_BP_C : public AScramPlayerController
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerController_BP__ScramPlayerController_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, UberGraphFrame, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, PauseStart, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, PauseEnd, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, GameInstance, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, NoPauseactor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerController_BP_C, Floater, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerController_BP_C, 0x0730);
		}

		// class ABB_Train_Base_C : public ATrainingBase_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_Base__BB_Train_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_5G3X, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, Audio_Scored, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, Scoreboards, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchingTraining, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_WLNR, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchingLocation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchingMinArea, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchingMaxArea, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, strikeZone, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, EquipmentSet, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PreferredHand, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, LeftHanded, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_UYEK, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, SportManager, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchersMitt, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, CatcherActor, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TrainingScorebards, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchTarget, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BattingTee, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BallLauncher, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, horizontalVariance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, verticalVariance, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TargetRegionLeftMargin, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TargetRegionRightMargin, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TargetRegionTopMargin, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TargetRegionBottomMargin, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, WindowSpawner, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, OutfieldTargetScoreAmt, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_Z829, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, OutfieldTargetSpawner, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_MA3M, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BattingLocation, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, LargeScoreboard, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BB_ScrambleTargetGroup, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, LauncherBarrier, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BallScrambleDisplay, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, LaunchTargetLocation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TrainingModeIsBatting, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, CatcherPresent, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_8PMT, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, BounceCounts, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TheBasketball, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TrainingResult, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_CR7M, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, NeverMissBatter, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PitchingTargetListener, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, TimerExposed, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, UnknownData_VOB0, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_Base_C, PrefaceScoreText, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_Base_C, 0x0620);
		}

		// class AOculusMR_BoundaryActor : public AActor
		TEST_METHOD(Class__OculusMR__OculusMR_BoundaryActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_BoundaryActor, BoundaryMeshComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOculusMR_BoundaryActor, 0x0330);
		}

		// class UOculusMR_BoundaryMeshComponent : public UMeshComponent
		TEST_METHOD(Class__OculusMR__OculusMR_BoundaryMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, UnknownData_RF3A, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, BottomZ, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, TopZ, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, UnknownData_N8OW, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, WhiteMaterial, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, CastingCameraActor, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_BoundaryMeshComponent, UnknownData_0XBK, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusMR_BoundaryMeshComponent, 0x05B0);
		}

		// class AOculusMR_CastingCameraActor : public ASceneCapture2D
		TEST_METHOD(Class__OculusMR__OculusMR_CastingCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, VRNotificationComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, CameraColorTexture, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, CameraDepthTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, PlaneMeshComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ChromaKeyMaterial, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ChromaKeyLitMaterial, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, OpaqueColoredMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ChromaKeyMaterialInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ChromaKeyLitMaterialInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, CameraFrameMaterialInstance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, BackdropMaterialInstance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, BoundaryActor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, BoundarySceneCaptureActor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, DefaultTexture_White, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, UnknownData_HOAZ, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, BackgroundRenderTarget, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ForegroundCaptureActor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, ForegroundRenderTarget, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, MRSettings, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOculusMR_CastingCameraActor, MRState, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOculusMR_CastingCameraActor, 0x0430);
		}

		// class UOculusMR_PlaneMeshComponent : public UMeshComponent
		TEST_METHOD(Class__OculusMR__OculusMR_PlaneMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_PlaneMeshComponent, UnknownData_45UE, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_PlaneMeshComponent, UnknownData_QCZS, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusMR_PlaneMeshComponent, 0x05A0);
		}

		// class UOculusMR_Settings : public UObject
		TEST_METHOD(Class__OculusMR__OculusMR_Settings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ClippingReference, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, bUseTrackedCameraResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, UnknownData_V0JW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, WidthPerView, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, HeightPerView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, CastingLatency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, HandPoseStateLatency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ChromaKeyColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ChromaKeySimilarity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ChromaKeySmoothRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ChromaKeySpillRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, VirtualGreenScreenType, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, UnknownData_1NP6, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, DynamicLightingDepthSmoothFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, DynamicLightingDepthVariationClampingValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, ExternalCompositionPostProcessEffects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, bIsCasting, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, CompositionMethod, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, CapturingCamera, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, bUseDynamicLighting, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, DepthQuality, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_Settings, UnknownData_XM3D, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusMR_Settings, 0x00C8);
		}

		// class UOculusMR_State : public UObject
		TEST_METHOD(Class__OculusMR__OculusMR_State)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, TrackedCamera, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, TrackingReferenceComponent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, UnknownData_2W5H, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, ChangeCameraStateRequested, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, BindToTrackedCameraIndexRequested, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusMR_State, UnknownData_UC2Z, 0x008E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusMR_State, 0x0090);
		}

		// class UOculusMRFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OculusMR__OculusMRFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusMRFunctionLibrary, 0x0028);
		}

		// class ABB_BattingTarget_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_BattingTarget__BB_BattingTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_TrainingTarget_03, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_TrainingTarget_02, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_TrainingTarget_01, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_Target_6, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_Target_5, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_Target_4, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_Target_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ChildActor_Target_2, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, ScoreBatter, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, AllTargets, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TargetScoreAmount, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, UnknownData_HIFC, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, DisabledTargets, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_01, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_02, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_03, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_04, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_05, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, AllowRespawn, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, AvoidDoubleHit, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_01_Unbroken, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_02_Unbroken, 0x03DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_03_Unbroken, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_04_Unbroken, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, Target_05_Unbroken, 0x03DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget, 0x03DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TargetId, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, UnknownData_3GZ3, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, OverlapBall, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TargetRespawnDelay, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, UnknownData_YQPC, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget01, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget02, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget03, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget_01_Unbroken, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget_02_Unbroken, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BattingTarget_C, TrainingTarget_03_Unbroken, 0x0412);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BattingTarget_C, 0x0413);
		}

		// class UAnnouncer_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Announcer_AnimBP__Announcer_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_MRJL, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_Root_40894CDF40763575C21F38825E9F3560, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_B6D789554851A5F22744988E71574248, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_67B7E7E8445312DFCD7659A38EDD53B4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_1A1FBE444AF6E31EF9EA31913AAEA07B, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_20521D4644EC7484C5B798AAAC030293, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_721E4ABD47DC668F34400A85377E83DB, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_A39C74B048ADC5C02D23F9B952BBF691, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_E41E1F384859BBD443925BB4D7889B4C, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_42B7990C4B42DCB854A628BA17CBF72C, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_42278C6048185A08B4978185B5386520, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_4968D78A4AB233AA78E6F2A8342DB491, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_2BB417E044193FC8CAAC4EA60A05ABA6, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_C91DF554428CF86ADBD3468DF98B5B1E, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_DA044C154F111560173AAF9A58E762AA, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_577B0FB74DED375D5DD55E8220660039, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_17968C1F47AD1C943FE95899D25A68DB, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_E6A78C4248F95F3758E96392BB07D9BD, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_4B34897A406C6588BFE7DBBFEF06C412, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_3EE9CCA040C89E789E2D1BA1BBBCDF1D, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_70880E9240234214692C5BA9B588D4CD, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_60AEB50F4F4229807E8B44A42154C1F9, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_A30E11A24E67FC899CD5F4B74BA6D46F, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_7322666943F697650F1CC4BDBFC1C1E5, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_4922369048504A1F134F039B332592A6, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_3FBFD1A94B942AF10CF0E892EFA8EF4D, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_3592F1884675F99084B16BB6FCE23C2B, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_C475E6E4469F4D33719D898369B1C575, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_CF8A1F804F1365D127165F9EAFACA036, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_TransitionResult_D1EFC9594937F15A12A2F4B41BCB673D, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_22A031294197C06194D36F99E3958EE0, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_16B69A304416075D50F5DC9950F6CCFF, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_5A4C56BD409D37B451ACCC91994E035D, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_4A9847F54029B2A78E77E8AF8F6D5E08, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_13EFB50D406C4D231A46A7A2807BDACB, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_017B1CC546974A6FFECB14BB29CBC74F, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_C6C1F0B144D8A5559100E5B5EB1C36B7, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_88ED153942EB7BA14779669F61D49D2E, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_990DD65A4002D1D278276AA60327CD28, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_552ADCBA49DC98A7A8B8E6AC41B1FB8E, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_BBA0F35B40E1A4EE9562DCAE35642489, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_8BBE90F04BED802817F3CBBEE93E7051, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_1CABDEFF4930F3E4DA090DA1D8D57ACA, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_00BC6B234C21633FBBA05AA0B9E78E91, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_892C271C43A451F931ABABBE28FC9878, 0x11A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_134B0FE64B3FAFA7D8C4FD82F66E2836, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_BB9F9A744C76D44F307FFCB9828A8D37, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_0BFE3A1547F5D29663609CBDDE939CD5, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_903C7FA146908B7B9A08E6843AFAAED1, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_25FA280F47C08AA117B776B89C90B51E, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_07271FF14278839D81D90F8688BCC3A7, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_607AED8E4294FDB47D6D36908ACFFDF8, 0x1488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_A3CCDB58470C095BC358B9A9D78D01CD, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_AD7D2CFE47840D3ABFFFB48ED788672B, 0x1568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_4F5A0AA54BBEACACB6CAAFB1F0C697BD, 0x1608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_34A6D80D4D974D8970CDDCB398502110, 0x1648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_FD0AFB534FB6605E9A7E8CB6AA00B125, 0x16E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_53DA93E04C1E3F0885B8F288FE627729, 0x1728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_9839A3F24EB098FCE4696386C7309EEB, 0x17C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_C135910C4F1CCB84AF66D69E32B754E1, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_19A0F82A4ADC1FCA49A0BCAECB71D994, 0x18A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_A723CCF44F6EEB9260C13A9CE49A15A5, 0x18E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_2CC9E03A444EFDBAED185EA3E8FAAA86, 0x1988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_FF685BF040496AE4FDCA5C98BD4DF5EE, 0x19C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_18CFDDA04531C5F5914B6281D0109B8F, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_E6A36EF946D38ACC46B521923311CF03, 0x1AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_03E6AF0B451228A63805C895D9146C6B, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_SequencePlayer_C64EE54846FE507D6C6D13B0DFC003B2, 0x1B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateResult_076C77B64343474365F9E68CB7234621, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, AnimGraphNode_StateMachine_7806141D43C1B2B862389F9F75ECADEF, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, IntroLogo, 0x1D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, IntroFlyIn, 0x1D49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, MoveForward, 0x1D4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, MoveBackward, 0x1D4B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_NS6V, 0x1D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, MoveForwardComplete, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, MoveBackwardComplet, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, Gesture, 0x1D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, RevealOpponentStart, 0x1D71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, RevealOpponentEnd, 0x1D72);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, StartPresenting, 0x1D73);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, StopPresenting, 0x1D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_155H, 0x1D75);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, OpponentRevealReady, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, OpponentRevealFinished, 0x1D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, ExitStart, 0x1D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, ExitHubStart, 0x1D99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_17L4, 0x1D9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, EntryComplete, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, GestureComplete, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PresentReady, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PresentComplete, 0x1DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, ExitComplete, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, RevealHubBeacon, 0x1DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, Attachment, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, RotateL, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, RotateR, 0x1E11);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_YSEX, 0x1E12);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, SetExpression, 0x1E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PresentStartSequence, 0x1E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PresentSequence, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PresentEndSequence, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, GestureAnimation, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, StartGesture, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, StopGesture, 0x1E49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, UnknownData_B9UD, 0x1E4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, HideAnnouncer, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PlayBallDropSound, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PlayExitSound, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PlayArmsArticulateSound, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnnouncer_AnimBP_C, PlayAudioAsync, 0x1E90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnnouncer_AnimBP_C, 0x1EA0);
		}

		// class ATN_Train_01_BasicHitting_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_01_BasicHitting__TN_Train_01_BasicHitting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, UnknownData_A9NP, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_TryBasicHitting, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_SwitchAtAnyTime, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_Nice, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_TryItNow, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_SwitchHands, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_LeftHand, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, Audio_RightHand, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, maxBalls, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, DelayBetweenLauncherBalls, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, LivingRoom_RightHanded_2, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, LaunchTargets, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, ActiveLaunchParameters, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, LeftHandedHitter, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_01_BasicHitting_C, InstrumentHandSwap, 0x0685);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_01_BasicHitting_C, 0x0686);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_HZ9A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0710);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class ABB_GoldenBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_GoldenBall__BB_GoldenBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GoldenBall_C, UberGraphFrame, 0x1038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_GoldenBall_C, 0x1040);
		}

		// class ABW_Glove_C : public ABowlingGlove
		TEST_METHOD(BlueprintGeneratedClass__BW_Glove__BW_Glove_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Glove_C, UberGraphFrame, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Glove_C, FinalizeThrow, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Glove_C, SfxMap, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Glove_C, 0x0B98);
		}

		// class ABP_TrophyAward_BW_Base_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Base__BP_TrophyAward_BW_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, UnknownData_1KT4, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, TrackerInitialized, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, UnknownData_D8LC, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, TennisManager, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Base_C, BowlingManager, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Base_C, 0x03B8);
		}

		// class ABaseballAIBatter_Blueprint_C : public AScramBaseballBatterAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIBatter_Blueprint__BaseballAIBatter_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, UberGraphFrame, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, SkeletalMesh, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, BatSelector, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, HomeTeam, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, UnknownData_GPL7, 0x0E91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, PresetLook, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, RandomizeAvatar, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, UnknownData_CM2A, 0x0EB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, LookRandomzied, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, UseRemotePlayerLook, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_Blueprint_C, HandHidden, 0x0ED1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIBatter_Blueprint_C, 0x0ED2);
		}

		// class ABB_BallLauncher_C : public ALauncher_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BallLauncher__BB_BallLauncher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, PreCalcTarget, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, SkeletalMesh, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_RaiseHead_Height_B0F60DFC4C988DDC9560F99941A70F73, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_RaiseHead__Direction_B0F60DFC4C988DDC9560F99941A70F73, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_8HXL, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_RaiseHead, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Spawn_Scale_A956A90F4ECF98678E5F5382C930B110, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Spawn__Direction_A956A90F4ECF98678E5F5382C930B110, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_NZYF, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Spawn, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Movement_Alpha_E6EC23524D3A43D138BAB2908B9490F2, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Movement__Direction_E6EC23524D3A43D138BAB2908B9490F2, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_901Q, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Movement, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Pitch_Alpha_A7AB6E4A4776B9E742A4A8AB2FE8ABBC, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Pitch__Direction_A7AB6E4A4776B9E742A4A8AB2FE8ABBC, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_HS85, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Pitch, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Rotation_Alpha_A45B177F4A92BE21928D0C911E21850B, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Rotation__Direction_A45B177F4A92BE21928D0C911E21850B, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_AIMS, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Rotation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Height_Alpha_0A786567482F9524F46FCFA5887FC703, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Height__Direction_0A786567482F9524F46FCFA5887FC703, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_RT38, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_Height, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_ScaleUp_Scale_0B0323FD42903E615714A7992434F8D8, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_ScaleUp__Direction_0B0323FD42903E615714A7992434F8D8, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_19UN, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Timeline_ScaleUp, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, InitialScale, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Closing, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_XXBX, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, StartHeight, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, EndHeight, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, StartRotation, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, EndRotation, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, StartPitch, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, EndPitch, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, StartPositionY, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, EndPositionY, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, TelegraphDelay, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, LinkedMovementDelay, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, GameInstance, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_WKL4, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, trajectory, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, InitialHeight, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_7UUL, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, AnimBp, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Material, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, LightOffColor, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, LightOnColor, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, PlaySpawnAnimation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_YX01, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, FinishedSpawnSequence, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, MovingL, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, UnknownData_V2LE, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, RandomSpeed, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, TargetRegionRightMargin, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, TargetRegionLeftMargin, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, TargetRegionTopMargin, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, TargetRegionBottomMargin, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BallLauncher_C, Enabled, 0x0858);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BallLauncher_C, 0x0859);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_TMLF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0030);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0038);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_PYCE, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x0060);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_CMND, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_PRUW, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_UVH3, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_USKN, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_2E82, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_ZB48, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_SMWZ, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_TAFN, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_QSIH, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x0660);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_CWB8, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_VK5B, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_MGAK, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0140);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0038);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0048);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_7X32, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0040);
		}

		// class ATN_BaseballBat_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_BaseballBat__TN_BaseballBat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_BaseballBat_C, SwingParticleSystem_1, 0x0FB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_BaseballBat_C, 0x0FC0);
		}

		// class ATN_Train_03_TraditionalServing_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_03_TraditionalServing__TN_Train_03_TraditionalServing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, UnknownData_3WSX, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, TN_TRN_RM03_ServeTraditionalBall_03b_Dialogue_Cue, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, TN_TRN_RM03_ServeTraditionalBall_03_Cue, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, maxBalls, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, DelayBetweenLauncherBalls, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, LoopCount, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, BallsMissed, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, BallsRegistered, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, UnknownData_JXBJ, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, LivingRoom_RightHanded_2, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, LaunchTargets, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, ActiveLaunchParameters, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, PracticeShotDone, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, UnknownData_6HW4, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, Text_Instructions01, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, BallInPlay, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, PracticeBallGrabbed, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, PracticeBallReleased, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, UnknownData_VW44, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_03_TraditionalServing_C, GrabbedBall, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_03_TraditionalServing_C, 0x06A0);
		}

		// class ATball_Impact_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Tball_Impact_BP__Tball_Impact_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, ScaleDown_Scale_E348DBE8428A71A413FD5CA791664452, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, ScaleDown__Direction_E348DBE8428A71A413FD5CA791664452, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, UnknownData_ROOY, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, ScaleDown, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATball_Impact_BP_C, InitialScale, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATball_Impact_BP_C, 0x035C);
		}

		// class ATN_GolfBall_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_GolfBall__TN_GolfBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GolfBall_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GolfBall_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_GolfBall_C, 0x1160);
		}

		// class UResultsBoxWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResultsBoxWidget__ResultsBoxWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsBoxWidget_C, Text_Message, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsBoxWidget_C, Text_Score, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResultsBoxWidget_C, Text_Win, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResultsBoxWidget_C, 0x0228);
		}

		// class APitcherAvatar_BP_C : public APitchingAvatar
		TEST_METHOD(BlueprintGeneratedClass__PitcherAvatar_BP__PitcherAvatar_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APitcherAvatar_BP_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitcherAvatar_BP_C, Timeline_0_Alpha_38EA05164800B04FF556E0BB6899910F, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitcherAvatar_BP_C, Timeline_0__Direction_38EA05164800B04FF556E0BB6899910F, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitcherAvatar_BP_C, UnknownData_J135, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APitcherAvatar_BP_C, Timeline_1, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APitcherAvatar_BP_C, 0x0428);
		}

		// class ABB_Minigame_BaseballGame_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_BaseballGame__BB_Minigame_BaseballGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, GameInstance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, strikeZone, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, GameSelector, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, SportManager, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BaseballGame_C, StartPitching, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_BaseballGame_C, 0x0369);
		}

		// class AScramTrophyRoomTrophy_C : public AScramTrophy
		TEST_METHOD(BlueprintGeneratedClass__ScramTrophyRoomTrophy__ScramTrophyRoomTrophy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, DisplayActor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, BronzeMaterial, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, SilverMaterial, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, GoldMaterial, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTrophyRoomTrophy_C, DisabledMaterial, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTrophyRoomTrophy_C, 0x0490);
		}

		// class UPitcherAvatar_AnimBP_C : public UPitchingAvatarAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__PitcherAvatar_AnimBP__PitcherAvatar_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_Root_E301D9704F5FA54186955F82D60D17EE, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_B9F5CF23483C625D0C96FEB37F79D00F, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_8ED97554415678D967F8B79EEC049655, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_75FC6EF541125206068677B96C3E934F, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_22617D6F4C59B8D263DABFB5476201BE, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_56E56C914EDA1FF9A1592DB18F5071B0, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_57DF653548059FD006A8D5A02FA32B1E, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_TransitionResult_6E7548FD4F53355B0DFFC98530B65D58, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_E5FCFF3A4ECD20835218C0AC224F0803, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateResult_AB69D1044491E62E431BC8B8F464FED4, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_8BC715454E1DD1F74CF404826653F0C5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_9A1A5671496D2393BE3D43B37C80EBD9, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_1DB73A674DF6D2CCC2896593463A743D, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_D27FE30A485B097EFD45BE9B05180E24, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_E0D452284DE6BCE8F40DC6A5AA106F72, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_3DD92CF74D0B8870E238C2AF159E8E79, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_E7B39D214F36959D35B4DDA46C86EF4C, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_LocalToComponentSpace_6E9FC3ED4D3F921EF20280970D14FEDC, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_7AE71A4941B56BB070A27AB68FDCAEDE, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateResult_96C1BFC747358B78CA55858D1BC2B38B, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_F491080E47B2570437C8079A561949C7, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateResult_B06AFF084F247250C6BCF2BACEFF85C3, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_7109C5AD4CB42E3463910A8ADA404026, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateResult_DEBA625E45D6BB94DB675E88E4C40E79, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_C93C92AB4222136509FAB9A3FEFA3AC6, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_65CA6FA547D028E223B61689E044AE41, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_045329F943DEA4FD1FC652923F0C4683, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_7FD155CA4291B74AC7336D96CF4B7CE9, 0x1588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_DE49509F439FD9FFFF4480BFA5511065, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ModifyBone_D60BD2A04452BD823145A6B7F001EEB9, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_4881CC374C246423887A0FB229373467, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_LocalToComponentSpace_3E2ED9AE42286FBBCA19899DA90A22EB, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_4302A7D84F12297461F28090A17157F6, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateResult_09C6D34F45A9749D41A726A544453E76, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, AnimGraphNode_StateMachine_73E2CB13424529A208A0688986199ADD, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, LeftMittCatch, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPitcherAvatar_AnimBP_C, Right_Mitt_Catch, 0x1B78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPitcherAvatar_AnimBP_C, 0x1B80);
		}

		// class AFloaterUi_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FloaterUi__FloaterUi_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, SlowConnectionWidgetComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, ErrorMessageComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, NoPauseWidget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_ScaleSlow_Alpha_BC5752E749B5E9200A9CA19C50736E69, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_ScaleSlow__Direction_BC5752E749B5E9200A9CA19C50736E69, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_ZXL9, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_ScaleSlow, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_MoveSlow_Alpha_00C4E8574D8FEC0624F0C6A15EA705C9, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_MoveSlow__Direction_00C4E8574D8FEC0624F0C6A15EA705C9, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_WHYJ, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_MoveSlow, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_CollapseSlow_Alpha_47F39BFB42E43208E28FC182A94744D4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_CollapseSlow__Direction_47F39BFB42E43208E28FC182A94744D4, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_TZAN, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_CollapseSlow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_Scale_Alpha_8A8DF58A4DEEBBDCD08C2A976D78A975, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_Scale__Direction_8A8DF58A4DEEBBDCD08C2A976D78A975, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_LM5M, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Timeline_Scale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, NoPauseIcon, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_5EA3, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Yaw, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, Delta, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_GGR9, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, ErrorMessage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, ErrorMessageWidget, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, SplashScreen, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, SlowConnection, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, UnknownData_7ENL, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloaterUi_C, LowConnectionWidget, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFloaterUi_C, 0x03D0);
		}

		// class UMinigameElement_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__MinigameElement__MinigameElement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMinigameElement_C, 0x0028);
		}

		// class AScramPlayerHandPossessor_BP_C : public AScramPlayerHandPossessor
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHandPossessor_BP__ScramPlayerHandPossessor_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHandPossessor_BP_C, 0x03E0);
		}

		// class ATN_Challenge_Base_C : public AChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_Base__TN_Challenge_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_YQ7J, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UberGraphFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, Audio_MiniGameIntroMusic, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ActorSet_Instruments, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ActorSet_Balls, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, GameSelector, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LauncherLeft, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LevelData, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TravelCapsule, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LevelWon, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_AXO9, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, GameInstance_0_1, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ResultsMenu, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LauncherRight, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ActivePayloads, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LightUpGroup, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, Bounces, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_W7Y2, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, SFX_StartOfMatchMusic_1, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, SFX_BallGoodSound, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, SFX_BallBadSound, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LevelCompleted, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_WJVP, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, LauncherCenter, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ServeLocationIndicator, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ServeLauncher, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, GameWall, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, AllWhackTargets, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, DisabledWhackTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, BindToBallSpawned, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_85F2, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TennisTargetGroup, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ValidBallClassList, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, AnnouncerSelected_InstrumentClass, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, BallClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, StreakActor, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, Streak, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TargetHitReward, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, BullseyeHitReward, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, MiddleHitReward, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, DisabledBallClassList, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TN_MiniGameScoreboard, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, Pass_N_Play, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, UnknownData_J2HK, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, InstrumentList, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, BallList, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TennisNet, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, BallVOList, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, InstrumentVOList, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ReturnWall, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TN_SportManager, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, FloorLightUpGroup, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, TN_ChallengeSportMgr, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ArenaScoreboards, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, WhackGridGame, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_Base_C, ChallengeResult, 0x06B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_Base_C, 0x06BA);
		}

		// class AGameHandlerChallenges_C : public AGameHandlerBase_C
		TEST_METHOD(BlueprintGeneratedClass__GameHandlerChallenges__GameHandlerChallenges_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, Sport, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, UnknownData_KDPB, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, Scoreboards, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, GameInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, MiniGame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, GameElements, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, SaveData, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, SaveGame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, NoScoring, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, Restarting, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, UnknownData_UUHZ, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerChallenges_C, SpawnOverride, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameHandlerChallenges_C, 0x03A8);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_RY4R, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_83GI, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_Q9PD, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_I85F, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x05C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_M19O, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x05F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_GUB2, 0x05F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_9LT2, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_ZHM3, 0x066A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_V19U, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_U6E4, 0x0684);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x06B0);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_8EWO, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_UHTG, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_6OSO, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_3TSJ, 0x01B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_VJ6O, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0210);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_JGT8, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_TPA8, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_IA52, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_YP4W, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_63UK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_BLCH, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_5P1R, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_DCWF, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0268);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_4HZJ, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_HNL6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_PG6Y, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_5MUS, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_P209, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_OF6X, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_JZGH, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_CPAW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_OZ7W, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_9HUC, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_LK7S, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_M7BF, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_TDNF, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_QQHT, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_0ANH, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_V6YT, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_RVFH, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_GWR8, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0BCD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_W5M9, 0x0BCE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_6M0J, 0x0C51);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_KLI5, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0CC8);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_4Z3V, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_KG0C, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBox : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_9BH4, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_OUF2, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_ZVI9, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_O2DK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, UnknownData_NT4B, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D8);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_XR78, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_QYXA, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_LJJY, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_9KU2, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_74O5, 0x0A05);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_ZWL5, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_YSIW, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_SYAU, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_06LK, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_UPG7, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_E4ZT, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_X3LJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_VZDL, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_5S1G, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_D4QJ, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x01F0);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_QG1F, 0x0632);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_G57X, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0678);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_6AJC, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UNativeUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__NativeUserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeUserListEntry, 0x0028);
		}

		// class UUserListEntry : public UNativeUserListEntry
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_ILBB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0210);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_FQOD, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_POTQ, 0x02BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_15Q9, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0330);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_ZS3D, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_6NTP, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0160);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_JJ2R, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_P68T, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0080);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0080);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_EDOM, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_2BGY, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x03B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_AUDV, 0x03B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_287Y, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x03E8);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0B49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0B4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0B4B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_O0AL, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_VE37, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C10);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_LM3K, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_6GU3, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_64ZE, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_SYGP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_M1NE, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_IINY, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_03YW, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_ND27, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_Y8X0, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_TV94, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_D10G, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_KMR4, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0370);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_A2S8, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_AY7T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_TFWC, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_Y3U7, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, bSingleLayoutPass, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_IB3G, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_SXY0, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_O98L, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_DXWM, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0600);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_ARZJ, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0835);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0836);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_CPDJ, 0x0837);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_QN3C, 0x083D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_MMY2, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0868);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_5AS0, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_6NJG, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_QRCE, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0150);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_Z5ZT, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_2BQ5, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_VXGA, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x0487);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_A1WP, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_X7JQ, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F0);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_LGSD, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_H8XB, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_2S1R, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_P9G1, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_T2AB, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1RH8, 0x04FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0510);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_SNH0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_CG3C, 0x020E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x0220);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_A0UV, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_3H9N, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_OWR3, 0x033A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0350);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_9IZM, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_986G, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x0388);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_M5ZQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_BIDV, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x06E8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_Z9KH, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_1PQL, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_DML1, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_BHW5, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_L2SL, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_HMEP, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0148);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationStarted, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationFinished, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_RP9P, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0398);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_IZIA, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0350);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_8ZMH, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_RVMM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_A5P3, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ZPAK, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_TDAP, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0430);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0118);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_BR71, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_29AM, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_8OJ3, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_4VDY, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_5KJJ, 0x012D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0140);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_B8VF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_YDQ7, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class ABW_Train_06_BallSpin_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_06_BallSpin__BW_Train_06_BallSpin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, UnknownData_NBVO, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, Audio_AnnouncerAudio03, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, Audio_GrabTheBall, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, PracticeBallPickedUp, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, PracticeOver, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, Retrying, 0x0492);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, UnknownData_LYTR, 0x0493);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, TutorialBallTable, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, AnnouncementDuration, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, BallSpun, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, AnnouncerClosingSequence, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, UnknownData_B6B1, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_06_BallSpin_C, FinalAnnouncerSequence, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_06_BallSpin_C, 0x04D0);
		}

		// class AHRD_Challenge_Manager_C : public AScramSportManagerBaseball
		TEST_METHOD(BlueprintGeneratedClass__HRD_Challenge_Manager__HRD_Challenge_Manager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, LaunchTarget, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLocRF, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLocSS, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLocCF, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLocC, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLocLF, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderLoc1B, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, AudioOrgan, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfieldLocusLoc, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, RunnerHomeLoc, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ThirdBaseLoc, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, SecondBaseLoc, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FirstBaseLoc, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, RunnerSpawnLoc, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, InfieldEdgeMarker, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, DoubleTripleMarker, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfieldFenceEdge, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfieldFenceCenter, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BatterLoc, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitcherLoc, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, StaticMesh, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, GameElements, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, strikeZone, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, GameInstance, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, EquipmentSet, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, MaxOuts, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, Outs, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitchingLocation, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, StartPosButtons, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, StartChoiceMenu, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayerTotalScore, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, HomerunTotal, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, CurrentInning, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, MaxInnings, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PointsForSingle, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PointsForDouble, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PointsForTriple, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PointsForHomeRun, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, TopOfTheInning, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_XCK1, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitcherPointsStrike, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, AwayTeamMaterial, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, HomeTeamMaterial, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FielderList, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, CatcherActor, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, LocalHelper, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, SwitchSidesMessageDuration, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, StrikeRegistered, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_JP7K, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BallLocation, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, WaitForScoreboardVideo, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, WaitForRunners, 0x0855);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_RQW2, 0x0856);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OrganFadeOuttime, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_W16W, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BattersBoxIndicator, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayerBatterStrikezone, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, AIBatterStrikezone, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, AIPlayerEnabled, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, FirstPitchOfInning, 0x0909);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_CUOJ, 0x090A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitchTargetScoreAmount, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfieldTargetScoreAmt, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, DebugBallsSetting, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_WGDL, 0x0915);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BattingTeePosition, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_DHMS, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, SFX_BatBreak, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BatBroken, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayerInPosition, 0x0931);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_8C32, 0x0932);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ScrambleMenu, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ScrambleMenuChoice, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BallInPlay, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_XKGO, 0x0951);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PauseBubbleActor, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitchingMinArea, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitchingMaxArea, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PitchingPropManager, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayByPlay, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, Strikes, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, StrikeoutCount, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ShouldResetCount, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_ZOS0, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BatterToPitcherInfluencer, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, GameCompleted, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfielderCFMovementRange, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OurfielderRFMovementRange, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, OutfielderLFMovementRange, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, LogoPopup, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, BasesLoaded, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_1Q0M, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, Ball_Launcher, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, LaunchDelay, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_RI25, 0x0A04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, TeleportComplete, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, GameRunning, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, UnknownData_AB0N, 0x0A19);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ChallengeMaster, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayerScoredRun, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, PlayerHitHomerun, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, RunnersReady, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHRD_Challenge_Manager_C, ChallengeEnded, 0x0A58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHRD_Challenge_Manager_C, 0x0A59);
		}

		// class ABP_TrophyAward_Ace_C : public ABP_TrophyAward_TennisBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_Ace__BP_TrophyAward_Ace_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Ace_C, UnknownData_J078, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Ace_C, UberGraphFrame, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_Ace_C, 0x03B8);
		}

		// class ABP_TrophyAward_BW_ChallengeFinal_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_ChallengeFinal__BP_TrophyAward_BW_ChallengeFinal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_ChallengeFinal_C, 0x03D8);
		}

		// class UBW_ScoreCardFrame_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCardFrame_Widget__BW_ScoreCardFrame_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Background, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_4, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_6, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_7, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_8, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_10, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_11, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Image_12, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Roll1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, Roll2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrame_Widget_C, ScoreText, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCardFrame_Widget_C, 0x0290);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_EY6P, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class APreloadReferences_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PreloadReferences_BP__PreloadReferences_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, DefaultSceneRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, BB_Balls, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, TN_Balls, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, BW_Balls, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, BB_Instruments, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, TN_Instruments, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, Player, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APreloadReferences_BP_C, Frontend, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreloadReferences_BP_C, 0x0368);
		}

		// class ATN_LacrosseStick_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_LacrosseStick__TN_LacrosseStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_LacrosseStick_C, 0x0FB8);
		}

		// class ATennisScramble_BeachBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_BeachBall__TennisScramble_BeachBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_BeachBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_BeachBall_C, 0x0388);
		}

		// class UQpDetailsInfoWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__QpDetailsInfoWidget__QpDetailsInfoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BaseballScrambleParent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BbIcon1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BbIcon1Spacer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BbIcon2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BowlingScrambleParent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BwIcon1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BwIcon1Spacer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BwIcon2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BwIcon2Spacer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, BwIcon3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row1TextL, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row1TextR, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row2TextL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row2TextR, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row3TextL, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row3TextR, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row4TextL, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row4TextR, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row5TextL, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, Row5TextR, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TennisScrambleParent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TnIcon1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TnIcon1Spacer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TnIcon2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TnIcon2Spacer, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQpDetailsInfoWidget_C, TnIcon3, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQpDetailsInfoWidget_C, 0x02E0);
		}

		// class ACMN_Trail_Light_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Light__CMN_Trail_Light_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Light_C, 0x037C);
		}

		// class ABW_ScoreCard_C : public AScramSceneComponentActor
		TEST_METHOD(BlueprintGeneratedClass__BW_ScoreCard__BW_ScoreCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, UberGraphFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, BW_Traditional_Frame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, ScoreCard, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, Scale_Scale_3F4853634EA6A42F834C7AB7BC473CCD, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, Scale__Direction_3F4853634EA6A42F834C7AB7BC473CCD, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, UnknownData_4AR9, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, Scale, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, ScoreCardWidget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, Player1RegularFrames, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, Player2RegularFrames, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, RegularFrameLabels, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, NumFrames, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_ScoreCard_C, NumPlayers, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_ScoreCard_C, 0x03B8);
		}

		// class ABB_Challenge_05_MinorLeague_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_05_MinorLeague__BB_Challenge_05_MinorLeague_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Crowd, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, PauseBetweenVO, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_InstrumentGrabbed, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_FirstTargetHit, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_SecondTargetHit, 0x0596);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_TrainingStarted, 0x0597);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_TrainingOver, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, UnknownData_NFZA, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, TargetList, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_BallBeingLaunched, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_LauncherCanFire, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_FirstHitReminderPlayed, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, Tutorial_SecondHitReminderPlayed, 0x05B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, LaunchDelay, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, HitBall, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, LaunchTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, OriginalBattingPreferences, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, UnknownData_KC83, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_05_MinorLeague_C, PairedList, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_05_MinorLeague_C, 0x05D8);
		}

		// class AScramGameMode_BP_C : public AScramGameMode
		TEST_METHOD(BlueprintGeneratedClass__ScramGameMode_BP__ScramGameMode_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, DefaultSceneRoot, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, NewPlayerJoin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, ClientPlayerExit, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, GameInstnace, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameMode_BP_C, SelectedSport, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGameMode_BP_C, 0x0451);
		}

		// class UBP_TrophyBottom_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_TrophyBottom__BP_TrophyBottom_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyBottom_C, EarnedDate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyBottom_C, EditableTextBox_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyBottom_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyBottom_C, TextBlock_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TrophyBottom_C, UniqueId, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TrophyBottom_C, 0x0238);
		}

		// class ABB_HockeyStick_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_HockeyStick__BB_HockeyStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_HockeyStick_C, 0x0FC8);
		}

		// class UTN_PoolNoodle_AnimBP_C : public UScramInstrumentAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__TN_PoolNoodle_AnimBP__TN_PoolNoodle_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_Root_889EAB444C2B7A342BA706AEB7D5E159, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_TransitionResult_D434F9B74D45B166601510ABD5A57037, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_BlendSpacePlayer_566FEDD54F70BC9A235DC99039328B14, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_StateResult_FDF7FB794DC9C393308AAA9B90DF8933, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_BlendSpacePlayer_0DD4EC784305F70367F0CF87091FCB63, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_StateResult_75C6862B40EE8AF166008FB1389FD6A9, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, AnimGraphNode_StateMachine_4C29A70A4B23025F22FDD2B310F1E331, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, GravityForceAlpha, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, GravityContribution, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, SpeedCotnribution, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_PoolNoodle_AnimBP_C, UseGravity, 0x080C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTN_PoolNoodle_AnimBP_C, 0x080D);
		}

		// class AAnnouncerNuxMeshes_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AnnouncerNuxMeshes__AnnouncerNuxMeshes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, DefaultSceneRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, GolfClub, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, TennisBall, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, Basketball, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, HockeyStick, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncerNuxMeshes_C, ProRacket, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnnouncerNuxMeshes_C, 0x0358);
		}

		// class ABB_Mitt_C : public ABaseballMitt
		TEST_METHOD(BlueprintGeneratedClass__BB_Mitt__BB_Mitt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, UberGraphFrame, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, PuffLocation, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, SkeletalMesh, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, CatchSounds, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, Material, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, BallCaught, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Mitt_C, IsHomeTeam, 0x0BF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Mitt_C, 0x0BF1);
		}

		// class ATN_ChallengeRacket_Red_C : public ATN_ChallengeRacket_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeRacket_Red__TN_ChallengeRacket_Red_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeRacket_Red_C, UberGraphFrame, 0x1040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeRacket_Red_C, 0x1048);
		}

		// class ASS_Logo_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__SS_Logo__SS_Logo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Intro_Ball_Confetti_Splode_Cue, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, ScramBounceLighting, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Logos_SportsScramble_Block, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, RotatingMovement, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Root, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Timeline_ScaleDown_Scale_9DA68F444A43E211F08E328891C8BCAB, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Timeline_ScaleDown__Direction_9DA68F444A43E211F08E328891C8BCAB, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, UnknownData_YSET, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Timeline_ScaleDown, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Audio, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, UseHubMaterials, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, ScaleUpOnSpawn, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, UnknownData_CAMY, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASS_Logo_C, Confetti, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASS_Logo_C, 0x03A0);
		}

		// class APauseBubble_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__PauseBubble__PauseBubble_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseBubble_C, reference_mesh__editor_only_, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseBubble_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseBubble_C, DefaultSceneRoot, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APauseBubble_C, 0x0360);
		}

		// class ATennisScrambleTarget_Launcher_C : public AScramLauncher
		TEST_METHOD(BlueprintGeneratedClass__TennisScrambleTarget_Launcher__TennisScrambleTarget_Launcher_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScrambleTarget_Launcher_C, 0x0480);
		}

		// class AScramGameState_BP_C : public AScramGameState
		TEST_METHOD(BlueprintGeneratedClass__ScramGameState_BP__ScramGameState_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState_BP_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState_BP_C, DefaultSceneRoot, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramGameState_BP_C, PauseCapsuleBP, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramGameState_BP_C, 0x0428);
		}

		// class UTrophyAwardedWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TrophyAwardedWidget__TrophyAwardedWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedWidget_C, Text_Subtitle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophyAwardedWidget_C, TextPositionScaleBox, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrophyAwardedWidget_C, 0x0220);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0028);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00C8);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_6K3D, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0348);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_N7AG, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_U6G0, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x0050);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0028);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDAssetImportData, UnknownData_OBBN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0030);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x0028);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_EBOF, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithImportOptions : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_2O6F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TessellationOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_97CW, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0088);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_LRTU, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0038);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_HDL8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_VNQL, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_79U0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0060);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_R08G, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0038);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0028);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0380);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_N8KR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_U4BL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00E0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_OI8P, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0038);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0030);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithSceneComponentTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, UnknownData_AOCV, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0100);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A0);
		}

		// class ABB_Train_05_BatBreaking_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_05_BatBreaking__BB_Train_05_BatBreaking_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Crowd, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog08, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog15, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog14, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog13, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog12, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog11, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog10, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, Audio_Dialog09, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, PauseBetweenVO, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, OriginalBattingPreferences, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, UnknownData_8BN0, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, BatProgression, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, AnnouncerClosingSequence, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, UnknownData_Y5M1, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_05_BatBreaking_C, FinalAnnouncerSequence, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_05_BatBreaking_C, 0x0698);
		}

		// class ABB_Challenge_07_BigTime_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_07_BigTime__BB_Challenge_07_BigTime_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Crowd, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, PauseBetweenVO, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_InstrumentGrabbed, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_FirstTargetHit, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_SecondTargetHit, 0x0596);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_TrainingStarted, 0x0597);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_TrainingOver, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, UnknownData_PUD8, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, TargetList, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_BallBeingLaunched, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_LauncherCanFire, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_FirstHitReminderPlayed, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, Tutorial_SecondHitReminderPlayed, 0x05B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, LaunchDelay, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, HitBall, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, LaunchTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, OriginalBattingPreferences, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, UnknownData_MNA2, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_07_BigTime_C, PairedList, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_07_BigTime_C, 0x05D8);
		}

		// class ATN_Challenge_01_WhackATarget_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_01_WhackATarget__TN_Challenge_01_WhackATarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UnknownData_AW8U, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, GameOver, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UnknownData_KHHO, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, TimeBetweenLauncherFire, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, AnnouncerSequence, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, FirstPauseCompleted, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, SecondPauseCompleted, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, ThirdPauseCompleted, 0x06E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UnknownData_X7KC, 0x06E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, TargetAnimationPlayRate, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, GameLength, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UnknownData_V2EA, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, NW_Court, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, Alt_AnnouncerSequence, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UseAlternateSequence, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, UnknownData_2OC3, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_01_WhackATarget_C, SaveData, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_01_WhackATarget_C, 0x0718);
		}

		// class ABaseballAIPitcher_TrainingNoImbued_Blueprint_C : public ABaseballAIPitcher_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIPitcher_TrainingNoImbued_Blueprint__BaseballAIPitcher_TrainingNoImbued_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, UnknownData_U2PS, 0x06D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, UberGraphFrame, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineDespawn_ScaleDown_C7149C0040E1A38C38D2C1A5FB2AEE5B, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineDespawn__Direction_C7149C0040E1A38C38D2C1A5FB2AEE5B, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, UnknownData_A9HV, 0x06E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineDespawn, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineSpawnIn_ScaleUp_B77B037344D1619874D1DA973C0FBEC4, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineSpawnIn__Direction_B77B037344D1619874D1DA973C0FBEC4, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, UnknownData_Z2DT, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, TimelineSpawnIn, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, UseSpawnDespawnVFX, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIPitcher_TrainingNoImbued_Blueprint_C, 0x0701);
		}

		// class ABP_TrophyAward_TN_MatchCompleteBase_C : public ABP_TrophyAward_TennisBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_MatchCompleteBase__BP_TrophyAward_TN_MatchCompleteBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_MatchCompleteBase_C, UnknownData_MHF4, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_MatchCompleteBase_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_MatchCompleteBase_C, CheckForMultiplayer, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_MatchCompleteBase_C, AnyOutcome, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_MatchCompleteBase_C, 0x03BA);
		}

		// class ABP_TrophyAward_BW_Ringer_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Ringer__BP_TrophyAward_BW_Ringer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Ringer_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Ringer_C, 0x03C0);
		}

		// class ABB_BatProgression_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_BatProgression__BB_BatProgression_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, GameInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, BatProgressionBatSwap, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, LastBatSwap, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, ScrambleBatChange, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, PBP_Pending, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_BatProgression_C, PBP_Enabled, 0x0353);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BatProgression_C, 0x0354);
		}

		// class ABaseballBallSelector_BP_C : public ABaseballBallSelector
		TEST_METHOD(BlueprintGeneratedClass__BaseballBallSelector_BP__BaseballBallSelector_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UI_Menu_Snap_V2_Cue, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, Valid_Positions, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, FoundCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UnknownData_4WDS, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, EarnedBall, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, numToSpawn, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, LastSpawnRegister, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, Misses, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, MaxMisses, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UnknownData_5GVD, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, TargetsUpdated, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, TrainingTargetHit, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, TrainingHits, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, RespawnTrainingTargets, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UnknownData_C0PQ, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BeachBall, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, Frisbee, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BowlingBall, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, HockeyPuck, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BallVOList, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UseIconBallVO, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UnknownData_NJQ1, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BB_BallClass, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BB_BallType, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, UnknownData_19FZ, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, BB_BallIcon, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, TrainingPitchersMitt, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, imbueChance, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallSelector_BP_C, Valid_Positions_1, 0x070C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBallSelector_BP_C, 0x070D);
		}

		// class ABowlingLane_Base_C : public ABowlingLane
		TEST_METHOD(BlueprintGeneratedClass__BowlingLane_Base__BowlingLane_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, UberGraphFrame, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, GutterTracker_BP, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, StaticMesh_Col_Gutter, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, StaticMesh_Col_Center, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, StaticMesh_Vis, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, Root, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, LaneSetupComplete, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, LaneReadyForSwap, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, Player1, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, UnknownData_7S5H, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLane_Base_C, Alley, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingLane_Base_C, 0x0528);
		}

		// class ATN_TRN_CHG_TargetWall_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__TN_TRN_CHG_TargetWall__TN_TRN_CHG_TargetWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetBotLeft, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetBotCtr, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetBotRight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetTopLeft, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetTopCtr, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetTopRight, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TargetBounds_Influencer, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetRight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetCenter, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetLeft, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, Wall, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, Root, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, Rise_Translate_8AC176794C24A2FB24F8ACB8CAA97BA4, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, Rise__Direction_8AC176794C24A2FB24F8ACB8CAA97BA4, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, UnknownData_Z5VE, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, rise, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, InitialHeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, RemovingSelf, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, UnknownData_V8X1, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetActorLeft, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetActorCenter, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_TRN_TargetActorRight, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, DisableWall, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, UnknownData_7FH3, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorTopRight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorTopCtr, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorTopLeft, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorBotRight, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorBotCtr, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_TargetActorBotLeft, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, LowerOnGameEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, UnknownData_01QE, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_TR, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_TC, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_TL, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_BR, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_BC, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, TN_CHG_BallTarget_BL, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TRN_CHG_TargetWall_C, ListOfWallTargets, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_TRN_CHG_TargetWall_C, 0x0460);
		}

		// class ALauncher_Base_C : public AScramLauncher
		TEST_METHOD(BlueprintGeneratedClass__Launcher_Base__Launcher_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UberGraphFrame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LauncherXYMovementAudio, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LauncherHeadPitchAudio, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LaucherHeadRotationAudio, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LauncherNeckRaiseAudio, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LauncherDespawnAudio, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, LauncherSpawnAudio, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugLoop, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugInputA, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugInputB, 0x04BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugInputX, 0x04BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugInputY, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UnknownData_E1WP, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugLoopDelay, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, DebugAutoStart, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UnknownData_ZM54, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, SpawnVFX, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, SpawnVFXOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, SpawnSFX, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, BallLaunched, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UseGlobalBallType, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UnknownData_1XMG, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, horizontalVariance, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, verticalVariance, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, MakeBallsGrabbable, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, UnknownData_DYN4, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncher_Base_C, NewBallClass, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALauncher_Base_C, 0x0530);
		}

		// class UScoreboard_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Scoreboard__Scoreboard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScoreboard_C, 0x0028);
		}

		// class UBowlingUtils_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BowlingUtils__BowlingUtils_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingUtils_C, 0x0028);
		}

		// class ALauncherBarrier_Blueprint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LauncherBarrier_Blueprint__LauncherBarrier_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, TN_ScrambleTarget_Shrink_Cue, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, TN_ScrambleTarget_Grow_Cue, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, ScramBounceLighting, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, LauncherBarrierMesh, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, DefaultSceneRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, Timeline_0_Scale_9296466F4D2D83EB64B195B24BE6A454, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, Timeline_0__Direction_9296466F4D2D83EB64B195B24BE6A454, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, UnknownData_70E6, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, Timeline_1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALauncherBarrier_Blueprint_C, InitialScale, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALauncherBarrier_Blueprint_C, 0x0374);
		}

		// class ABW_TennisBall_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_TennisBall__BW_TennisBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_TennisBall_C, 0x0F01);
		}

		// class ABW_Minigame_Practice_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_Minigame_Practice__BW_Minigame_Practice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_Practice_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_Practice_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_Practice_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_Practice_C, BowlingAlleys, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_Practice_C, SportManager, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Minigame_Practice_C, 0x0360);
		}

		// class AStandIcon_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StandIcon__StandIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, Mesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, Sport, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, Netherworld, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, UnknownData_GWWH, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandIcon_C, MaterialOverride, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStandIcon_C, 0x0350);
		}

		// class AMenu_TextTwo_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_TextTwo__Menu_TextTwo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, StaticMesh_Bottom, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, StaticMesh_Top, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, StaticMesh_Backing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, ButtonPos1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, ButtonPos0, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, Scene, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, LocText0, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, LocText1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, SelectionStarted, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, SelectionCompleted, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, Button0, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TextTwo_C, Button1, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_TextTwo_C, 0x03A8);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_79Q6, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, appID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UInstrument_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Instrument__Instrument_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstrument_C, 0x0028);
		}

		// class AInstrumentSelectionObject_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InstrumentSelectionObject__InstrumentSelectionObject_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, RotatingMovement, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, InstrumentType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, InstrumentTN, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, InstrumentSelected, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, Sport, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, UnknownData_B3CY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, Instrument_BB, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelectionObject_C, Instrument_DB, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstrumentSelectionObject_C, 0x0378);
		}

		// class AGripSet_Glove_RightHand_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Glove_RightHand__GripSet_Glove_RightHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Glove_RightHand_C, 0x0370);
		}

		// class UTennisAvatar_AnimBP_C : public UTennisAvatarAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__TennisAvatar_AnimBP__TennisAvatar_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_Root_F9AB24014CD8BDBAE5D551877185A19B, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_40D5EF8749D9BA9B3D1762B3479A6B15, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_4FCEA28847E3CF7FB5727B827F48A669, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_F6745FAE409654A22321479905872C91, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_E21642544BE3867831EA2286204554A3, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_FBEADB664B42F1CBD920B9933D732394, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_09DD48E0481AB1C278DFF6AC1D37D440, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_486CF5304E39C257EEC378805AE22E9A, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_77BC79BE425FC1D40024B6B33CB143B9, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_7BE8B6744FE6CBC4DD7CDEAA12652AE7, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_TransitionResult_F319490C45083840408A43BC5385262F, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_485989A643F9035A2173DF801BA2C210, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_3D30F9CD4AB1540837C46DA92A1B880A, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_E41057AF494DF46407681B8399E4A9B3, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_BlendListByEnum_F16A1EC24FF8DCC04D656A88807977C1, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_8E5376BA44C295664C3844944476E470, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_94EBC2D64CC1BBAF6EF40FB79934A8FA, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_31D349B64ED0EED624E04AA44219D8B3, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_BlendListByEnum_0D10B54348DEDCB3D3781F81AE53A504, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_D04425654B221EB6B45D4A81E413B0AD, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_93DA51E64C9B5D85F1E515A79F9739C0, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_61464A8B41A7E7B0F370508583D2205C, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_FE673932475FB44EFDC2A4916340B447, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_15159193439DEEAEBB611A9B3F09C9AC, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_D7AE66A745804A6D0F4C7F80ADE2AC10, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ModifyBone_954ECBA149AA7C7C6C913185BE67EBFF, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ModifyBone_A49FD9924CD4BC435F94F8B3673BCE12, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ModifyBone_15D7068040A83F2F67F665A347B8DED8, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ModifyBone_4F26117D4FFB8455D9714CB465B692BE, 0x1270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ModifyBone_804E8CEC4B05A3BC57C9E9857C2B6D77, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_4D82C347422F31BC450AA19FE0F122C2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_LocalToComponentSpace_B9CE943F489EE2B86B062AA542BC49D9, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_DD06F0DD49D2452BFDDFD7A2CF384345, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateResult_991B26B74AE20186889C388F14054E37, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, AnimGraphNode_StateMachine_B6FC0C5F4F8642AF8A10A7A0AE49E321, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisAvatar_AnimBP_C, PlayAvatarSwingVFX, 0x1720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisAvatar_AnimBP_C, 0x1730);
		}

		// class UBB_Scoreboard_Bases_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_Scoreboard_Bases__BB_Scoreboard_Bases_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, ArrowBottom, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, ArrowTop, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, Base1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, Base2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, Base3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, InningText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, BaseEmptyColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Bases_C, BaseOccupiedColor, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_Scoreboard_Bases_C, 0x0268);
		}

		// class ABW_BallReturnSlot_C : public ABowlingBallReturnSlot
		TEST_METHOD(BlueprintGeneratedClass__BW_BallReturnSlot__BW_BallReturnSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_BallReturnSlot_C, UberGraphFrame, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_BallReturnSlot_C, 0x03D0);
		}

		// class ATennis_Stadium_03_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Tennis_Stadium_03__Tennis_Stadium_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennis_Stadium_03_C, 0x0330);
		}

		// class ANoPause_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__NoPause_BP__NoPause_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Timeline_Scale_Alpha_32BA62CA47921EB231FE4F90AF02D3B1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Timeline_Scale__Direction_32BA62CA47921EB231FE4F90AF02D3B1, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, UnknownData_4WKB, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Timeline_Scale, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, NoPauseIcon, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, UnknownData_R42J, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Yaw, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANoPause_BP_C, Delta, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANoPause_BP_C, 0x035C);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0408);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03D0);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_JDJF, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0218);
		}

		// class ABP_TrophyAward_BaseballBase_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BaseballBase__BP_TrophyAward_BaseballBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, UnknownData_DSLJ, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, TrackerInitialized, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, UnknownData_7K3S, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, TennisManager, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, Player, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, PlayerId, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, UnknownData_XYRI, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, SportManager, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, IsLocalPlayerBatting, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, UnknownData_RG9N, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BaseballBase_C, BaseballBall, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BaseballBase_C, 0x03D8);
		}

		// class ABP_TrophyAward_BW_Kingpin_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Kingpin__BP_TrophyAward_BW_Kingpin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Kingpin_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Kingpin_C, 0x03C0);
		}

		// class AInfoDisplay_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InfoDisplay__InfoDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, BlobShadow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Widget_Component, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, StaticMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, ScaleRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Shadow, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Audio_ScaleDown, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Audio_ScaleUp, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Timeline_ScaleUp_Scale_3B1FCC5049B22FA35726C4A8F89F1666, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Timeline_ScaleUp__Direction_3B1FCC5049B22FA35726C4A8F89F1666, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UnknownData_4DRI, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Timeline_ScaleUp, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, CountDownComplete, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, InitialScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, DestroySelf, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UnknownData_6SVB, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Widget, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, DisplayTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UnknownData_CSF4, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, DisplayText, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, ScalingDown, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, Updating, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UnknownData_2CN8, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, ShadowHeight, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoDisplay_C, UseBlobShadow, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfoDisplay_C, 0x03D1);
		}

		// class ATN_TennisRacket_Upgrade01_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_TennisRacket_Upgrade01__TN_TennisRacket_Upgrade01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, DynamicMaterial, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, DefaultTints, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, NormalHitColors, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, ChargeHitColors, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, SliceHitColors, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, ChargeSliceHitColors, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, ShotTypes, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, UnknownData_S832, 0x1011);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_TennisRacket_Upgrade01_C, DefaultIntensity_1, 0x1014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_TennisRacket_Upgrade01_C, 0x1018);
		}

		// class ATN_CricketBat_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_CricketBat__TN_CricketBat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_CricketBat_C, 0x0FB8);
		}

		// class UMiniGameManager_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__MiniGameManager__MiniGameManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMiniGameManager_C, 0x0028);
		}

		// class ABW_Pin_C : public ABowlingPin
		TEST_METHOD(BlueprintGeneratedClass__BW_Pin__BW_Pin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, UberGraphFrame, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, InstancedMesh, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, Timeline_Shrink_Scale_D46F3A234E89FD8FB05F328799728497, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, Timeline_Shrink__Direction_D46F3A234E89FD8FB05F328799728497, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, UnknownData_IH6U, 0x0935);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, Timeline_Shrink, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, InitialScale, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, UnknownData_OO6H, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, pinsetter, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, Player1, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, UnknownData_WIDS, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, InstigatingBall, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, Alley, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, SinglePinSound, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Pin_C, ExtraPinsLane, 0x0971);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Pin_C, 0x0972);
		}

		// class UBB_Scoreboard_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BB_Scoreboard__BB_Scoreboard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_Scoreboard_C, 0x0028);
		}

		// class ABB_StrikezoneQuad_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_StrikezoneQuad__BB_StrikezoneQuad_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, BR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, BL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, TR, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, TL, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, QuadRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, TN_UI_Dialog_Disappear_Cue, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, TN_UI_Dialog_Appear_Cue, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_ScaleAlt_Scale_4821DA294C6716D5C3A4389006E6F867, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_ScaleAlt__Direction_4821DA294C6716D5C3A4389006E6F867, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, UnknownData_VF6Y, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_ScaleAlt, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_Scale_Scale_9F56809C47582E25DD2131B54B0B3B42, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_Scale__Direction_9F56809C47582E25DD2131B54B0B3B42, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, UnknownData_X7GA, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, Timeline_Scale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, InitialScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, PlaySound, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, UnknownData_U7RY, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_StrikezoneQuad_C, QuadOpacity, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_StrikezoneQuad_C, 0x03A4);
		}

		// class UGameDetailsHighScoreWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameDetailsHighScoreWidget__GameDetailsHighScoreWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, HighScoreText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, HorizontalBox_Target, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, IconProxy, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, ScoreText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, Text_Target, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, Text_TargetCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, TrophyBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameDetailsHighScoreWidget_C, TrophyText, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameDetailsHighScoreWidget_C, 0x0250);
		}

		// class AScramSportManagerTennis_Blueprint_C : public AScramSportManagerTennis
		TEST_METHOD(BlueprintGeneratedClass__ScramSportManagerTennis_Blueprint__ScramSportManagerTennis_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UberGraphFrame, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Umpire_Vox, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, AudioCrowd, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, AudioOrgan, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Root, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Timeline_Fade_Scale_C1BD0CC347DA3F34FF1DE8A8F9545337, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Timeline_Fade__Direction_C1BD0CC347DA3F34FF1DE8A8F9545337, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_2LMY, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Timeline_Fade, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, MatchStarted, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, GameOver, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, MatchOver, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Ace, 0x04AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, DoubleFault, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Out, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_AQM9, 0x04AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, NetTextDisplayTime, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Player1Serve, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, DebugBallsSetting, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_QU0X, 0x04B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, GameInstance, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ServeOffset, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ScorePlayer1, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ScorePlayer2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Player1Winner, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_XHC1, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, MatchComplete, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ServeLocationIndicator, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, OrganFadeOuttime, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_B8KR, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ServeLauncher, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, GameCount, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ShowDebugText, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_ZUBC, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, DebugButton, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, InfoDisplayStingerIntroTime, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_U94Y, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ReceiveLocationIndicator, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, LocalHelper, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, GameComplete, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ServeReady, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, LocalIsPlayer1, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_2YZZ, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, PointComplete, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, BallInPlay, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, PreServeStart, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, p1won, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UseScrambler, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_EMPJ, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Scrambler, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, LetServeResult, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Player1Reference, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, Player2Reference, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, OC5Demo, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ServeChange, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_MMDS, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ScrambleSchedule, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, MusicStarted, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, IsSpectator, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_4B0V, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, PlayByPlayActor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, FaultServeResult, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, TraditionalScoring, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, ShowAdvantage, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_JVW9, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, PauseBubbleActor, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, DisplayStartMessages, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, UnknownData_VXDO, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, BallSpawnDelay, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, RestoredBall, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, RestoredPlayer1Instrument, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, RestoredPlayer2Instrument, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, RestoredActiveArenaScramble, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, P1GamesWon, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerTennis_Blueprint_C, P2GamesWon, 0x061C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerTennis_Blueprint_C, 0x0620);
		}

		// class ATennisScrambleTargetGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TennisScrambleTargetGroup__TennisScrambleTargetGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, Scene, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ScrambleClasses, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, MaxActiveTargets, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, InitialDelay, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, InitialTargetCount, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, RespawnDelay, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ValidSpawnLocations, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, InstrumentHitBallsOnly, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, DelayActive, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, UnknownData_GCEE, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, InitialValidSpawnLocations, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, DisabledClasses, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, OptionalScrambleSet, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ActiveTargets, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, TennisManager, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, TennisGameManaged, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ManagedGamePaused, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, UnknownData_ZZMT, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ReinforcementDelay, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, TennisScramblerSchedule, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ValidSpawnLocations_Initial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ValidSpawnLocations_Reinforcements, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ScrambleSet_Initial, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ScrambleSet_Reinforcements, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, SpawnCountMax, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, SpawnCountMin, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ValidSpawnLocations_Default, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, GroupSpawnDelay, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, SpawnCount, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, PointCompleted, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, UnknownData_CVYN, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, NetNotifier, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, NetNotifier_Pos, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, NetNotifier_Neg, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, DisabledSpawnLocations, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, ForceEvenDistribution, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, UnknownData_96FJ, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, InstrumentDistibutionList, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, BallDistibutionList, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, DisabledClasses_PerPoint, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTargetGroup_C, GameInstance, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScrambleTargetGroup_C, 0x0498);
		}

		// class AAudioReferences_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__AudioReferences__AudioReferences_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, Scene, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef0, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef5, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef6, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef7, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef8, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioReferences_C, AudioRef9, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioReferences_C, 0x0380);
		}

		// class ABB_ThrowingGlove_C : public ABaseballThrowingGlove
		TEST_METHOD(BlueprintGeneratedClass__BB_ThrowingGlove__BB_ThrowingGlove_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ThrowingGlove_C, UberGraphFrame, 0x0B70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_ThrowingGlove_C, 0x0B78);
		}

		// class ABaseballAIPitcher_Hard_Blueprint_C : public ABaseballAIPitcher_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIPitcher_Hard_Blueprint__BaseballAIPitcher_Hard_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIPitcher_Hard_Blueprint_C, 0x06D2);
		}

		// class UOCDemo_HitMe_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OCDemo_HitMe_Widget__OCDemo_HitMe_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOCDemo_HitMe_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOCDemo_HitMe_Widget_C, HitMeText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOCDemo_HitMe_Widget_C, 0x0220);
		}

		// class AButtonIcon_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ButtonIcon__ButtonIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonIcon_C, Widget, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButtonIcon_C, Root, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButtonIcon_C, 0x0338);
		}

		// class ABB_TennisBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_TennisBall__BB_TennisBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_TennisBall_C, 0x1038);
		}

		// class UOculusCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusCreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusCreateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusCreateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusCreateSessionCallbackProxy, UnknownData_RWWV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusCreateSessionCallbackProxy, 0x0090);
		}

		// class UOculusEntitlementCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusEntitlementCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusEntitlementCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusEntitlementCallbackProxy, OnFailure, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusEntitlementCallbackProxy, 0x0048);
		}

		// class UOculusFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusFindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusFindSessionsCallbackProxy, UnknownData_327D, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusFindSessionsCallbackProxy, 0x0090);
		}

		// class UOculusIdentityCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusIdentityCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusIdentityCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusIdentityCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusIdentityCallbackProxy, UnknownData_7VOX, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusIdentityCallbackProxy, 0x0058);
		}

		// class UOculusNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusNetConnection, UnknownData_RRIX, 0x1978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusNetConnection, 0x1988);
		}

		// class UOculusNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusNetDriver, UnknownData_GWMS, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusNetDriver, 0x0790);
		}

		// class UOculusUpdateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemOculus__OculusUpdateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusUpdateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusUpdateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusUpdateSessionCallbackProxy, UnknownData_9O10, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusUpdateSessionCallbackProxy, 0x0068);
		}

		// class AMenu_TrainingOptions_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_TrainingOptions__Menu_TrainingOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, MiddleRandomMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, CenterInstrumentMeshOrigin, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, InstrumentRotation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, BallMeshOffset, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, BallMeshOrigin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, BallMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, BallMeshOriginM, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMeshM, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Right, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Middle, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Left, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Widget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, MenuOffset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, InstrumentSkeletalMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, InstrumentStaticMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, InstrumentMeshOffset, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosMR, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosML, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosRR1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosRL1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosRR0, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosRL0, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosLR, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ButtonPosLL, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMeshR1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMeshR0, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMeshL_Texture, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMeshL_Hole, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, StaticMesh_Middle, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Root, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateInstrument_Alpha_16CBAF3544ABBC8655128A994FAE18CB, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateInstrument__Direction_16CBAF3544ABBC8655128A994FAE18CB, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_WA6U, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateInstrument, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateBallMesh_Alpha_256DE6D4471487D1CC0E24AEA81DC8A5, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateBallMesh__Direction_256DE6D4471487D1CC0E24AEA81DC8A5, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_W1CX, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Timeline_RotateBallMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, GameInstance, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, TrainingName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Red, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_3695, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, OptionsWidget, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ArrowButtons, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ListLeft, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, CurrentIndexLeft, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_2X6Z, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ListMiddle, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, CurrentIndexMiddle, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_7E1U, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ListRight0, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, CurrentIndexRight0, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_9OMO, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, ListRight1, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, CurrentIndexRight1, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, UnknownData_EWTM, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, Level, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrainingOptions_C, AssetsLoaded, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_TrainingOptions_C, 0x04E8);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_76OT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x00C0);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_BJEP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class AHeader_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Header__Header_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, WidgetComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BoundingBox, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Audio_RingsFinish, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Audio_Rings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, WidgetRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BottomBracketRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, TopBracketRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BottomRing, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, TopRing, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BottomRingRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, TopRingRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, RingsRoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BottomBracket, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, TopBracket, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Root, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMajor_Alpha_A3B4E741471F140BF7CEF38A6537515B, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMajor__Direction_A3B4E741471F140BF7CEF38A6537515B, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_H6Q3, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMajor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMinor_alpha_D4BFA39C42EA37B0FCA3009992E3A85F, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMinor__Direction_D4BFA39C42EA37B0FCA3009992E3A85F, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_HI4B, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingMoveMinor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_ScaleWidget_alpha_1F774D66481238DF434760B25AC108FE, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_ScaleWidget__Direction_1F774D66481238DF434760B25AC108FE, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_7OQ3, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_ScaleWidget, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingsGrow_alpha_AD839AF341D6A744FFD46D82A6A99982, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingsGrow__Direction_AD839AF341D6A744FFD46D82A6A99982, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_C4SB, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_RingsGrow, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_Brackets_Alpha_8229330B4DDA53256FF5E6BA5B0296DA, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_Brackets__Direction_8229330B4DDA53256FF5E6BA5B0296DA, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_VPH4, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Timeline_Brackets, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, HeaderText, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Closing, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, UnknownData_5M4L, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, Widget, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BracketClosed, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, BracketOpen, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, SpawnInitialMenu, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, RemoveMenu, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, StartRed, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, FinishedOpening, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, StartOpen, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHeader_C, ManualReopen, 0x0463);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHeader_C, 0x0464);
		}

		// class ABB_ChallengeTarget_Spawner_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__BB_ChallengeTarget_Spawner__BB_ChallengeTarget_Spawner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, ScramTrajectoryInfluencerBaseball, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene14, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene13, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene12, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene10, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene9, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene8, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene6, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene5, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene4, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Scene, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Pattern_4, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Pattern_2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Pattern_3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, Pattern_1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, DefaultSceneRoot, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, ScoreATarget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, GroupCleared, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, ActiveTargets, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, TestPattern, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_Spawner_C, FindResult, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_ChallengeTarget_Spawner_C, 0x0418);
		}

		// class ATennisTrainingScrambleTargetGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TennisTrainingScrambleTargetGroup__TennisTrainingScrambleTargetGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, _2_Button_PairSpawnLeft, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, _2_Button_PairSpawnRight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, _3_Button_SpawnLeft, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, _3_Button_SpawnRight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, _3_Button_SpawnCenter, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ScrambleClasses, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, MaxActiveTargets, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, InitialDelay, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, InitialTargetCount, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, RespawnDelay, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ValidSpawnLocations, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, InstrumentHitBallsOnly, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, DelayActive, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, UnknownData_YR0J, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, InitialValidSpawnLocations, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, DisabledClasses, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, OptionalScrambleSet, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ActiveTargets, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, TennisManager, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, TennisGameManaged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ManagedGamePaused, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, UnknownData_F7SG, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ReinforcementDelay, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, TennisScramblerSchedule, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ValidSpawnLocations_Initial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ValidSpawnLocations_Reinforcements, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ScrambleSet_Initial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ScrambleSet_Reinforcements, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, SpawnCountMax, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, SpawnCountMin, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ValidSpawnLocations_Default, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, GroupSpawnDelay, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, SpawnCount, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, PointCompleted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, UnknownData_A65K, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, NetNotifier, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, NetNotifier_Pos, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, NetNotifier_Neg, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, DisabledSpawnLocations, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, ForceEvenDistribution, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, UnknownData_J97I, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, InstrumentDistibutionList, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, BallDistibutionList, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, DisabledClasses_PerPoint, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, GameInstance, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, TrainingTarget, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, BallHasBeenFiredByTarget, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, RightTrainingTarget, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, LeftTrainingTarget, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, TargetHasBeenHit, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisTrainingScrambleTargetGroup_C, DemoTargets, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisTrainingScrambleTargetGroup_C, 0x0508);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAsset : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ClothConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_DNQ1, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LODData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LodMap, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneNames, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneIndices, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ReferenceBoneIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_LNUU, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, CustomData, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAsset, 0x0178);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_00GW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class ABallLauncher_C : public ALauncher_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BallLauncher__BallLauncher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, SFX_BallLauncher_WheelRotate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, ScramBounceLighting, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, PreCalcTarget, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, SkeletalMesh, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RotateWheels_Alpha_02310291463AE2EDA4F244B5344DC183, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RotateWheels__Direction_02310291463AE2EDA4F244B5344DC183, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_J4J7, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RotateWheels, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_MovementX_Alpha_C6CCE123441344CA9578159110F81692, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_MovementX__Direction_C6CCE123441344CA9578159110F81692, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_XVHY, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_MovementX, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RaiseHead_Height_B7AD78624E092B30875349BD72A49715, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RaiseHead__Direction_B7AD78624E092B30875349BD72A49715, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_L8LM, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_RaiseHead, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Spawn_Scale_66324606428D1B72781582811C0260C8, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Spawn__Direction_66324606428D1B72781582811C0260C8, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_2QXR, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Spawn, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Movement_Alpha_10B36EB74C1DF04AF884D6BB7D913DAA, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Movement__Direction_10B36EB74C1DF04AF884D6BB7D913DAA, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_QHY5, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Movement, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Pitch_Alpha_C742BD884D58DBDA22723887C3BF349D, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Pitch__Direction_C742BD884D58DBDA22723887C3BF349D, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_1H2T, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Pitch, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Rotation_Alpha_C8592FAF4841FB5878A250A2A39D81A3, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Rotation__Direction_C8592FAF4841FB5878A250A2A39D81A3, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_U14S, 0x05BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Rotation, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Height_Alpha_90F9DD2748A34D79EF57F694C09AA77B, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Height__Direction_90F9DD2748A34D79EF57F694C09AA77B, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_Q4ES, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_Height, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_ScaleUp_Scale_1B38EF084117B5E5E3ED409E6CE2DD48, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_ScaleUp__Direction_1B38EF084117B5E5E3ED409E6CE2DD48, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_51VP, 0x05DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Timeline_ScaleUp, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, InitialScale, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Closing, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_091C, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, StartHeight, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, EndHeight, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, StartRotation, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, EndRotation, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, StartPitch, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, EndPitch, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, StartPositionY, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, EndPositionY, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, TelegraphDelay, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, LinkedMovementDelay, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, GameInstance, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_ZE3U, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, trajectory, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, InitialHeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_C2ME, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, AnimBp, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Material, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, LightOffColor, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, LightOnColor, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, PlaySpawnAnimation, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_DUAF, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, FinishedSpawnSequence, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, MovingL, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_Q8FB, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, RandomSpeed, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, TargetRegionRightMargin, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, TargetRegionLeftMargin, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, TargetRegionTopMargin, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, TargetRegionBottomMargin, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Enabled, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_C0N5, 0x0889);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, FinishedMoveForwardSequence, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, EndPositionX, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, StartPositionX, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, MovingF, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_0ZIQ, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, FinishedAiming, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, Collapsed, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, SequenceActive, 0x08C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, UnknownData_33RA, 0x08C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, InitialX, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, InitialY, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallLauncher_C, DisableLaunch, 0x08CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallLauncher_C, 0x08CD);
		}

		// class ABB_Train_02_StrikezoneRegions_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_02_StrikezoneRegions__BB_Train_02_StrikezoneRegions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog_05, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog06, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_NiceYouGotIt, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog11, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog10, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_HeresABall, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog09, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog08, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Dialog07, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_ComponentTryAgain, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Audio_Good, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, OriginalPitchingPreferences, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Tutorial_FirstTargetHit, 0x0683);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, Retrying, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, UnknownData_A7LZ, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, PauseBetweenVO, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, UmpireCallDelay, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, ListenForAnalogStick, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, UnknownData_GDCS, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, LeftStickLRValue, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, RightStickLRValue, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, BB_Handedness, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, TrainingStarted, 0x069D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, UnknownData_5ZHB, 0x069E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, RememberGrabBallVOTimer, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, LeftStickUDValue, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, RightStickUDValue, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, MovedMittVOTimer, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, PlayerHasBall, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_02_StrikezoneRegions_C, RestoreScrambleBallSetting, 0x06B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_02_StrikezoneRegions_C, 0x06BA);
		}

		// class UFriendListOfflineWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FriendListOfflineWidget__FriendListOfflineWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListOfflineWidget_C, Text0, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListOfflineWidget_C, Text1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListOfflineWidget_C, Text2, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendListOfflineWidget_C, 0x0228);
		}

		// class UJoinInviteWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__JoinInviteWidget__JoinInviteWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinInviteWidget_C, PanelText0, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinInviteWidget_C, PanelText1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinInviteWidget_C, PanelText2, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinInviteWidget_C, 0x0228);
		}

		// class AMusicManager_BP_C : public AMusicManager
		TEST_METHOD(BlueprintGeneratedClass__MusicManager_BP__MusicManager_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, Audio, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, Root, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, Volume, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, UnknownData_K0RF, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMusicManager_BP_C, GameInstance, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMusicManager_BP_C, 0x03A8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_CWRX, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1978);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_GGGA, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_F0BD, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_GGUL, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x06D8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_05PU, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0060);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_VD8M, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0078);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_U7VK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0070);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_PM6P, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0090);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_QZVJ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0070);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_A4Y1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0078);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_1UU8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0070);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_AX17, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0088);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_SQ6U, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_L1VQ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_5JKE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_JOB4, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_4ML8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0128);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_5J63, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_B6IS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_6Q0C, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_HJLK, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_CK3J, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0350);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_BXHE, 0x0361);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x03A0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_FETX, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_43FI, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0408);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0350);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_PE9I, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_B77T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_QQQH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_2AIN, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x0190);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_J5OH, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_2A3T, 0x0423);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0450);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_ZM83, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_VVG1, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_OIFK, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x03B8);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_SFO0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_DJ6X, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_HADG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0070);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_D2CV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x03A0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0350);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_S054, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x05D0);
		}

		// class ABW_VibroBall_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_VibroBall__BW_VibroBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VibroBall_C, UnknownData_GWOJ, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VibroBall_C, UberGraphFrame, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VibroBall_C, Audio_LoopingVibroball, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VibroBall_C, PlayingSound, 0x0F18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_VibroBall_C, 0x0F19);
		}

		// class ATN_Soccerball_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Soccerball__TN_Soccerball_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Soccerball_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Soccerball_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Soccerball_C, 0x1160);
		}

		// class AScramPlayerHandPossessor_BP_Right_C : public AScramPlayerHandPossessor_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHandPossessor_BP_Right__ScramPlayerHandPossessor_BP_Right_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHandPossessor_BP_Right_C, 0x03E0);
		}

		// class ADebugHandButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DebugHandButton__DebugHandButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, ScramBoxInteractable, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, WidgetBack, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, WidgetFront, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Button, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Root, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDownTouched_Scale_0392218447780F8FD6193A8C1A42D6CF, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDownTouched__Direction_0392218447780F8FD6193A8C1A42D6CF, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_QBX8, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDownTouched, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Touched_Scale_138800844BF1AE0EEB141EB1C3B00C9D, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Touched__Direction_138800844BF1AE0EEB141EB1C3B00C9D, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_RO0W, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Touched, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDown_Scale_38598789464A64AC58449AB0BFFB167A, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDown__Direction_38598789464A64AC58449AB0BFFB167A, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_OLGZ, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleDown, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleUp_Scale_2E27A33C4FB31E5C607B958F8B3AE285, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleUp__Direction_2E27A33C4FB31E5C607B958F8B3AE285, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_FKD4, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Timeline_ScaleUp, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, InitialScale, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_WS9D, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, DebugHandButton_Touched, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Front, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Back, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, AllowPress, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_B8V3, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, DebugButtonInfo, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Overlapping, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, UnknownData_RJLS, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, TouchActors, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugHandButton_C, Activated, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugHandButton_C, 0x0431);
		}

		// class ABowlingAI_Blueprint_C : public AScramBowlingAI
		TEST_METHOD(BlueprintGeneratedClass__BowlingAI_Blueprint__BowlingAI_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAI_Blueprint_C, UberGraphFrame, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAI_Blueprint_C, Player1, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAI_Blueprint_C, RandomizeAvatar, 0x0549);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAI_Blueprint_C, 0x054A);
		}

		// class ATurnAround_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TurnAround__TurnAround_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, ScramLookAtActivator, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, RingMp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, RingBowling, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, ButtonPos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, RingBaseball, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, StaticMesh, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, SignRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, ScaleRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Root, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Timeline_MenuScale_Alpha_EA7D81B745FEB3FBC2E525A17326EDD1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Timeline_MenuScale__Direction_EA7D81B745FEB3FBC2E525A17326EDD1, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, UnknownData_NMVK, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Timeline_MenuScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Offset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, UnknownData_53LQ, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Button, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Type, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurnAround_C, Sport, 0x03A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurnAround_C, 0x03A2);
		}

		// class ABB_Minigame_Pitching_Fielding_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_Fielding__BB_Minigame_Pitching_Fielding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, strikeZone, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, GameInstance, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, EquipmentSet, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, GameSelector, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, SportManager, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, BallLauncher_01, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, LauncherCanLaunch, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, UnknownData_O359, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, PreferredHand, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, BallLauncher_02, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, LauncherHorizontalVariance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, LauncherVerticalVariance, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Fielding_C, CurrentBallInPlay, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_Fielding_C, 0x03A0);
		}

		// class ABaseballAIFielder_Easy_Blueprint_C : public ABaseballAIFielder_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIFielder_Easy_Blueprint__BaseballAIFielder_Easy_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIFielder_Easy_Blueprint_C, 0x054A);
		}

		// class UButtonIconWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ButtonIconWidget__ButtonIconWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonIconWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonIconWidget_C, Text, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonIconWidget_C, 0x0220);
		}

		// class AManagerBaseball_LocalHelper_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__ManagerBaseball_LocalHelper__ManagerBaseball_LocalHelper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, VFX_FireworksRight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, VFX_FireworksLeft, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, GameInstance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_CheerGood, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_CheerBad, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, InfoPanel, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_StingerWin, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_StingerLose, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, InfoDisplayStingerIntroTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, LocalIsPlayer1, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, Player1WonPoint, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, UnknownData_3ECX, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, FinishedReadyMessage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, GameEndText, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, GameEndSound, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_TeleportMusic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_MittCatch, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, TopOrBottomText, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, InningText, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_BatBrokenAnnouncement, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, SFX_PickNewBatAnnouncement, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, QueuedSounds, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBaseball_LocalHelper_C, Result, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManagerBaseball_LocalHelper_C, 0x0471);
		}

		// class ABB_Frisbee_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Frisbee__BB_Frisbee_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Frisbee_C, 0x1038);
		}

		// class ASceneMaterialVariables_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SceneMaterialVariables__SceneMaterialVariables_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Fog_Color, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Fog_Depth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Scene_Color_Power, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Scene_Color_Saturation, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Fog_Opacity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Fog_Start_Distance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Ambient_Bounce_Color_Contribution, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Base_Color_Contribution, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, UnknownData_GRTZ, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, UVRange_StadiumSelection, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneMaterialVariables_C, Fog_Color_02, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneMaterialVariables_C, 0x0380);
		}

		// class ABW_CheeseWheel_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_CheeseWheel__BW_CheeseWheel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_CheeseWheel_C, 0x0F01);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_MXNF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class ATennisScramble_GolfClub_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_GolfClub__TennisScramble_GolfClub_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_GolfClub_C, 0x0380);
		}

		// class ATN_Minigame_ScrambleTest_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_ScrambleTest__TN_Minigame_ScrambleTest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, UnknownData_K3ZH, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, ActivePayloads, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, LauncherLeft, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, LauncherSelectionButtons, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, LaucherChoiceMenu, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, AttachRacketScramble, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, UnknownData_0N03, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, BallOnly, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, RandomAll, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, RacketTest, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, UnknownData_LN5K, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ScrambleTest_C, RandomBall, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_ScrambleTest_C, 0x03E8);
		}

		// class AMenu_IndexSelection_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_IndexSelection__Menu_IndexSelection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc11, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc10, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc09, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc08, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc07, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc06, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc05, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc04, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc03, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc02, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc01, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Loc00, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, ButtonLocs, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, StaticMesh_Bottom, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, StaticMesh_Mid, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, StaticMesh_Top, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Root, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Mode, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, Sport, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, UnknownData_XZNK, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, NameList, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, ButtonList, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, ChoiceStarted, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, SaveData, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, TripleTapEnabled, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, UnknownData_C2ZL, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, ButtonPresses, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, SelectionComplete, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, DoSave, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_IndexSelection_C, LastButtonUnlocking, 0x0411);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_IndexSelection_C, 0x0412);
		}

		// class ABW_Challenge_02_SpaceAttack_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_02_SpaceAttack__BW_Challenge_02_SpaceAttack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, UnknownData_FE06, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, PracticeOver, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, UnknownData_B7BH, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, TutorialBallTable, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, SecondPauseCompleted, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, FirstPauseCompleted, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, UnknownData_CWE2, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, PrimaryAudioList, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, CenterScoreboardBP, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, AssignedBall, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, PatternList, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_02_SpaceAttack_C, AttackLaneActor, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_02_SpaceAttack_C, 0x05C0);
		}

		// class ABP_Trophy_BB_XXX_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_XXX__BP_Trophy_BB_XXX_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_XXX_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_XXX_C, 0x03E0);
		}

		// class ABP_TrophyAward_Baseball_InstrumentHitBase_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_Baseball_InstrumentHitBase__BP_TrophyAward_Baseball_InstrumentHitBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, UnknownData_JWHU, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, TrackerInitialized, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, UnknownData_8COH, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, TennisManager, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, PrevPlayer1Score, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_Baseball_InstrumentHitBase_C, 0x03B4);
		}

		// class ABP_TrophyAward_TN_GrandSlammer_C : public ABP_TrophyAward_TN_MatchCompleteBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_GrandSlammer__BP_TrophyAward_TN_GrandSlammer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_GrandSlammer_C, 0x03BA);
		}

		// class ABP_TrophyAward_BW_Golden_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Golden__BP_TrophyAward_BW_Golden_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Golden_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Golden_C, 0x03C0);
		}

		// class ATN_Train_Base_C : public ATrainingBase_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_Base__TN_Train_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UnknownData_XH9I, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, Scoreboards, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, GameSelector, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, Manager, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LauncherLeft, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LevelData, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, TravelCapsule, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LevelWon, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UnknownData_XPJT, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, ResultsMenu, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LauncherRight, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, ActivePayloads, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LightUpGroup, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, Bounces, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UnknownData_CH2L, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, NetScoreBoard, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, SFX_BallGoodSound, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, SFX_BallBadSound, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LevelCompleted, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UnknownData_F7CW, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, LauncherCenter, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, ServeLocationIndicator, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, ServeLauncher, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, GameWall, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, BallTargets, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, TargetPool, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, BindToBallSpawned, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, UnknownData_L6ZU, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, TennisTargetGroup, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, ValidBallClassList, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, BallClass, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, DisabledBallClassList, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, TennisNet, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, TrainingResult, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_Base_C, IgnoreBallsNeverHitByInstruments, 0x0591);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_Base_C, 0x0592);
		}

		// class ABW_BowlingBall_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_BowlingBall__BW_BowlingBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_BowlingBall_C, 0x0F01);
		}

		// class AScramPlayerHand_BP_Right_C : public AScramPlayerHand_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHand_BP_Right__ScramPlayerHand_BP_Right_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_Right_C, UnknownData_YTV3, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_Right_C, UberGraphFrame, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHand_BP_Right_C, 0x0460);
		}

		// class ATN_Train_08_UnlimitedVolley_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_08_UnlimitedVolley__TN_Train_08_UnlimitedVolley_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, UnknownData_03Q2, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, DelayBetweenLauncherBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, UnknownData_7FAP, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_ForehandOnly, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LaunchTargets, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, BallClass_1, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LaunchSetting, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LaunchSide, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, UnknownData_G1TO, 0x05D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, InstrumentClass, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, ValidBallClassList_0_1, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, RandomBall, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, UnknownData_007O, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, DelayBetweenLaunches, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_BackhandOnly, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_Alternating, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_Random, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_Forehand, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LivingRoom_Backhand, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, LaunchTarget, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_08_UnlimitedVolley_C, BallDirectionIndex, 0x06BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_08_UnlimitedVolley_C, 0x06C0);
		}

		// class AGameHandlerOnline_C : public AScramHandshakeActor
		TEST_METHOD(BlueprintGeneratedClass__GameHandlerOnline__GameHandlerOnline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, FarRightButtonPos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, StaticBottomMidButtonPos, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, StaticMenuRoot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvatarButtonRPos, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvROffset, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvatarButtonLPos, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvLOffset, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, BottomRightButtonPos, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, BottomLeftButtonPos, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, BottomMidButtonPos, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, FarLeftButtonPos, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, LeftButtonPos, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, MenuRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, MenuScaleRoot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, RightButtonPos, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, OffsetRoot, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Music, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Root, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Timeline_MenuScale_Alpha_863974084A4C064B038E93A7E471E26C, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Timeline_MenuScale__Direction_863974084A4C064B038E93A7E471E26C, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_LREW, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Timeline_MenuScale, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, GameInstance, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Header, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Sport, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, PlayWithFriend, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_YQHQ, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, MenuOpened, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, OldMenuClear, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, LeftButton, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, RightButton, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, NextButton, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, HomeButton, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ActiveSubmenu, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, RemotePlayerReady, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_4PQ5, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ReadyMenu, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ReadyMenuFullyOpen, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, MatchOver, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_AHSU, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ResultsMenu, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, Results, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_78CD, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, TrophyMenu, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, RemotePlayerWantsRematch, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, WaitingOnRemoteRematch, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, BB_HostIsHomeTeam, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvatarMenuOpened, 0x048B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, WaitingToChooseSport, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_PB55, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, AvatarButtons, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, NetworkFailureDetected, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, NetworkFailureMenuCanActivate, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_QEYA, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ActiveStaticMenu, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, GameManager, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ExpectedClientState, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_OWO4, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ReturnExpectedClientState, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, HostForfeit, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, HasSeenInitialMessage, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, RestoringGame, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, MatchStarting, 0x04D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, UnknownData_KY1W, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, BackButton, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ReconnectDelayActive, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ClientCanTravel, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ServerCanTravel, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ClientCanBeginMatch, 0x04E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerOnline_C, ServerCanBeginMatch, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameHandlerOnline_C, 0x04E5);
		}

		// class ACMN_Trail_Base_C : public AScramActorFollower
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Base__CMN_Trail_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Trail_Base_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Trail_Base_C, Trail_Head, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Trail_Base_C, Trail, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Trail_Base_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Trail_Base_C, fadeOutTime, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Base_C, 0x037C);
		}

		// class ACMN_Trail_DoubleCross_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_DoubleCross__CMN_Trail_DoubleCross_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_DoubleCross_C, 0x037C);
		}

		// class ABB_PinPongBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_PinPongBall__BB_PinPongBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PinPongBall_C, 0x1038);
		}

		// class ATravelcapsule_C : public AScramTravelCapsule
		TEST_METHOD(BlueprintGeneratedClass__Travelcapsule__Travelcapsule_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Travelcapsule_Icons, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, AudioTransition, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, AudioAmbient_B, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, AudioAmbient_F, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, AudioAmbient_R, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, AudioAmbient_L, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Travelcapsule_Base, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Root, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor2_Alpha_AFDE493D469E4F849D9CF0B3E75E948F, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor2__Direction_AFDE493D469E4F849D9CF0B3E75E948F, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_W3KX, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor2, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor_Alpha_04E1F1594CA28D7973608CB0C50EDA2C, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor__Direction_04E1F1594CA28D7973608CB0C50EDA2C, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_D63K, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_PulseColor, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ColorSwap_Alpha_626841A34039294DAFACF3AADB918C21, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ColorSwap__Direction_626841A34039294DAFACF3AADB918C21, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_RYXJ, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ColorSwap, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ChangeMediaAlpha_Alpha_BE1D7109401A6C4B4082D790733A74A5, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ChangeMediaAlpha__Direction_BE1D7109401A6C4B4082D790733A74A5, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_912N, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Timeline_ChangeMediaAlpha, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, TravelCapsuleMaterial, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, TravelCapsuleOn, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, TravelCapsuleRemoved, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Duration, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, VisibleOnSpawn, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Removing, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, StartRed, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_U50H, 0x0447);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, ColorSwapTime, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_ECZ5, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, ColorSwapComplete, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, YellowPulse, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_DUYG, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, Travel_Capsule_Icon_Material, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, RedPulse, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, UnknownData_BW0Z, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATravelcapsule_C, TravelCapsuleClosed, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATravelcapsule_C, 0x0488);
		}

		// class ATN_Basketball_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Basketball__TN_Basketball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Basketball_C, 0x1158);
		}

		// class AMainMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MainMenu__MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Position3, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Position2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Position1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Position0, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, MenuRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, GameInstance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, TopMenuActivated, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, TopMenuDeactivated, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, MainMenuSelectionMade, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, BeingDestroyed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, ShowReplay, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UnknownData_UIR1, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Buttons, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Touching, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, Selection, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenu_C, 0x03B2);
		}

		// class ATrophyUIPassthrough_C : public ABP_TrophyGrabbableBase_C
		TEST_METHOD(BlueprintGeneratedClass__TrophyUIPassthrough__TrophyUIPassthrough_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, UberGraphFrame, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, TrophyGlove, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, IsPressed, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, IsPointingAt, 0x0B99);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, UnknownData_BE7V, 0x0B9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, Button, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrophyUIPassthrough_C, HapticScale, 0x0BA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrophyUIPassthrough_C, 0x0BAC);
		}

		// class AMenu_PnpWinner_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_PnpWinner__Menu_PnpWinner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, StaticMesh_ScoreBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, WidgetCompScoreBox, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, ScoreBoxRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, WidgetCompText, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, MenuRoot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, ResultsScoreComplete, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PnpWinner_C, Winner, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_PnpWinner_C, 0x0374);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_DJJQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, bFrameRequested, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_8ISY, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_CKGQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_H2E7, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_PNNI, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HAJK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_MW2A, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_5HA7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_2LXP, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_41QR, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_HSHF, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_CXRF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_P145, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_PRS6, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x01F0);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_D2WV, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_6QDH, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0210);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_I3H3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00E0);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_QFUQ, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E8);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_T8NC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, VideoCodec, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_52QI, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0090);
		}

		// class AManagerTennis_LocalHelper_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__ManagerTennis_LocalHelper__ManagerTennis_LocalHelper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, Music_StartOfMatch, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, Umpire_Vox, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, NetScoreBoard, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, NetTextDisplayTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, UnknownData_WTCK, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, GameInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, ScorePlayer1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, ScorePlayer2, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, ArenaScoreboards, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_CheerGood, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_CheerBad, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, InfoPanel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_StingerWin, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_StingerLose, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, InfoDisplayStingerIntroTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, LocalIsPlayer1, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, Player1WonPoint, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, UnknownData_KQJY, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_StartOfMatchMusic, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, SFX_GameOverMusic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, IsSpectator, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, UnknownData_57WG, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, ServeMessageComplete, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, NetScoreBoard2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, TraditionalScoring, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerTennis_LocalHelper_C, ShowAdvantage, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManagerTennis_LocalHelper_C, 0x03FA);
		}

		// class UBaseballAIRunner_AnimBP_C : public UBaseballRunnerAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseballAIRunner_AnimBP__BaseballAIRunner_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, UberGraphFrame, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_Root_D32D882545A016574F7061B1A0A96030, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_TransitionResult_AD8352694C43CB5D8D5360849D903351, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_TransitionResult_ECF386F7496C29FDE55F3596CB102D8E, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_TransitionResult_F9D2C2B04D0CF310438C9CBAFF5AA237, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_TransitionResult_AD69674844B75E9ACC5937B5D2A3F09B, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_SequencePlayer_3C13BDD242B2CCA625A9BF90F7E25D49, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_StateResult_EB2D62F841EB7C266E8050A8AA9C1CE9, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_SequencePlayer_22EA53EF4B5791811D46C98D40D922E0, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_StateResult_373C35A04A96DDD4C25E898084AA3ADE, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_SequencePlayer_9BBCA41E4CA0B3EB8FB4B6B16D643ED2, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_StateResult_665AAB8745097843BD9100AD71DCC790, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_SequencePlayer_931AF2224966B1BACE6BD48C1BB9FE6D, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_StateResult_C6FD1005476923D4886B9DBEA961B519, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, AnimGraphNode_StateMachine_317490414F9824AC51B388A7C9179F88, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIRunner_AnimBP_C, RunSequence, 0x0EA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAIRunner_AnimBP_C, 0x0EB0);
		}

		// class USpaceInvaderLane_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SpaceInvaderLane__SpaceInvaderLane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceInvaderLane_C, 0x0028);
		}

		// class USkeeBallLane_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SkeeBallLane__SkeeBallLane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeeBallLane_C, 0x0028);
		}

		// class AUmpire_Sideline_SkelMesh_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Umpire_Sideline_SkelMesh__Umpire_Sideline_SkelMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AUmpire_Sideline_SkelMesh_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUmpire_Sideline_SkelMesh_C, BoundingBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUmpire_Sideline_SkelMesh_C, ScramBounceLighting, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AUmpire_Sideline_SkelMesh_C, CoWorker_01, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUmpire_Sideline_SkelMesh_C, 0x0348);
		}

		// class ATN_Stadium_01_PalmTree_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Stadium_01_PalmTree_BP__TN_Stadium_01_PalmTree_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Stadium_01_PalmTree_BP_C, Inflatable_PalmTree_B_VA, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Stadium_01_PalmTree_BP_C, Float_Value_R, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Stadium_01_PalmTree_BP_C, NewVar_1, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Stadium_01_PalmTree_BP_C, 0x0332);
		}

		// class AMenu_AvatarSetup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_AvatarSetup__Menu_AvatarSetup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarButtonRPos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarButtonLPos, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, StaticMesh_Backing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, LeftPanelScaleOffset, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarRotation, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, StaticMesh1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, StaticMesh, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, SkinButtonLPos, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, SkinButtonRPos, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, HairButtonLPos, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, HairButtonRPos, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, RightPanelScaleOffset, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarOffset, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarPos, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, HairColorMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, SkinColorMesh, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, StaticMesh3, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, StaticMesh2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, LeftPanelRoot, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, RightPanelsRoot, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, ButtonPos, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Scene, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleAvatar_Alpha_A6A053B54535099D8586B5882A3E57BF, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleAvatar__Direction_A6A053B54535099D8586B5882A3E57BF, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_AJ2X, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleAvatar, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleMesh_Alpha_CEA1C17944048ABFCD562AB53A7B374E, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleMesh__Direction_CEA1C17944048ABFCD562AB53A7B374E, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_TIYB, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_ScaleMesh, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_MoveAvatar_Alpha_3785CD52488CB5D0C8727493FEB086D9, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_MoveAvatar__Direction_3785CD52488CB5D0C8727493FEB086D9, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_0JER, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_MoveAvatar, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_BackingScale_Alpha_0352AFEE450F60D87DD1BAA1F5223BDD, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_BackingScale__Direction_0352AFEE450F60D87DD1BAA1F5223BDD, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_F3LB, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_BackingScale, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_Rotation_Alpha_991A34474B3F84A75089408184F03010, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_Rotation__Direction_991A34474B3F84A75089408184F03010, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_3JYP, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Timeline_Rotation, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, GameInstance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnlockedAvatars, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, CurrentAvatarIndex, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_WWWX, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnlockedSkins, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, CurrentSkinIndex, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_KGDA, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnlockedHair, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, CurrentHairIndex, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarChanged, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_QH1C, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Avatar, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, ArrowButtons, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Sport, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Red, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_EKUF, 0x04A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnlockedPacks, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, TrophyManager, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, AvatarButton, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, InitialSetupAnimComplete, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, SetupWidget, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, NeutralColor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, UnknownData_7T8G, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_AvatarSetup_C, Level, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_AvatarSetup_C, 0x04F0);
		}

		// class ATN_Minigame_Breakout_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_Breakout__TN_Minigame_Breakout_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, UnknownData_G3B4, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, BallTargets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, AvailableBallTargets, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, LauncherSelectionButtons, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, LaucherChoiceMenu, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, LauncherSelection, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, UnknownData_2ENB, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, GameSelector, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, RoundsComplete, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, BallDelay, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, GameActive, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, UnknownData_BQCN, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, ActivePayloads, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, LauncherLeft, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, LauncherRight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_Breakout_C, CountdownActor, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_Breakout_C, 0x03F8);
		}

		// class ABowlingAlley_BP_C : public ABowlingAlley
		TEST_METHOD(BlueprintGeneratedClass__BowlingAlley_BP__BowlingAlley_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ParticleSystemRed, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ParticleSystemBlue, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, PlayerStartLocation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, StaticMesh3, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Loc_BallReturn, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Loc_BallTriggerTest, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Loc_PinSetter, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, StaticMesh2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, StaticMesh1, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Loc_LaneManager, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, StaticMesh, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ScoreWidgetComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Root, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_SmallTrainScore_Alpha_1243F4C14948D929E21E0DBD902C37C3, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_SmallTrainScore__Direction_1243F4C14948D929E21E0DBD902C37C3, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_DGFT, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_SmallTrainScore, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_LargeTrainScore_Alpha_C57BDAE342C06583EF6E9386EE9BA000, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_LargeTrainScore__Direction_C57BDAE342C06583EF6E9386EE9BA000, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_S28L, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_LargeTrainScore, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowSpare_Alpha_68F939F744DA0D5D7A63B4921125DB38, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowSpare__Direction_68F939F744DA0D5D7A63B4921125DB38, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_QHEA, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowSpare, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowStrike_Alpha_7D40996E4CF57637B6E07598001C63FA, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowStrike__Direction_7D40996E4CF57637B6E07598001C63FA, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_CRSG, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Timeline_ShowStrike, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ID, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_X0LV, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, GameInstance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneManager, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, pinsetter, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, score, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, FramePinCount, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, FrameRollCount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_DVQG, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, BallClass, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, BallReturn, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CenterScoreboard, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ScoreWidget, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisplayingStrike, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisplayingSpare, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_W88S, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DebugMenu, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Buttons, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CuedLaneChanges, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneEnabled, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_8J60, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SpawningButtons, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SubActors, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, QueuedBalls, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ScrambleBallQueueActive, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_WHY1, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ActiveScrambleBalls, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ActiveDefaultBalls, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, TallyBalls, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, InitialMatchBallCount, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, InitialMatchBallSpawnCount, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, FillCount, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_5PNK, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LocalHelper, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, MaxBallCount, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayResetPins, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBeforePinsCalculated, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBeforeStandardBallRespawn, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBeforeBallRespawn, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBetweenMultipleBallSpawns, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelaySpawnerBlink, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_Y2LR, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ScrambleBallList, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisabledScrambleBallList, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneChangeVO, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DefaultLaneClass, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, TrackActor, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, MaterialFlash, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayMaterialFlash, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CycleIndex, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, PinsKnockedDown, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, StrikeCount, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, BonusScoreSound, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBeforeSpecialBallSpawn, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DelayBeforeFrameCountReset, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, InstigatorBalls, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisableLaneChanges, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, AllowSpecialBalls, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, WaitForTally, 0x061A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, GameEnding, 0x061B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_6IYR, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, BowlingEvent, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, TrainingMode, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisableScoring, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_JVB3, 0x0632);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CurrentLaneScore, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, DisableBallSpawn, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_V1UQ, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CrowdApplause, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CrowdDisappoint, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UseTrainingScore, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_CT7J, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, TrainingTargetScore, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SpecialScoring, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, CheckScoreCondition, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_5EJA, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneReady, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UpdateCarPosition, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_G95G, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, ProcessPinsDown, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, Traditional, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, TraditionalTurn, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_UX4G, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, OverrideLaneName, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneCycleInProgress, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, UnknownData_7OAW, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LargeScoreTextInitialTransform, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SmallScoreTextInitialTransform, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LargeScoreTextOffset, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SmallScoreTextOffset, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LastAudienceScore, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneClassRef, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, LaneCycleRefList, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAlley_BP_C, SoftSoundRefTable, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAlley_BP_C, 0x0748);
		}

		// class AMenu_ChooseSports_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_ChooseSports__Menu_ChooseSports_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, StaticMeshR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, StaticMeshL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, Scene2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, Scene1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonPosBowling, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonPosBaseball, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonPosTennis, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, StaticMeshM, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, StaticMesh_Back, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, Widget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, Scene, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonBaseball, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonTennis, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, ButtonBowling, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, UpdateNextButtonState, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_ChooseSports_C, GameInstance, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_ChooseSports_C, 0x03B8);
		}

		// class ATN_Train_05_ScrambleBalls_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_05_ScrambleBalls__TN_Train_05_ScrambleBalls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, UnknownData_TDZZ, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, maxBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, DelayBetweenLauncherBalls, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LoopCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, BallsMissed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, BallsRegistered, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, UnknownData_Q76O, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LivingRoom_RightHanded, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LaunchTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, ActiveLaunchParameters, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, IntroDone, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LauncherPos01, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LauncherPos02, 0x065E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LauncherPos03, 0x065F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LauncherPos04, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, UnknownData_045Z, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_05_ScrambleBalls_C, LivingRoom_LeftHanded, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_05_ScrambleBalls_C, 0x0678);
		}

		// class ABB_Instrument_Base_C : public ABaseballInstrument
		TEST_METHOD(BlueprintGeneratedClass__BB_Instrument_Base__BB_Instrument_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, UberGraphFrame, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, AudioBallHit, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Grow_Scale_65FADBF8419D91AF5F7C7EB924AC3EB5, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Grow__Direction_65FADBF8419D91AF5F7C7EB924AC3EB5, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, UnknownData_F1GN, 0x0F45);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Grow, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Shrink_Scale_363674504D70168F86AFCBBCB534288B, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Shrink__Direction_363674504D70168F86AFCBBCB534288B, 0x0F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, UnknownData_YFXL, 0x0F55);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, Shrink, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, InitialScale, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, UnknownData_SUI7, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, DefaultBallHItSFX, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, DefaultBallHItHardSFX, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, HardHitSpeedThreshold, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, MinimumHitSpeedThreshold, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, SFXOverrides, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, InitialPhysicsOff, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, OldHitPhysics, 0x0F99);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, UnknownData_HPKH, 0x0F9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Instrument_Base_C, SFX_SelectedInstrument, 0x0F9A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Instrument_Base_C, 0x0FC8);
		}

		// class ATennisScramble_GolfBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_GolfBall__TennisScramble_GolfBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_GolfBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_GolfBall_C, 0x0388);
		}

		// class ABB_StandingArea_C : public AScramMeshActor
		TEST_METHOD(BlueprintGeneratedClass__BB_StandingArea__BB_StandingArea_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_StandingArea_C, 0x0350);
		}

		// class ATN_Challenge_05_SemiPro_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_05_SemiPro__TN_Challenge_05_SemiPro_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, UnknownData_6CAM, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, Crowd, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, Scoreboards, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, AnnouncerSequence, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_05_SemiPro_C, PlayerHadRacketChange, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_05_SemiPro_C, 0x06F1);
		}

		// class ABP_Trophy_BB_Minor_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Minor__BP_Trophy_BB_Minor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Minor_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Minor_C, 0x03E0);
		}

		// class UBW_ScoreCardRoll_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCardRoll_Widget__BW_ScoreCardRoll_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardRoll_Widget_C, Pins, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardRoll_Widget_C, Spare, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardRoll_Widget_C, SpareMiss, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardRoll_Widget_C, Split, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardRoll_Widget_C, Strike, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCardRoll_Widget_C, 0x0238);
		}

		// class ATN_TennisRacket_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_TennisRacket__TN_TennisRacket_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_TennisRacket_C, 0x0FB8);
		}

		// class UCountdown_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Countdown_Widget__Countdown_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCountdown_Widget_C, NumberText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCountdown_Widget_C, StringText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCountdown_Widget_C, 0x0220);
		}

		// class AFloorLightUpGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FloorLightUpGroup__FloorLightUpGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorOB, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorOR, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorOL, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorBR, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorBL, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorFR, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ChildActorFL, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, FrontLeft, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, FrontRight, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, BackLeft, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, BackRight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, OutLeft, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, BadMaterialOverride, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, OutRight, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, OutBack, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, Player2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, OutOnly, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, InOnly, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, Demo, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, PlaySound, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFloorLightUpGroup_C, ShowVisualFX, 0x03B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFloorLightUpGroup_C, 0x03B6);
		}

		// class ATennisScramble_PingPongPaddle_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_PingPongPaddle__TennisScramble_PingPongPaddle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_PingPongPaddle_C, 0x0380);
		}

		// class ABB_BasketBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BasketBall__BB_BasketBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BasketBall_C, 0x1038);
		}

		// class ABaseballAICatcher_Blueprint_C : public AScramBaseballCatcherAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAICatcher_Blueprint__BaseballAICatcher_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UberGraphFrame, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, Fan_ShadowPlane, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, Timeline_ScaleGlove_Scale_5BBD4A4D4276C8152DD1A5AF5BA7DD6D, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, Timeline_ScaleGlove__Direction_5BBD4A4D4276C8152DD1A5AF5BA7DD6D, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UnknownData_DIJD, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, Timeline_ScaleGlove, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineDespawn_ScaleDown_3010BC224C534B24A4000D85086049A8, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineDespawn__Direction_3010BC224C534B24A4000D85086049A8, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UnknownData_OY5Q, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineDespawn, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineSpawnIn_ScaleUp_6E932E5C436EB343D593F1A3D23D2B04, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineSpawnIn__Direction_6E932E5C436EB343D593F1A3D23D2B04, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UnknownData_HDXK, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, TimelineSpawnIn, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, CatchSounds, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, Material, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, CatcherCaughtBall, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, MittMaterial, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UseSpawnDespawnVFX, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, UnknownData_8OYS, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAICatcher_Blueprint_C, LastProccessedBall, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAICatcher_Blueprint_C, 0x05B0);
		}

		// class UBaseballAICatcher_AnimBP_C : public UBaseballCatcherAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseballAICatcher_AnimBP__BaseballAICatcher_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_Root_5C1A8321402D18FEAB9CB0BE5A336D08, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_TransitionResult_F303352C430ADCD04AC42A85D70F7930, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_TransitionResult_7C0B1D244C2CB96DD63424A8145F14DB, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_SequencePlayer_12CA6B9C426F4A3C210F1AA92AF7A800, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_StateResult_A7A4D1DE48939661CF213A9904B1A5A1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_SequencePlayer_735E7F064ABCDEBFA1E41DB064FCCD93, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_StateResult_2035A7144E7C2AD8B2FE28BF6049D716, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAICatcher_AnimBP_C, AnimGraphNode_StateMachine_CD06CD864C8C84FCA98FC792D064E75A, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAICatcher_AnimBP_C, 0x06D8);
		}

		// class ATennisScrambleIconNoLauncher_C : public AScrambleTarget
		TEST_METHOD(BlueprintGeneratedClass__TennisScrambleIconNoLauncher__TennisScrambleIconNoLauncher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, Audio_Shrink, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, Audio_Grow, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, RadialPulse, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, MeshFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, MeshParent, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, WidgetFront, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, WidgetBack, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, Widgets, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, Root, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, GrowShrinkIcon_Scale_B064D7D142DF0DF0BEBDD4A055A4AB8E, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, GrowShrinkIcon__Direction_B064D7D142DF0DF0BEBDD4A055A4AB8E, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, UnknownData_MLS1, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, GrowShrinkIcon, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, ScrambleEvent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, FrontIcon, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, BackIcon, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, ID, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, InitialScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, EffectEnabled, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleIconNoLauncher_C, Shrinking, 0x04A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScrambleIconNoLauncher_C, 0x04AA);
		}

		// class AButton_PanelImage_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_PanelImage__Button_PanelImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, ButtonLoc, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, WidgetComp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, StaticMesh_Backing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, Root, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, PanelText, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, PanelImageButtonPressed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, ID, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, UnknownData_P6BC, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, Image, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, PanelImageWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, PanelImageButtonSwapComplete, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_PanelImage_C, Button, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_PanelImage_C, 0x03A8);
		}

		// class UFriendListWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FriendListWidget__FriendListWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListWidget_C, PanelText0, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListWidget_C, PanelText1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListWidget_C, PanelText2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendListWidget_C, TextBlock_Message, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendListWidget_C, 0x0230);
		}

		// class APanel_Feather_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Panel_Feather__Panel_Feather_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, ButtonPressed, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, SelectionConfirmed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, Texture, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, Text, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, DynamicMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, FeatherWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, RenderOrigin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_Feather_C, RenderForwardVector, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APanel_Feather_C, 0x03B0);
		}

		// class ACMN_Imbued_Base_C : public AScramActorFollower
		TEST_METHOD(BlueprintGeneratedClass__CMN_Imbued_Base__CMN_Imbued_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Imbued_Base_C, ImbuedParticle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_Imbued_Base_C, DefaultSceneRoot, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Imbued_Base_C, 0x0368);
		}

		// class ATN_Ball_Base_C : public ATennisBall
		TEST_METHOD(BlueprintGeneratedClass__TN_Ball_Base__TN_Ball_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UberGraphFrame, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ScramBounceLighting, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BlobShadow, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, DebugPrintHitSpeed, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, DisableScramble, 0x0F29);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, PreviousHitByInstrument, 0x0F2A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_96QO, 0x0F2B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SpawnVFX, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SpawnVFXScale, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_ZWLN, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SpawnSFX, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, DespawnSFX, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ImbuedVFX, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ImbuedParticle, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ImbuedVFXScale, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_BEVE, 0x0F74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedHitVFX, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedVFX, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedParticle, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedVFXScale, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_0RCO, 0x0F9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedHitSFX, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceVFX, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceParticle, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedSliceParticle, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceVFXScale, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_FTJ5, 0x0FCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceSFX, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedSliceVFX, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedSliceVFXScale, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_7CUQ, 0x0FEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargedSliceHitSFX, 0x0FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, CurrentTrail, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceBounceVFX, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BounceVFXScale, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_OGAY, 0x1014);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, NormalBounceVFX, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargeBounceVFX, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BounceSFX, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BounceSliceSFX, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BounceChargedSFX, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BounceChargedSliceSFX, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, TrailScalar, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_KID4, 0x104C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, TrailMap, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, TrailScaleMap, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ChargePitchMultiplier, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_LML3, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, NormalHitVFX, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SFX_HitNet, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, NewBounceSound, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, LocalPlayerHitVFX, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, SliceHitVFX, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, BallShotTypeChange, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, ImbuedTrailColor, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, Imbued, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, CrossPlayRestriction, 0x1141);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, UnknownData_OG4H, 0x1142);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, LocalHitParticle, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Ball_Base_C, HitParticle, 0x1150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Ball_Base_C, 0x1158);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_FD4Z, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_3EP3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0060);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0330);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_K6HS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_SHWM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_UQ23, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_UR6N, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_6V08, 0x05D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x05E0);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_2X21, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_2SU2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_IRVV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_E8Z3, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x0188);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_KF4I, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_CRTD, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class ATN_Softball_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Softball__TN_Softball_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Softball_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Softball_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Softball_C, 0x1160);
		}

		// class ATN_Baseball_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Baseball__TN_Baseball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Baseball_C, 0x1158);
		}

		// class UPauseBubbleWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PauseBubbleWidget__PauseBubbleWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPauseBubbleWidget_C, 0x0210);
		}

		// class ABP_TrophyAward_TN_Blademaster_C : public ABP_TrophyAward_Tennis_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_Blademaster__BP_TrophyAward_TN_Blademaster_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_Blademaster_C, UberGraphFrame, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_Blademaster_C, 0x03B8);
		}

		// class ATN_ReturnWall_C : public AScramReturnTarget
		TEST_METHOD(BlueprintGeneratedClass__TN_ReturnWall__TN_ReturnWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_CorrectHitSound, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_AnnouncerChangeThree, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_AnnouncerChangeTwo, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_AnnouncerChangeOne, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_MoveWallDown, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_MoveWallUp, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_ScaleTargetDown, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Audio_ScaleTargetUp, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, BorderR, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, BorderL, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, BorderB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, BorderT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, TennisBox, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, TargetRoot, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, TargetShape, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Wall_Influencer, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Wall, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ResetOriginalSize_Alpha_218036E94590499C431144AFD63D1BFD, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ResetOriginalSize__Direction_218036E94590499C431144AFD63D1BFD, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_ZGA0, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ResetOriginalSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ThirdResize_Alpha_1378B68D4A91FFFBDA1909958D2E0DD0, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ThirdResize__Direction_1378B68D4A91FFFBDA1909958D2E0DD0, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_QID8, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_ThirdResize, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_SecondResize_Alpha_05D14CAB49A2EB5CA23FA1B33484629C, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_SecondResize__Direction_05D14CAB49A2EB5CA23FA1B33484629C, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_ND6D, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_SecondResize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_FirstResize_Alpha_3E543ECA4C2E421E7B27978867A54000, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_FirstResize__Direction_3E543ECA4C2E421E7B27978867A54000, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_O7DB, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_FirstResize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_Move_Translate_79F37CC2444C0BE7D42133A90C3E4B0F, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_Move__Direction_79F37CC2444C0BE7D42133A90C3E4B0F, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_NK35, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Timeline_Move, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, CumulativeHits, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, InitialHeight, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Impacts, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, ReturnWallHit, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, Streak, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_XA7V, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, StreakActor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, HitCollisionPayload, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, InitialTargetScale, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, CurrentTargetScale, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, FirstTargetScale, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, SecondTargetScale, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, ThirdTargetScale, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, HitLocation, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, ReturnWallType, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, UnknownData_ECU0, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, FlyTextTransform, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ReturnWall_C, TargetMaterial, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ReturnWall_C, 0x0568);
		}

		// class UFunctionGetDateAsText_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__FunctionGetDateAsText__FunctionGetDateAsText_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctionGetDateAsText_C, 0x0028);
		}

		// class UBaseballAIPitcher_AnimBP_C : public UBaseballPitcherAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseballAIPitcher_AnimBP__BaseballAIPitcher_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_Root_F7E307884E59E6B454B41ABB117A395A, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_C7F27FCB4142CB2502B8F9BE1FB5EB47, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_9BCF8A5045048510DB9484B1B525BAD0, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_3E08C4B645CBB17888F55696615748CD, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_B77EDB9E4E7EA88C602B3E8288B5D4E0, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_247F1359480A488DE6D54E99F5CA07FB, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_4F90E62D4E2577654EB0BA8DD78F2480, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_2673E6A044C7CA7EA00251BEC1EEE426, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_35EAC3124DCE913193DD169AE43083DB, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_93C15F5342227914E9D2D2BBC504BE1E, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_TransitionResult_B5DCFF03418F30645A44D984D5A5B63A, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_9F9447F94B0C6DBC213B09B0A870AE21, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_675915324757E10C7C001FAD128D0890, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_775B30C74CD588907739D3BA1FE74054, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_9A6BD9FC4CF42BCFAB084495CEE5C5AE, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_94ECBC54407EB9AE0E665F80F896F9C5, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_9248CC3742109B3B294119A1A87681C8, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_9038FA3745462810B0DBA68848579DF7, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_A6F78D6A47A8B92E68B408BBB8DDF1D3, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_0FBA35BD46BBF1624DDA919B951434EA, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_B181417B45F4757E7EFCC1AF41A73E0B, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_45D4746C4192F9AB6283AEA3E66F0DAB, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_D013EA4C4342CD383AC4909C981E1413, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_F721E0064431ED53E429FA857E8C77EC, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_2D7CB3F24493F79064D8A1BA705E0642, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_B3E836DA4E643625C8B982AD14D4A2B9, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_ModifyBone_B1A9F6C94AB7C579B31FB3AE8CE2CF82, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_LocalToComponentSpace_6EAC133C4F1B18269D30FFB0C0AEFB2E, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_BCAFBC6B4331779AD23D36AB71D4B40B, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_4C14F7654512CDB1304210BB554DB54E, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_76674739498EABD84B8E2D81DD1B0609, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_ModifyBone_C328E1FC46E659D2366EF9A460726393, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_LocalToComponentSpace_9FC672764A001562738477B5A7EF3D2D, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_SequencePlayer_7F23F7FB4E2AA43937E4FEBE73DA4174, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateResult_6F2BA74C4909336D22C105BA466652F4, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballAIPitcher_AnimBP_C, AnimGraphNode_StateMachine_189C3A174B51C5E1DACDCCBC4C2086B2, 0x11D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballAIPitcher_AnimBP_C, 0x12B8);
		}

		// class UMpReadyWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MpReadyWidget__MpReadyWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMpReadyWidget_C, TextLocalName, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMpReadyWidget_C, TextLocalReady, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMpReadyWidget_C, TextRemoteName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMpReadyWidget_C, TextRemoteReady, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMpReadyWidget_C, TextVs, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMpReadyWidget_C, 0x0238);
		}

		// class ABB_Minigame_Pitching_Practice_C : public ABB_Minigame_Pitching_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_Practice__BB_Minigame_Pitching_Practice_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Practice_C, UnknownData_L8ZT, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Practice_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Practice_C, ServeLauncher, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Practice_C, PracticeDelayBeforeThrow, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Practice_C, PracticeDelayAfterThrow, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_Practice_C, 0x0460);
		}

		// class ABaseballAIBatter_Normal_Blueprint_C : public ABaseballAIBatter_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIBatter_Normal_Blueprint__BaseballAIBatter_Normal_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIBatter_Normal_Blueprint_C, 0x0ED2);
		}

		// class AScoreField_C : public ABowlingBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__ScoreField__ScoreField_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, InstancedMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, PositiveOff, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, PositiveOn, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, NegativeOff, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, NegativeOn, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, DefaultSceneRoot, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, ScoreAmount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, NegativeScore, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, UnknownData_J5R8, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Material_PositiveAmountOff, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Material_PositiveAmountOn, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Material_NegativeAmountOff, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Material_NegativeAmountOn, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, PositiveSound, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, NegativeSound, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Player1, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, UnknownData_HWMR, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, FlyTextCombineTag, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, SupportsMultipleActivation, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, UnknownData_8SW7, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, LastBall, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, ReLight_Delay, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, ShowMesh, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, SpawnVisible, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, UnknownData_6KI7, 0x04B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScoreField_C, Lane, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScoreField_C, 0x04C0);
		}

		// class ABaseballModelRefs_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BaseballModelRefs__BaseballModelRefs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Root, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Baseball, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Basketball, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, BeachBall, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, BowlingBall, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Football, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Frisbee, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PingPongBall, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Wiffleball, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, TennisBall, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishballStatic, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishballSkeleton, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishBallAnim, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Pineapple, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, HockeyPuck, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, GolfBall, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, BillardBall, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Softball, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, AluminumBat, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, BaseballBat, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, CricketBat, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishRacketStatic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishRacketSkeleton, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FishRacketAnim, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, FoamFinger, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, GolfClub, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, HockeyStick, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PingPongPaddle, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PoolNoodleStatic, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PoolNoodleSkeleton, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PoolNoodleAnim, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, PoolCue, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, TennisRacket, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, GoldenBat, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, Bomb, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballModelRefs_C, GoldenBall, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballModelRefs_C, 0x0448);
		}

		// class ABB_PitchingPropManager_C : public ABaseballPitchingPropManager
		TEST_METHOD(BlueprintGeneratedClass__BB_PitchingPropManager__BB_PitchingPropManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PitchingPropManager_C, DefaultSceneRoot, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PitchingPropManager_C, 0x0370);
		}

		// class AOCDemo_HitMe_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__OCDemo_HitMe__OCDemo_HitMe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, Timeline_Scale_Alpha_93FAD0014F9A2F8ACEF0D2AE4012B9FC, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, Timeline_Scale__Direction_93FAD0014F9A2F8ACEF0D2AE4012B9FC, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, UnknownData_FZKO, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOCDemo_HitMe_C, Timeline_Scale, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOCDemo_HitMe_C, 0x0370);
		}

		// class ATN_Stadium_01_PalmTree_Single_A_C : public ATN_Stadium_01_PalmTree_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Stadium_01_PalmTree_Single_A__TN_Stadium_01_PalmTree_Single_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Stadium_01_PalmTree_Single_A_C, 0x0332);
		}

		// class AButton_TextOption_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_TextOption__Button_TextOption_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, LockMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, StaticMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, ButtonLocNext, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, ButtonLocPrev, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, WidgetComp, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, PanelLocText, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, LocStringList, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, CurrentIndex, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, UnknownData_ZH6G, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, OptionChanged, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, TextOptionWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, Red, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, UnknownData_FBD5, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, PrevButton, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, NextButton, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_TextOption_C, Locked, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_TextOption_C, 0x03B1);
		}

		// class AScramPlayerBoundary_BP_C : public AScramPlayerBoundary
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerBoundary_BP__ScramPlayerBoundary_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary_BP_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerBoundary_BP_C, GameInstance, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerBoundary_BP_C, 0x0428);
		}

		// class ABW_Train_07_UnlimitedBowling_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_07_UnlimitedBowling__BW_Train_07_UnlimitedBowling_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, UnknownData_2MY2, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, BallClass, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, RandomBall, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, UnknownData_KPVP, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, LaneClass, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, RandomLane, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, UnknownData_TYVP, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, BallClassList, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, TutorialBallTable, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, RandomLaneList, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, DelayAfterGO, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, UnknownData_NMAA, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, RandomLaneClassList, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_07_UnlimitedBowling_C, LaneIndex, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_07_UnlimitedBowling_C, 0x051C);
		}

		// class ATN_Challenge_03_JrLeague_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_03_JrLeague__TN_Challenge_03_JrLeague_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_03_JrLeague_C, UnknownData_QVVC, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_03_JrLeague_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_03_JrLeague_C, Crowd, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_03_JrLeague_C, Scoreboards, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_03_JrLeague_C, AnnouncerSequence, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_03_JrLeague_C, 0x06F0);
		}

		// class ABB_Bomb_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Bomb__BB_Bomb_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, UberGraphFrame, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, Audio_LoopingFuse, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, Fuse_VFX, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, ExplosionVFXScale, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, UnknownData_O5R3, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Bomb_C, ExplosionSFX, 0x1058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Bomb_C, 0x1060);
		}

		// class ABW_Challenge_06_SpeedBowling_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_06_SpeedBowling__BW_Challenge_06_SpeedBowling_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UnknownData_P7AK, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, Audio_Horn, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, PracticeOver, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UnknownData_NUH7, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, TutorialBallTable, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, SecondPauseCompleted, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, FirstPauseCompleted, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UnknownData_L2OB, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, PrimaryAudioList, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, CenterScoreboardBP, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, AssignedBall, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, TimeBetweenLaneChanges, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, CycleIndex, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, LaneChangeTimer, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, TimerExpiredLaneChange, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, SkipClearTimer, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, SkipTimerReset, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UnknownData_I3ZS, 0x05C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, DefaultLaneSwapTime, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, FasterLaneSwapTime, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, MoreFasterLaneSwapTime, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, MaxFastnessLanesSwapTime, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, PlayerStrikeCount, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, StrikesNeededForTrophy, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, UnknownData_XUOP, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_06_SpeedBowling_C, LaneRefList, 0x05DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_06_SpeedBowling_C, 0x05F0);
		}

		// class ABP_Trophy_BB_BaseBowling_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_BaseBowling__BP_Trophy_BB_BaseBowling_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_BaseBowling_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_BaseBowling_C, UsingBowlingBall, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_BaseBowling_C, 0x03E1);
		}

		// class ABP_TrophyAward_ProTour_C : public ABP_TrophyAward_TN_MatchCompleteBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_ProTour__BP_TrophyAward_ProTour_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_ProTour_C, UnknownData_84D2, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_ProTour_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_ProTour_C, UsingPro, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_ProTour_C, 0x03C9);
		}

		// class ABB_Scoreboard_Large_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Scoreboard_Large_BP__BB_Scoreboard_Large_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Scene_TrainingScoreboard, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, StaticMesh1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, StaticMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, AudioStrikeout, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, AudioHomerun, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, MediaMesh, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Widget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR3_Transition_3A0DC63E4539D32002B71AAA175AB29B, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR3__Direction_3A0DC63E4539D32002B71AAA175AB29B, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_KSV1, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut_Line_01_Movement_35D11F164F908DE5057C8AA334ABB667, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut_Line_02_Movement_35D11F164F908DE5057C8AA334ABB667, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut_Line_03_Movement_35D11F164F908DE5057C8AA334ABB667, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut_Out_Movement_35D11F164F908DE5057C8AA334ABB667, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut_Strike_Movement_35D11F164F908DE5057C8AA334ABB667, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut__Direction_35D11F164F908DE5057C8AA334ABB667, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_14H9, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_StrikeOut, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR2_Baseball_01_Movement_9ECB57EF46779AAC6E6CA586BF7D35E9, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR2_Baseball_02_Movement_9ECB57EF46779AAC6E6CA586BF7D35E9, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR2__Direction_9ECB57EF46779AAC6E6CA586BF7D35E9, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_ZH8G, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1_Large_Star_02_Scale_72707CA746396C7A172F708FAEC620F6, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1_Action_Lines_01_Scale_72707CA746396C7A172F708FAEC620F6, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1_Baseball_01_Scale__72707CA746396C7A172F708FAEC620F6, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1_Large_Star_01_Scale_72707CA746396C7A172F708FAEC620F6, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1__Direction_72707CA746396C7A172F708FAEC620F6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_G0E6, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_HR1, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_Countdown_Borders_3C65ABE44B68A0D2543FF6A0F8FF5755, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_Countdown__Direction_3C65ABE44B68A0D2543FF6A0F8FF5755, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_BIVF, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_Countdown, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_LogoLoop_Logo_Scale_586729284716A549C7882DB1C1382F3B, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_LogoLoop_Transition_Large_Bars_586729284716A549C7882DB1C1382F3B, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_LogoLoop_Transition_Scrolling_Word_Bars_586729284716A549C7882DB1C1382F3B, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_LogoLoop__Direction_586729284716A549C7882DB1C1382F3B, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_BV6O, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, Timeline_LogoLoop, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, VideoMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, MediaComplete, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, MediaSequenceComplete, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, ScoreboardWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, CurrentTime, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, ClockActive, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_8FT7, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, TimerCountdownComplete, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, ActiveVideo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, OldVideo, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, UnknownData_Y76R, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, TimerDisplayReady, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Scoreboard_Large_BP_C, GrandSlam, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Scoreboard_Large_BP_C, 0x0489);
		}

		// class ACMN_Trail_Charge_Slice_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Charge_Slice__CMN_Trail_Charge_Slice_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Charge_Slice_C, 0x037C);
		}

		// class ABB_WiffleBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_WiffleBall__BB_WiffleBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_WiffleBall_C, 0x1038);
		}

		// class ATN_PingPongBall_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_PingPongBall__TN_PingPongBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PingPongBall_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PingPongBall_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_PingPongBall_C, 0x1160);
		}

		// class ATN_BeachBall_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_BeachBall__TN_BeachBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_BeachBall_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_BeachBall_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_BeachBall_C, 0x1160);
		}

		// class AHitMe_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__HitMe__HitMe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, Widget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, Timeline_Scale_Alpha_FB3A0E194A64F31BB64B3B9046E705A1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, Timeline_Scale__Direction_FB3A0E194A64F31BB64B3B9046E705A1, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, UnknownData_UG9J, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, Timeline_Scale, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHitMe_C, GrabMe, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHitMe_C, 0x0371);
		}

		// class ABallSelector_Listener_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BallSelector_Listener__BallSelector_Listener_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallSelector_Listener_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallSelector_Listener_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallSelector_Listener_C, Ball_Selector, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallSelector_Listener_C, TargetPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallSelector_Listener_C, Target_Rotation, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallSelector_Listener_C, 0x0358);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_B4J8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class ADummyAvatar_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DummyAvatar__DummyAvatar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, SkeletalMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, Scene, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, AvatarLook, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, Happy, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, JustIdle, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, UseAnimBp, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, UnknownData_8GJB, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, AnimBp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyAvatar_C, NeutralTeamColor, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADummyAvatar_C, 0x0371);
		}

		// class ATN_Minigame_AiTest_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_AiTest__TN_Minigame_AiTest_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, Scoreboards, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, GameElements, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, GameSelector, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, Manager, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_AiTest_C, GameInstance, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_AiTest_C, 0x0370);
		}

		// class ATennisScramble_Basketball_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_Basketball__TennisScramble_Basketball_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_Basketball_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_Basketball_C, 0x0388);
		}

		// class ATennisAI_Hard_C : public AScramTennisAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__TennisAI_Hard__TennisAI_Hard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAI_Hard_C, 0x07C1);
		}

		// class ABaseballAIRunner_Blueprint_C : public AScramBaseballRunnerAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIRunner_Blueprint__BaseballAIRunner_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, InstancedMesh, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Fan_ShadowPlane, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, SkeletalMesh, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleDown_ScaleDown_68D97F034192CA35E6CA7290A3B0F3B8, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleDown__Direction_68D97F034192CA35E6CA7290A3B0F3B8, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, UnknownData_SYD5, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleDown, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleUp_ScaleUp_3721805F4254093B06C8E098411A4011, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleUp__Direction_3721805F4254093B06C8E098411A4011, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, UnknownData_T96L, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Timeline_ScaleUp, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, Material, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, NumComplete, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIRunner_Blueprint_C, LocationHolder, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIRunner_Blueprint_C, 0x0418);
		}

		// class ABB_Minigame_BattingSmash_C : public ABB_Minigame_Batting_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_BattingSmash__BB_Minigame_BattingSmash_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, UberGraphFrame, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, ModeButtons, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, SmashMenuPlayerSelection, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, MenuSelection, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, CountdownTimer, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, DelayBeforeFirstPitch, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, UnknownData_IRFG, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, LargeScoreboard, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, TrainingScoreboard, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, WindowSpawner, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_BattingSmash_C, ShowScore, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_BattingSmash_C, 0x0479);
		}

		// class ULargePanelTextWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LargePanelTextWidget__LargePanelTextWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULargePanelTextWidget_C, PanelText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULargePanelTextWidget_C, 0x0218);
		}

		// class AGameEntryMap_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__GameEntryMap__GameEntryMap_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEntryMap_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEntryMap_C, PostProcessVolume_RiftS_4_ExecuteUbergraph_GameEntryMap_RefProperty, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameEntryMap_C, PostProcessVolume_Rift_ExecuteUbergraph_GameEntryMap_RefProperty, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameEntryMap_C, 0x0348);
		}

		// class ABB_Train_06_UnlimitedPitching_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_06_UnlimitedPitching__BB_Train_06_UnlimitedPitching_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, OriginalPitchingPreferences, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, UnknownData_ZP5N, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, BallClass, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, RandomBall, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_06_UnlimitedPitching_C, GameStarted, 0x0639);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_06_UnlimitedPitching_C, 0x063A);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_5B9R, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0358);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_MWZI, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0348);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_NUQQ, 0x0870);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0880);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_TMNC, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_XUCM, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x084C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x0850);
		}

		// class APauseMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PauseMenu__PauseMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, HeaderRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavBL, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavBR, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavBM, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavFR, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavR, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavFL, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NavL, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, MenuRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, OffsetRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, AvatarOffset, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, AvatarPos, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos0_Top, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, BoundaryMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SpawnedMenuRoot, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos2_Bottom, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos2_Top, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos1_Bottom, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos1_Top, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pos0_Bottom, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos2_Bottom, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos2_Top, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Column02, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos1_Bottom, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos1_Top, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Column1, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Column0, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos0_Bottom, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QpPos0_Top, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Root, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Timeline_ScaleMenu_Alpha_A5860E7E47AA6B9DA1A6928B4DBCCA91, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Timeline_ScaleMenu__Direction_A5860E7E47AA6B9DA1A6928B4DBCCA91, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_RSO4, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Timeline_ScaleMenu, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Closing, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_LSMH, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, AllButtonsDestroyed, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnPauseReady, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, MenuExited, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, KeepCapsule, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_Q0N7, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, GameInstance, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, DebugBbSelector, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, DebugBwGameSelector, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, DebugTnGameSelector, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, InstantClose, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, EndingGame, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_L8XJ, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PanelCount, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, MenuActor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PauseMenuOpened, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PauseMenuCleared, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ShouldSaveSettings, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_MSTA, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SaveData, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, InputEnabled, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_9UF6, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NoPauseactor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Header, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, StandardButtons, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, OptionScreen, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_CIG4, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, LeftButton, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, VoicePermissionString, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Player, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PlayerController, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, VoiceChatButton, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QuittingMp, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_D4ZZ, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ConfirmationMenu, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, MenuManager, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, preferences, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_P3E5, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SideButtons, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SkillNames, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, TextOptionButtons, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, BatSideChanged, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PlaySwapFX, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NoSwap, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Pitching, 0x0583);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, PitchingHandChanged, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_17TZ, 0x0585);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, QuitButton, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, TrainingOptions, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Sport, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_IU37, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, TrainingOptionOrRestartButton, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, AvatarButton, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, invites, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, FriendToJoin, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, NeedToJoin, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_42G4, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, CatchingSkillNames, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ShowDebugMessages, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_ABEF, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ServiceStyleNames, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SportOptionsButton, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, SelectedSport, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, Red, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, TrainingOptionsLastMenu, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ChallengeActive, 0x0653);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, RestartingChallenge, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ActiveGame, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, IsBatting, 0x0656);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, TrainingActive, 0x0657);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, VoiceConfirmed, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, UnknownData_03AK, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, OnlineGameHandler, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, DisableInstrumentSwap, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, DemoMode, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::APauseMenu_C, ReflectionActive, 0x066A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APauseMenu_C, 0x066B);
		}

		// class ABW_Challenge_05_EqualMatch_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_05_EqualMatch__BW_Challenge_05_EqualMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_05_EqualMatch_C, UnknownData_Z79D, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_05_EqualMatch_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_05_EqualMatch_C, Crowd, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_05_EqualMatch_C, PrimaryAudioList, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_05_EqualMatch_C, 0x0568);
		}

		// class ABP_TrophyAward_BW_Turkey_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_Turkey__BP_TrophyAward_BW_Turkey_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_Turkey_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_Turkey_C, 0x03C0);
		}

		// class ABP_Trophy_BB_Guesser_C : public ABP_TrophyAward_Baseball_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Guesser__BP_Trophy_BB_Guesser_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Guesser_C, UnknownData_A8LN, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Guesser_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Guesser_C, 0x03C0);
		}

		// class ATN_PoolNoodle_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_PoolNoodle__TN_PoolNoodle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PoolNoodle_C, UberGraphFrame, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PoolNoodle_C, SkeletalMesh, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PoolNoodle_C, PhysicsBlendWeight, 0x0FC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_PoolNoodle_C, 0x0FCC);
		}

		// class AMenu_3dPanelImages_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_3dPanelImages__Menu_3dPanelImages_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, PanelPosR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, PanelPosCR, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, PanelPosCL, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, PanelPosL, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, PanelPosC, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, SelectionStarted, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, SelectionComplete, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, LocTextNames, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, ImagesL, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, Buttons, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, ImagesR, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_3dPanelImages_C, Buttons3d, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_3dPanelImages_C, 0x03D0);
		}

		// class AScramTennisAI_Blueprint_C : public AScramTennisAI
		TEST_METHOD(BlueprintGeneratedClass__ScramTennisAI_Blueprint__ScramTennisAI_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, UberGraphFrame, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, AudioSpawn, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, ScramBounceLighting, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, RootAnimatedMesh, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, HitSoundComponent, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, Timeline_ScaleUp_Alpha_EB297C5345142E015D0AF8A0F40524AA, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, Timeline_ScaleUp__Direction_EB297C5345142E015D0AF8A0F40524AA, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, UnknownData_2554, 0x076D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, Timeline_ScaleUp, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, RacquetActor, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, CurrentRacketClass, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, DefaultRacket, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, TennisAI_TargetValue, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, Emitter, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, RandomizeAvatar, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, UnknownData_4M83, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, AI_Hit_Ball, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramTennisAI_Blueprint_C, HandHidden, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramTennisAI_Blueprint_C, 0x07C1);
		}

		// class ATN_Football_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Football__TN_Football_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Football_C, 0x1158);
		}

		// class AAnnouncer_BP_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__Announcer_BP__Announcer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AudioVoice, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Audio_Morph, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ScramBounceLighting, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AudioFuzz, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, BlobRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, BlobShadow, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, MediaSound, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, SkeletalMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Root, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_VideoScreenAlpha_Alpha_0B067C744AAAC856AEFE539B6C52A68A, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_VideoScreenAlpha__Direction_0B067C744AAAC856AEFE539B6C52A68A, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_LP6V, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_VideoScreenAlpha, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_HideStatic_alpha_254386494A592BD274F5C4960A875DC6, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_HideStatic__Direction_254386494A592BD274F5C4960A875DC6, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_BYP1, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Timeline_HideStatic, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TimelineTransitionAlpha_Alpha_D70C10F54E1B29BA17B24CA1F74D4D49, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TimelineTransitionAlpha__Direction_D70C10F54E1B29BA17B24CA1F74D4D49, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_0QYN, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TimelineTransitionAlpha, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, DynamicMaterial, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, VoiceClipComplete, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, EyeHideComplete, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, HideVideoScreenOnSpawn, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, IsFaceHidden, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_DQKS, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, VoiceClipSequenceComplete, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, StartInLogo, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_ECLI, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, StaticMeshMat, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, EnvelopeMaxValue, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, EnvelopeValue, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Expression, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_TDBH, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ExpressionList, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActiveAudioClip, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, SequenceList, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActiveSequence, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, HIddenExpression, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, EnvelopeDefaultValue, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_8TK6, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AnimationBPRef, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TransformFromLogoComplete, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UseHubMaterials, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_BF6W, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, GolfClub, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TennisBall, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Basketball, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, TennisRacket, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, PairedSequencesComplete, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActivePairSequences, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActivePairSequence, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AnimationSeqComplete, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AudioSeqComplete, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_DXC7, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, GestureQueue, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActiveGesture, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, GestureTimer, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, PairedSequenceTimer, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AudioSequenceTimer, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, AudioExpressionQueue, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ActiveAudioExpression, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, InitialPairedSequences, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, ExitSequenceComplete, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Hockey_Stick_2, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, Look, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, UnknownData_XHY7, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, GameInstance, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnnouncer_BP_C, LoadedAudio, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnnouncer_BP_C, 0x05E0);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_HAXA, 0x05C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0670);
		}

		// class ACMN_HockeyStick_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CMN_HockeyStick__CMN_HockeyStick_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_HockeyStick_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_HockeyStick_C, CMN_Racket_HockeyStick, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_HockeyStick_C, 0x0338);
		}

		// class ABB_GameSelector_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_GameSelector__BB_GameSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, GameInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, GameTypeButtons, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, MainMenu, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, BattingGameButtons, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, GameActive, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, UnknownData_AOXH, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, PitchingGameButtons, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, BB_TrainingArena, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, BB_MainArena, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, ResetButtonPressed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, SubMenu, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, DebugMainMenu, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, AllowReset, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, UnknownData_W1KG, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_GameSelector_C, SubMenu2, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_GameSelector_C, 0x03C0);
		}

		// class ABaseballAI_Dummy_Batter_Blueprint_C : public AScramBaseballBatterAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAI_Dummy_Batter_Blueprint__BaseballAI_Dummy_Batter_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAI_Dummy_Batter_Blueprint_C, UberGraphFrame, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAI_Dummy_Batter_Blueprint_C, SkeletalMesh, 0x0E80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAI_Dummy_Batter_Blueprint_C, 0x0E88);
		}

		// class ACenterReturnWall_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__CenterReturnWall__CenterReturnWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetBounds_Influencer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target1, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target0, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target5, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target4, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Target3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Wall, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Root, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Rise_Translate_B75F8614462B5D3B625F32B38FFCFB27, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, Rise__Direction_B75F8614462B5D3B625F32B38FFCFB27, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, UnknownData_YGX6, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, rise, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, InitialHeight, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, RemovingSelf, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, UnknownData_I2C6, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor0, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor4, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, TargetActor5, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACenterReturnWall_C, DisableWall, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACenterReturnWall_C, 0x03E1);
		}

		// class ABP_TrophyGrabbable_C : public ABP_TrophyGrabbableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyGrabbable__BP_TrophyGrabbable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, UberGraphFrame, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Cubbie, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Pivot, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Widget, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Box, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Timeline_0_0_NewTrack_0_B5FAF22A4DFEB85A4A7758BB4FF27E7B, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Timeline_0_0__Direction_B5FAF22A4DFEB85A4A7758BB4FF27E7B, 0x0BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, UnknownData_H07E, 0x0BB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, Timeline_0_1, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, DisplayActor, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, MonitorDisplay, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, CubbyEffect, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, CubbyEffectClass, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, TrophyDataEntry, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, ForceTrophyEarn, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, ForceShowTrophy, 0x0BF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, UnknownData_CHQS, 0x0BF2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, TrophyProp, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, PivotRotationOffset, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, CubbiePositionLoc, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, SportColor, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, SportType, 0x0C24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, UnknownData_PXQ6, 0x0C25);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, TrophyAward, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, CurrentProgress, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, TrophyRequirement, 0x0C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, respawning, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, UnknownData_1YZX, 0x0C39);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbable_C, HapticScale, 0x0C3C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyGrabbable_C, 0x0C40);
		}

		// class ASwapIndicator_BP_C : public ASwapIndicator
		TEST_METHOD(BlueprintGeneratedClass__SwapIndicator_BP__SwapIndicator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator_BP_C, UberGraphFrame, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwapIndicator_BP_C, BB_Controller_Rings_par, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwapIndicator_BP_C, 0x05E0);
		}

		// class AMainMenuStand_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MainMenuStand__MainMenuStand_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, TopPanelRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, BaseRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, StaticMesh1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, ButtonPos2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, ButtonPos1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, ButtonPos0, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MoveRoot_Alpha_FFBD35AA454AB75A9D477AB405433E06, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MoveRoot__Direction_FFBD35AA454AB75A9D477AB405433E06, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, UnknownData_WTIL, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MoveRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MovePanel_Alpha_EF0437BC45E2F4FA7D7B79A8DEFFF76A, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MovePanel__Direction_EF0437BC45E2F4FA7D7B79A8DEFFF76A, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, UnknownData_PRH4, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Timeline_MovePanel, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, SelectionStarted, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, SelectionComplete, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Buttons, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, Selection, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, PanelMoveDistance, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, StandMoveDistance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, UnknownData_Y3ZM, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, MenuOpened, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenuStand_C, ButtonsDisabled, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenuStand_C, 0x03E1);
		}

		// class ATennisAI_Impossible_C : public AScramTennisAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__TennisAI_Impossible__TennisAI_Impossible_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAI_Impossible_C, 0x07C1);
		}

		// class AScramCourt_BP_C : public AScramCourt
		TEST_METHOD(BlueprintGeneratedClass__ScramCourt_BP__ScramCourt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramCourt_BP_C, 0x03B0);
		}

		// class ATN_Stadium_01_PalmTree_SingleShort_A_C : public ATN_Stadium_01_PalmTree_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Stadium_01_PalmTree_SingleShort_A__TN_Stadium_01_PalmTree_SingleShort_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Stadium_01_PalmTree_SingleShort_A_C, 0x0332);
		}

		// class UBallTarget_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BallTarget__BallTarget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBallTarget_C, 0x0028);
		}

		// class AGameHandlerBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GameHandlerBase__GameHandlerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerBase_C, Root, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerBase_C, GameOver, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameHandlerBase_C, TeleportThePlayArea, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameHandlerBase_C, 0x0350);
		}

		// class AButton_Arrow_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_Arrow__Button_Arrow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ScramBoxInteractable, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ButtonCollision, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, FrameRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, SpinScaleRoot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, AudioTouch, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, AudioScale, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, MeshButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ButtonRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, MeshFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Root, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_SpinScale_Alpha_2C9228F647ABE224C4C86CAFAD2E2B51, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_SpinScale__Direction_2C9228F647ABE224C4C86CAFAD2E2B51, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UnknownData_JWP1, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_SpinScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_Scale_Alpha_ECA9FD32484E96EE2C248CB6A42FA197, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_Scale__Direction_ECA9FD32484E96EE2C248CB6A42FA197, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UnknownData_NS9K, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_Scale, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_ButtonMove_Alpha_DF6D1D314BD64E03A1E386A9E595266A, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_ButtonMove__Direction_DF6D1D314BD64E03A1E386A9E595266A, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UnknownData_R3IV, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Timeline_ButtonMove, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ButtonPressed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, TouchActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Overlapping, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Swapping, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ArrowDirection, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, SpinScale, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, NoScaling, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UnknownData_BOL5, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, ID, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, InitialScale, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, DisableTouch, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, UnknownData_NYW9, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Material, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, Hand, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Arrow_C, GreyDisabled, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_Arrow_C, 0x0401);
		}

		// class AMenu_TrophyAwarded_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_TrophyAwarded__Menu_TrophyAwarded_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyParent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinSingle, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateSkinSingle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinL, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinR, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinM, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateSkinR, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateSkinL, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateSkinM, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, HairR, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, HairL, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, HairM, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateHairR, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateHairL, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, RotateHairM, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, HairParent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinParent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, AvatarParent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, ModelScale, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyLoc, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyOffset, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, ParticlePos, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, StaticMeshInfoBackingR, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, StaticMeshInfoBackingL, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, InfoParent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, InfoRotationOffset, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, ModelRotationOffset, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Audio_Slide, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, AvatarLocM, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, WidgetCompInfo, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, StaticMeshIcon, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, WidgetComp, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Scene, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_RotatePacks_Alpha_2A10F0B54F99BB88298DAC8BA891177C, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_RotatePacks__Direction_2A10F0B54F99BB88298DAC8BA891177C, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_QEQJ, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_RotatePacks, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveModel_Alpha_3A6C37BF42288E13BD5F428C51A0EFE5, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveModel__Direction_3A6C37BF42288E13BD5F428C51A0EFE5, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_SHNC, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveModel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_HideIcon_Alpha_E6A268B84B52D5DFEF7CE4880C7600FC, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_HideIcon__Direction_E6A268B84B52D5DFEF7CE4880C7600FC, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_DRB6, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_HideIcon, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_SpinIcon_Alpha_219BA44B499785C90C5C8F81E1271E57, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_SpinIcon__Direction_219BA44B499785C90C5C8F81E1271E57, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_DM6Y, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_SpinIcon, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleInfo_Alpha_8B405422425FD1DE16373CAA0A5DA5BC, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleInfo__Direction_8B405422425FD1DE16373CAA0A5DA5BC, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_7IKT, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleInfo, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleModels_Alpha_A158BCD94355EE58D3BA04B0C3B2FDE7, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleModels__Direction_A158BCD94355EE58D3BA04B0C3B2FDE7, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_ID13, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleModels, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleIcon_Alpha_13BED4FA43578A4F13D7668A594076E6, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleIcon__Direction_13BED4FA43578A4F13D7668A594076E6, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_OB27, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_ScaleIcon, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveTitle_Alpha_07F903DD4BE71FB374E73B9A9430AA3D, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveTitle__Direction_07F903DD4BE71FB374E73B9A9430AA3D, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_XFRD, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Timeline_MoveTitle, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyAwardComplete, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Avatars, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, Trophy, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, AvatarMode, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_0G4L, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyManager, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, AwardedTrophy, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, AvatarList, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, LastReward, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_P27M, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyAwardedWidget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, InfoWidget, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, GameInstance, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, VanityRewardName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, DebugAvatar, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, UnknownData_KYUP, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, TrophyIdNumber, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, DebugSkinPack, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, DebugHairPack, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, SkinMode, 0x053A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_TrophyAwarded_C, HairMode, 0x053B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_TrophyAwarded_C, 0x053C);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_1U4Y, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0600);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_32HX, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_6BUF, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7SQ8, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_93J9, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_X1N3, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_RIRA, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_TI97, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9UFB, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_J4F1, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XZ4J, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4IZ3, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_XLW3, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_0HCH, 0x05EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0640);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0640);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_BAUO, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_UHRY, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_39LX, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_WHSC, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_3IXL, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0740);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0328);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_DIDP, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0378);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0560);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_Q84V, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_X4GM, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_UUCD, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_TQGW, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_M0RP, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0640);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_8O74, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_HI19, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0200);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_GABJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_EIA9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_SMY9, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x01F0);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_720H, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0660);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0330);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_TWEG, 0x0619);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0620);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0590);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_TAON, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_AG51, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x0098);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_LKNI, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_O1NM, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0660);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_G0AL, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_9WWD, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_ZP92, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_IFMS, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_LJJQ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_K9LZ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_VKCU, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0090);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_K96V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_ZMA7, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0098);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class ABW_VideoBoard_Training_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_VideoBoard_Training__BW_VideoBoard_Training_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, BW_Stadium_01_DomeBase, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, Dome, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, Material, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, MatchVideoComplete, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, VideoFadeOutComplete, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, VolumeMultiplier, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, MaterialIndex, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, VideoHidden, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, UnknownData_953Q, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, MatchVideoStarted, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, Round, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, UnknownData_44MN, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_VideoBoard_Training_C, VideoMaterial, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_VideoBoard_Training_C, 0x03A0);
		}

		// class ABW_Train_05_BonusBalls_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_05_BonusBalls__BW_Train_05_BonusBalls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, UnknownData_KSX1, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Audio_Announcer11, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Audio_Announcer10, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Audio_Announcer06, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Audio_Announcer07, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Audio_GrabTheBall, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, FirstPinsSet, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, Retrying, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, UnknownData_8ZGG, 0x04AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, TutorialBallTable, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, AnnouncementDuration, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, ProgressionTracking, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, UnknownData_7L88, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, BallList, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, BallGrabbed, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, SkipBallAudio, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, UnknownData_DBB3, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_05_BonusBalls_C, score, 0x04EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_05_BonusBalls_C, 0x04F0);
		}

		// class AIntroSetup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__IntroSetup__IntroSetup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, AvatarMenuPos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, NextButtonLoc, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, HeaderLoc, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, AudioVoice, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, PositionMR, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, PositionML, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, WidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, StaticMesh1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, MeshBacking1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, MenuRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Root, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Timeline_MenuScale_Alpha_41B1E83D41A0AECE23F0E28844E5C49E, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Timeline_MenuScale__Direction_41B1E83D41A0AECE23F0E28844E5C49E, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, UnknownData_KEJN, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Timeline_MenuScale, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, ChoiceMade, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, LeftButton, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, RightButton, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, GameInstance, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Removing, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, UnknownData_ENSX, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Progress, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Header, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, SetupWidget, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, VoiceTimer, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, Player, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, AvatarMenuActive, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, UnknownData_T82X, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, AvatarMenu, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntroSetup_C, CompleteButton, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntroSetup_C, 0x0400);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_5FH2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_6OU0, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_L82C, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_DH21, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0108);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_H2RP, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_IMV7, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_ZSSS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_QY3K, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_570K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class ABB_Challenge_01_HRD_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_01_HRD__BB_Challenge_01_HRD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, Crowd, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, HRD_Manager, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, PrimaryAudioList, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, DEBUG_MAIN_AUDIO, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, UseAlternateAnnouncerVO, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, UnknownData_O6GX, 0x05AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, AlternateAudioList, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, SaveData, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, HomeRunCount, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_01_HRD_C, HomeRunThreshold, 0x05CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_01_HRD_C, 0x05D0);
		}

		// class ABP_TrophyAward_TennisBase_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TennisBase__BP_TrophyAward_TennisBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TennisBase_C, UnknownData_O9ZV, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TennisBase_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TennisBase_C, TennisManager, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TennisBase_C, IsLocalPlayer, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TennisBase_C, 0x03A9);
		}

		// class ABP_Trophy_BB_AllTime_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_AllTime__BP_Trophy_BB_AllTime_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_AllTime_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_AllTime_C, 0x03E0);
		}

		// class ABP_TrophyAward_BB_TrainingComplete_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BB_TrainingComplete__BP_TrophyAward_BB_TrainingComplete_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BB_TrainingComplete_C, 0x03D8);
		}

		// class UTennisArenaScoreboardWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TennisArenaScoreboardWidget__TennisArenaScoreboardWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, GameP1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, GameP2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Games_Parent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, MatchP1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, MatchP2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player1Games, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player1Score, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player1Serving, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player1Text, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player2Games, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player2Score, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player2Serving, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, Player2Text, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, ServingP1Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTennisArenaScoreboardWidget_C, ServingP2Text, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTennisArenaScoreboardWidget_C, 0x0290);
		}

		// class ATennisScramble_BatInstrument_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_BatInstrument__TennisScramble_BatInstrument_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_BatInstrument_C, 0x0380);
		}

		// class ABaseballAIBatter_NeverMiss_Blueprint_C : public ABaseballAIBatter_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIBatter_NeverMiss_Blueprint__BaseballAIBatter_NeverMiss_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, UnknownData_U8SY, 0x0ED2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, UberGraphFrame, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_Despawn_ScaleDown_836063B241ED5321CD12ED921E9C5443, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_Despawn__Direction_836063B241ED5321CD12ED921E9C5443, 0x0EE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, UnknownData_HU6P, 0x0EE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_Despawn, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_SpawnIn_ScaleUp_B00324104C60191ACA939C9AED4D5762, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_SpawnIn__Direction_B00324104C60191ACA939C9AED4D5762, 0x0EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, UnknownData_MAA6, 0x0EF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, Timeline_SpawnIn, 0x0EF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIBatter_NeverMiss_Blueprint_C, 0x0F00);
		}

		// class AGripSet_Identity_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Identity__GripSet_Identity_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Identity_C, 0x0370);
		}

		// class ABW_Minigame_AiVsAI_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_Minigame_AiVsAI__BW_Minigame_AiVsAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, BowlingAlleys, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, Manager, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Minigame_AiVsAI_C, OldWorldToMetersScale, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Minigame_AiVsAI_C, 0x0364);
		}

		// class ACMN_Trail_Accelerator_Flat_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Accelerator_Flat__CMN_Trail_Accelerator_Flat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Accelerator_Flat_C, 0x037C);
		}

		// class ABP_TrophyGrabbableBase_C : public ATrophyGrabbable
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyGrabbableBase__BP_TrophyGrabbableBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, UberGraphFrame, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_1_Scale_DD286C7B4A21D0ED9D711E9D74337311, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_1__Direction_DD286C7B4A21D0ED9D711E9D74337311, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, UnknownData_K156, 0x0B2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_2, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_0_Scale_DE227CDB4E66B6F16636A28B18C711C4, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_0__Direction_DE227CDB4E66B6F16636A28B18C711C4, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, UnknownData_8YNN, 0x0B3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Timeline_1, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Scale_Scale_22E6EE6E4FC4110C90496693C7363B80, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Scale__Direction_22E6EE6E4FC4110C90496693C7363B80, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, UnknownData_OOPP, 0x0B4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, Scale, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, RespawnSFX, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, RespawnVFX, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, ParticleScale, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, ParticleSpawnPositionOffset, 0x0B74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGrabbableBase_C, NewBounceSound, 0x0B80);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyGrabbableBase_C, 0x0B88);
		}

		// class UTN_Fish_Racket_AnimBP_C : public UScramInstrumentAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__TN_Fish_Racket_AnimBP__TN_Fish_Racket_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_Root_9DCCFC5B4245138B3144379C5B3AB429, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_1421130148EC9C0CDD99DF9C96DB6678, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_826372804E092D8753BD2B87CF264920, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_498D58084C0F2AD6A057EC8C2BC244B1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_3FE0B0B742FF573526CC338D6F589D77, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_916B202746053801E421DABB30EF46A4, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_426E8A9145E194F3C4CC6D978C9236DF, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_4FB5BB2E49E7F1CD124D80BE1578BE7A, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_B57C97FF4780C664DB8F97A7BFBD06A6, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_E0678AE64E4DB40AFB20F9B6870910F6, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_BlendSpacePlayer_27617E7A4D43964AA0B89789EEA1A02D, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateResult_33602F5F4A7E6B8C2207578400536EB4, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_TransitionResult_B9B7721146FF43A1600ADB951D5CEEB1, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_BlendSpacePlayer_B5D4219A4C7FD418263EB6A2D20E6EEA, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateResult_82AF5DA8485FCB37EB17A881B3A8687E, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_SequencePlayer_3BCCE5A641BDD6DA77F504A4247ECB04, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateResult_7798812F4DB2194EB929599D25C38BF1, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_BlendSpacePlayer_4D084961498C76322B728FBC8CC6DE26, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateResult_A90FF6574CD5F65514DCB9A9A99EA5B4, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_SequencePlayer_12489C9944B62ED6A2372EACA741C821, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateResult_2E0C3C154480EF708D4A5B9B20A60643, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, AnimGraphNode_StateMachine_A42A1B9E40BEE9E6C6DA50A321659AAA, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_Fish_Racket_AnimBP_C, GravityForceAlpha, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTN_Fish_Racket_AnimBP_C, 0x0DB4);
		}

		// class ABB_InstrumentSelector_C : public ABaseballInstrumentSelector
		TEST_METHOD(BlueprintGeneratedClass__BB_InstrumentSelector__BB_InstrumentSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, DespawnAudioPos3, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, DespawnAudioPos2, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, DespawnAudioPos1, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, SpawnAudioPos3, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, SpawnAudioPos2, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, SpawnAudioPos1, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, HiddenInGamePos3, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, HiddenInGamePos2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, HiddenInGamePos1, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, RootScene, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, Timeline_0_Scale_B43E4F7E436B2337AE79B5B624A9C3A2, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, Timeline_0__Direction_B43E4F7E436B2337AE79B5B624A9C3A2, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, UnknownData_99XG, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, Timeline_1, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, AllInstrumentClasses, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, DisplayCount, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, UnknownData_U6WP, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, SpawnedBBInstruments, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, ChosenInstrumentClasses, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, TransformArray, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, ScramSportManagerBaseball, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, InitialScale, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_InstrumentSelector_C, ShrunkScale, 0x04FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_InstrumentSelector_C, 0x0508);
		}

		// class ABB_PlayByPlay_C : public APlayByPlayBaseball
		TEST_METHOD(BlueprintGeneratedClass__BB_PlayByPlay__BB_PlayByPlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PlayByPlay_C, DefaultSceneRoot, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PlayByPlay_C, 0x03B0);
		}

		// class UOnlineBlueprintCallProxyBase : public UObject
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0028);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_QJ35, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_5U1T, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_TCV1, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_RDC2, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_JIRB, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_QZ4C, 0x17D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1918);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_62L5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4PCB, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4AHM, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_7LCG, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_RD5Q, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NZZ5, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_4IAO, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_JSSK, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_SZT3, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0698);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_8YSC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_AC8L, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_W8IJ, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_9TBK, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_WBUD, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_8Y6O, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_2EJY, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0328);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_18A1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_WAZW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_DV7W, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_TKQ9, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_2LCE, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00F0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_19L6, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_NI8S, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_GZNH, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x01BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_S547, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_J3J2, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0238);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_BYTB, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_RK59, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_D0SA, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0556);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IDFN, 0x0557);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_0VE5, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_F85Q, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_8FQO, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_61NJ, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_93QF, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0650);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_BSD0, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_1J0W, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_A6K8, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_DO2X, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_SBN2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeOnScreen, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_TJ1H, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_716K, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_VRGI, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_PUB0, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0560);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_UNR2, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0588);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0330);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0338);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_3X0A, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_79MA, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_B609, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VRJV, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_EQNX, 0x06AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x06D0);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SubInstances, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_3F5M, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_LLA4, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_G1L0, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UseAsyncScene, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x07A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_K8SU, 0x07A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5IX8, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_ISJN, 0x07AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_U9H4, 0x07B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_4W1P, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_7E1F, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_8AQ7, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_MD1N, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_6ELC, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XFG8, 0x0A40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0B40);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_MC9K, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_QKEK, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_63ZS, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0358);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_IXXL, 0x0332);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0338);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_6KIM, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x062D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x062E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x062F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0632);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_KD8E, 0x0633);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_DF8P, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0648);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_SIYV, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0578);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0584);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0588);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_M0BQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_AITU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_K8V1, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_XGCH, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_A9V8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_S2GB, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0090);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_8F18, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_18KA, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_YSWK, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0790);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_6FI0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_FGYD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x00A0);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0328);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_9FN1, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x03C8);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_JGRU, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_OLE9, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0368);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_8BBS, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PXLK, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_36F3, 0x033B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_YLD1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_6K9N, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_NWRZ, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0388);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1GKU, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_770D, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_15Z7, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_XPSP, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_G5UX, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_RYJ4, 0x239C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x23C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x23C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_RZAF, 0x2418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_2H01, 0x2452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x245C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2464);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_V4IB, 0x246C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2470);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_3OL6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_WXDI, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_Y5VR, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_J9Q7, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_PNC3, 0x039D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x03A8);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ER3V, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IX9W, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ORPS, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_J49W, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_07GT, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_OR7J, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KBT2, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_LK79, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_QR7W, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KKH0, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0563);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_00TB, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_CY59, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_6AFI, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_AU7X, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Y1US, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_L1PD, 0x0674);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0678);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_F46Z, 0x03A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x03B0);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x03B0);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_45RG, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_DCSN, 0x05A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_TRHF, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x05F8);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_HP5E, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_PGCN, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_85XY, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_J3L6, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0690);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_1KTD, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_OQNF, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_JLT8, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_Z3B4, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_VM96, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_LQ8D, 0x072C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0778);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_5XYQ, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_TXQ6, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_1ZK2, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0360);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0360);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_0LEQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_IQYF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_V42E, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_JUH1, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_VXZP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_8J05, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0178);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_6MMP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_XQ7O, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_LDLR, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_3MU8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_5UX3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_VQ87, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_84UW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_NDDV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_KQCX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_OH8E, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0080);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_VHHA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_IW7R, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_F6LN, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x0100);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_1C91, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_EQ4W, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_UIDC, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0088);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_349K, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0078);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_YKKT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_H3DM, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00C0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_C785, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_JDZG, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_7PMV, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_LI22, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_PN8N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_DFGO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_WW34, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_V2F8, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_8WYG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_S9MQ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_S6EO, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0168);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_O0P8, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0460);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, bUseStaticMeshLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_0ZGX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_M8FE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_1K65, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_IY3M, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_6B68, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_X997, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_SRS7, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_JOK3, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_GLZK, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00C0);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_LG4C, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_W2RM, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_QR38, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_S1MM, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_4RK0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_0IF4, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_PI4M, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_8SA0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00C0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00E0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0088);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_SWRA, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0090);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_015N, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_6KX2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_TEVW, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0158);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0158);
		}

		// class UParticleSystem : public UObject
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_C79Z, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_B9UD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_AAWO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_7EMN, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_26A9, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_0WFA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_EOID, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_1FG6, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bAutoDeactivate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_2LKC, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_D969, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_87ZH, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxPoolSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_H88N, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_KDH1, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_TQ1P, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0140);
		}

		// class UParticleSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_682F, 0x058B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x058E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_Q52X, 0x058F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_7PMM, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_U4KE, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_OJIQ, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_V4NR, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NMTA, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x06B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x06B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_4O0S, 0x06B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_P8T4, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x07B0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_GPG5, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_AH5I, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideBaseProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_KFX7, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_RS9R, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PermutationTextureReferences, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_3MFJ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x01E8);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x01E8);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyGeneratedClassIsAuthoritative, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_MFRG, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_G5KT, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_JK3V, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, PRIVATE_InnermostPreviousCDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_CDB1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_IE43, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_WUVC, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, bNativize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_4CUL, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00E0);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_P7QB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x02C8);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_7EQQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0068);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_TFHU, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_PDM8, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0238);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_8D4I, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_KXUW, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_5BRV, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0078);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_H9YQ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_ACDE, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_705Z, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_HP1U, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_TXKL, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00F8);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_2DC9, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_WIYT, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x02E0);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_J81P, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_50LG, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_ZYBH, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_R4J2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x0840);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_E4R5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_O8SD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_IDAC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_5A68, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_XNGE, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_H9FJ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_Z7MC, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_O34U, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_BWSX, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_SAIR, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_EPQR, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_UXOK, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_WZ5S, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_QTNF, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0370);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0370);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_251J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_UR9X, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, bIsLightingScenario, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_X7PY, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_BG3X, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_CQ8F, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_6F4R, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_QNFE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0288);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_XR53, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0330);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_EYZT, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0330);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00E0);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_LQ89, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_DN27, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_69DD, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_KUBY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_9A05, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_1RJ4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_WCT7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0120);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0038);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0048);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_JUB6, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0040);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_1HDF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0160);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0048);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_6P44, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0040);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0038);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0048);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0048);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_A3KH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundConcurrencySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x00A8);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_SGZ8, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_LUL4, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_D7EW, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSubtitles, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_L6AQ, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0208);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_B95D, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0260);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_HEX0, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_Q34A, 0x0571);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0580);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_OQK8, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_I2ED, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_O7Q5, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_UYK0, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x03D8);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_N9QZ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x00F0);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_NDJI, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_U9CY, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_XUVS, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_IO23, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_H2RF, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_ID2U, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_VJLT, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_NS1D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0330);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_ATZU, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultCompressionAlgorithm, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, RotationCompressionFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, TranslationCompressionFormat, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_WD9R, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, MaxCurveError, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AlternativeCompressionThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryExhaustiveSearch, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnableSegmenting, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_GSOI, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0070);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_1GPD, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0060);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_I72S, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_9UJY, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x0108);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_DVGX, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_R2T3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndices, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_IDCZ, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0350);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_E9XU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_SBZ6, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndices, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeProperty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0098);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_W811, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_44UR, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_44F5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MYX0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ILQE, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_H25D, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YRW9, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_RWJH, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IO9V, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WC42, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultCustomTimeStep, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CurrentCustomTimeStep, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProvider, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimecodeProvider, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeProviderClassName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTimecodeFrameRate, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YHOX, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_G2DF, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LGMH, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FJVP, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KIAA, 0x0885);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_OKT8, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZCEZ, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QTRF, 0x0915);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_8COQ, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_C83Z, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TE5C, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B1PM, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionMeshSectionHighlightIntensity, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HoverHighlightIntensity, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7PWO, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_B4ON, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YQ8D, 0x0BDC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0CA8);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_1ZWA, 0x0CB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0CF8);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_MLOS, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_VK1A, 0x0409);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0410);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_GOAX, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_DFPB, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_XT25, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_1592, 0x03AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x03B8);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_4WAZ, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0340);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_PEII, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0388);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_61IQ, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_LVQF, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_0F8Q, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_YK9H, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_7MT8, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_6S9J, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0118);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_TZ5D, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0338);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0340);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0340);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_XY8Q, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_7YLA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UObject
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_0MST, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, IdealNumFramesPerSegment, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxNumFramesPerSegment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_F9BB, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxCurveError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_GB7S, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0050);
		}

		// class UAnimCompress_Automatic : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_6LZP, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0058);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0050);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0050);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_9GP4, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0070);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_KN5P, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_8XW0, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_MLZV, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_T0G9, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00F0);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_FC4J, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0058);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_VQ97, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0060);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_KINU, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_JL0Y, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_APBR, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01E0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_02FV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_SVJC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_0CA5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_456E, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_UES7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_OUTG, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0060);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_FT4Q, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0330);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_0ENM, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_Y0JU, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_QEPO, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0420);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_PEUL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoipBufferingDelay, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_KIWI, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaxWaveInstances, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_PQLG, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_ABND, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x00F8);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_XHZG, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_LJ8P, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x03B0);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_QVX7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_YAEI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_PA1K, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0580);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_FR7J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_NWFE, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_W8JV, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_BE0X, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_8437, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0360);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_4R9P, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_0M1C, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_12VY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_X9DH, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_E9CZ, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0280);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_56UH, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0330);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0330);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_XSHK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_2KAT, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_KAS2, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_LITQ, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_NSAW, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_R7JW, 0x07EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0868);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_I4GL, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_OU6T, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_O3X4, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_JEWG, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0140);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0140);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_KM9Z, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0140);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_2W8N, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_U07Z, 0x0375);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0378);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UTexture : public UObject
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_4XL5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_7SXQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B0);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_LL3L, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_CBPK, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_IUC8, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0360);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0360);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0330);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0240);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0080);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0080);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_U3PA, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0088);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_BQWJ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ZUYV, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_MRM3, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_KXZ3, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_95WV, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_EED5, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_5NJ2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_NEL7, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0370);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0180);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_T3CY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0068);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_TRLO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_Y57B, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_O99Z, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_ORZA, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_3MNC, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0070);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_WTB7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_E20I, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_JA2G, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_NAKY, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_XFNL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_YY7N, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_NJB8, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x0118);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_UL2E, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_M13S, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x0128);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_LNT9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0360);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0170);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_3YW8, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_S07H, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_HA5W, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0130);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_BASN, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0170);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0178);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_W7Q6, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_833Y, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_VDWB, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_JAAL, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_A7JJ, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_6Z4E, 0x03B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_C6ZL, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CBEI, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LTDI, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_MLOW, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_7F5A, 0x06FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0720);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_TUPS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_1UO9, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_7OQ9, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x02AC);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_GARU, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x02C0);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_GMJ2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_4LRE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_VSWT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_84A9, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0570);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0360);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_Y01J, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_NJFJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_K05H, 0x0544);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x0550);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_QL2A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_SZBG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_9823, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0360);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_WFQY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_L53U, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_DZHB, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_RNZ7, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_YLR4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0120);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_90YZ, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0378);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_UKGL, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_9R5X, 0x03DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x03E0);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_OTF7, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0338);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_KMS7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_8JGM, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_SEOP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_EU5O, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x0060);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_F3ZJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_ZWAI, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_2390, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_879B, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_0HLA, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_UTZL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_7M58, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_XIHM, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00B8);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_J7TY, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E0);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_29ZW, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0100);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_7XJ6, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0580);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_VUQX, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_88JC, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_WXHL, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_4N61, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_E636, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_DZ12, 0x0738);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x0740);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_CQGN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_H0Y9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_IH2S, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0080);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A0);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_YK97, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0088);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_IJAT, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0088);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_IYKX, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// class UPhysicsContactSet : public UObject
		TEST_METHOD(Class__Engine__PhysicsContactSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsContactSet, UnknownData_784H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsContactSet, 0x0040);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_WAL2, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_RP2C, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_YKVJ, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_GRJD, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x01A0);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_LLZK, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0270);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1920);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_54EL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0078);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_18S3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_JLQZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_WGX3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_E5W4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0078);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_UNEB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_GO18, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_CQS8, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0070);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_UPMJ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_8E3Y, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_K0AE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_ZACK, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_V0AB, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_76HR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_OQXL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_RFBV, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_LIPQ, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_9WPA, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_SBBZ, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_278C, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_PBWL, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x01D0);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_O8TU, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_VMER, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_13AY, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0038);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_BSIM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_7F3O, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0048);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_8QKK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_I3Z3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_RIWS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_ZRCI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_XT82, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0048);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_V0GR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0050);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_5ZWP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_CU0P, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0050);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_SRYS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_XI6U, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_KIGW, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_GUPL, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_EAQW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_4DTV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1918);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_0OFU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_94Y1, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0048);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0328);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_16GL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_0HUN, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_I464, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0380);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_4FU0, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_GRYA, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_1U6H, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0398);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0328);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_SFM6, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_SK03, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0128);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_GF1C, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_X0ZW, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_6MDQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_ZRAG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_ACY7, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0070);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_RHA1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x0098);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00B8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_M4TL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_Q2KU, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00A0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_ABMJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00C8);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_YNY2, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_5EMM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_OLRJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_PQ67, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x02E8);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_X11B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_7DED, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_YA2W, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_9ZAF, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0080);
		}

		// class UControlRigInterface : public UInterface
		TEST_METHOD(Class__Engine__ControlRigInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigInterface, 0x0028);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_QDO4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_SMR3, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_DJ9Z, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_ME8H, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_UAP7, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0378);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_VX5V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_CFO4, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00A8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_L0MZ, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0210);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientPixelSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_3QDU, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_IVQ6, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_T6PS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00E0);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0078);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_01Y3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_BEAV, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0060);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0050);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0038);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_CR9E, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_8XFM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_OKCL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0070);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0040);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0040);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0040);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0038);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_8LCQ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0070);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_BOZ7, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_0UB9, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0220);
		}

		// class USoundSubmix : public UObject
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChildSubmixes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ParentSubmix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChannelFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_SWBF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_TQ4J, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0080);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_ASQG, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0190);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_H8GI, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0198);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0338);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_JRPD, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x02C0);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0330);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_HF2A, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_INOV, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_T550, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_BUUY, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_1CNO, 0x0691);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x06A0);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_6QE6, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0260);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_UNX8, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_ZPJN, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_XMUC, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_TQYE, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_U3FK, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_2J30, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_9641, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_XQY4, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_KS4T, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0360);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_D9RA, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_G66O, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x037C);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_YNDG, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0390);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_WF42, 0x039C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03A0);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_2HZ4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_J72M, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_K8U9, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_F3GU, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x02C0);
		}

		// class UStaticMeshDescriptions : public UObject
		TEST_METHOD(Class__Engine__StaticMeshDescriptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshDescriptions, UnknownData_8WYN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescriptions, 0x0038);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x0180);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_DO0U, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_BVB9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_H22M, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_8WRM, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_6KNB, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x06C0);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_P430, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_YNPI, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_1AEJ, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_JDMW, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0418);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0418);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0330);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_RV02, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_BZIO, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0280);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0370);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_O6EA, 0x1918);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1938);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_S5JR, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_2BGD, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_QZWZ, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_VPKF, 0x0BC9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x0D30);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_9J44, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_6D8F, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_RIB9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_YCZC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0070);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_IJ4W, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_H4KI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_V5I6, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0078);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_3R9Q, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_6DVV, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0070);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_9E2K, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_LQP3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_7UN0, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_CVOL, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_4S7C, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_VDFU, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0098);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_QBCQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_31KF, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_ZRND, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_J7OS, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00D0);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_O99G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_KHBU, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_IKB7, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0088);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_DPNW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_L7QH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_X11U, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_9289, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_3FS4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_JEDZ, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00C8);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_JC1C, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_2HX8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_CEQC, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_KFHM, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_CHU1, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0080);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_NG1Y, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_FRJK, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0060);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_P78U, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_NO41, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x00A0);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_BLGB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_4D06, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_HOYD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_GNKF, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0098);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_F5Y5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_LPXY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_RENF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_0OWL, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_Q8IE, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_17ZK, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00B0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_Y8TK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_ZWJA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_6KHF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_FF9V, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x00A8);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_YRT0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_ZUF3, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0060);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_FOHN, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_9C50, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_5990, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0090);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_8WZL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_SY5M, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0078);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_LYWK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_FLHR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0060);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_IXE6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00C0);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00F8);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0118);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_0ATV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_RHTO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_QTTV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00A8);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_LOOO, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x00C8);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_9L4I, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_9FYJ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_UQ56, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_5WNT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_LSGR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_ZGZE, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0050);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_59TA, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_YPPR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x0098);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_5K4B, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_92NO, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_PTRR, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0330);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0330);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0330);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0330);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0360);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_VVWA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_QCIW, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00E0);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_NHXS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_0PEH, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_V9GQ, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_01B5, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0258);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_0WD4, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_QQND, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_CGLK, 0x0571);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0590);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_NSTW, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00D0);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0330);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Space, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, Rebuild, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture, UnknownData_H2EX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0050);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, LayerFlags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture, UnknownData_WLLU, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0058);
		}

		// class UVirtualTextureSpace : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Layers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, BorderWidth, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Size, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Dimensions, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, Format, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_XF3P, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, PoolSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureSpace, UnknownData_NA13, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureSpace, 0x0070);
		}

		// class ULightMapVirtualTextureSpace : public UVirtualTextureSpace
		TEST_METHOD(Class__Engine__LightMapVirtualTextureSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTextureSpace, 0x0070);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_T0K3, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0078);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_8OG7, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x0128);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_4UQT, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0108);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_6ELT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_IQHJ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_H4VP, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_FFDC, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_A0TD, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_L3DK, 0x03C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03D0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_T783, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_X02A, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_WFYG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_10IX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0338);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_8LD8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0068);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_FWL0, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_4TB4, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_VKT0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_Y1NE, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_QXSV, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_6S1D, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_43W8, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0098);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_TVVN, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_CFMN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_2VIT, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0060);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_PL81, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_4TV1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_WT4W, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_4I6A, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0060);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_FABK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_KF2L, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_5PZS, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0298);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_MPXS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0328);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_HQXO, 0x0341);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0348);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_5BOK, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_V3MD, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0440);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_XOU3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_2116, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_6USQ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_PT9T, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_OBIZ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_EO2P, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_NDQ5, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_CMF9, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_ZEXF, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_NEA2, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_03KD, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_ILVC, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0330);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_FF16, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0580);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_2HVA, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0580);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0580);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_DO4J, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_3X0U, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_UP6D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_7PH7, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_G69F, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_WPAS, 0x02C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02D0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_L7VZ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_8FLN, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00B0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0070);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00B0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0070);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00B0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0338);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_ZKUV, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0238);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0070);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_H3M5, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B8);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_8AZ2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_751N, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_SJLZ, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_XMUO, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_RHVR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_PL6U, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_N6HI, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_UXSP, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x0310);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0118);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_P4H8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_126G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_DTG3, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0070);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_K2D7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_EJRQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_1MZI, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_FB20, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_TEFH, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_9HS7, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x00A8);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_02HJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_6A8S, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0080);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_ZNZP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_NHQM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_B3AL, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0060);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0080);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_KF8J, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_DG3W, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_RJMC, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_AVSI, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_0G0V, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_PTE3, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_1UMN, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_4KAZ, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x01B8);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_P0KN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_YBHZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_37XB, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_3HRG, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_BX4S, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_0OU0, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0138);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_BFRS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_3P1H, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_JXXK, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_LFTZ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_8A2S, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_6C9T, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0138);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_DFMH, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_PR8A, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FUMT, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_TY5N, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FQ2G, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_UH55, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_DFT0, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_WC48, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x01B8);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_F7PX, 0x00B6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_DU11, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00C0);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00C8);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_IVT0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_TK5L, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0070);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_TYME, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_BWHS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_YBUF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_OIUT, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0070);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_WK0H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_NGEV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_OBRM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_SM3P, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_ONMV, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_C6QG, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_GSV3, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x00A0);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_OEE1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_LEIS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_525I, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_KE12, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_5FMD, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_T9GQ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_BCI5, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0098);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_UYRO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_M94E, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_JVJG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_3D85, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_R7U9, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_5GE3, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_BH1E, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_QJTX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_9L51, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_C8P7, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00F8);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_KZ7W, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0100);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_6449, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_Z8AC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_WDH3, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0078);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_RR6K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_QIYI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_7IOD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_ZNNW, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_IHKU, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_ZBS8, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00E8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_CEDD, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00D8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_AJVI, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_ZOYM, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_8UNW, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_RQ3P, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0140);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_T3OM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_55IE, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, fadeInTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, fadeOutTime, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0088);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_IQ11, 0x02E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x02F0);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0040);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0048);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0040);
		}

		// class UStaticMesh : public UObject
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_1KE9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_U1VE, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_WX3L, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0110);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_VBKV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_6AS5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_K5VI, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_N9ZF, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_N9IG, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02D0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_ZIA8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// class UAmbisonicsSubmixSettingsBase : public UObject
		TEST_METHOD(Class__Engine__AmbisonicsSubmixSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsSubmixSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_T2WT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_8A7B, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0078);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0088);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_LGKS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_1T5V, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_YRAA, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_YPD8, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_1GJQ, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0160);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_POCC, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_P64V, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_N000, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ITPO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_IP3B, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_96V4, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ZZNT, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_XGJT, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_FNQF, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_VE1S, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_BCXL, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_3GEG, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_MW8X, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_VXHT, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_3INZ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_TK8G, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_RHV5, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0170);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_DJ2D, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_EZF0, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x05A0);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_4GMM, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_LDM5, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_5QS1, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_VS8U, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_NGW4, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x01A0);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_1ZZU, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_85DK, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_48NE, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x0378);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_UOTO, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x01C8);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_B7XG, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_BH2F, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_Q2OP, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ABA6, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_DNGH, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9UG2, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1QWU, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WBNU, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0SJ7, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KGCN, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VN7U, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_G8FH, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_FGV2, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_H8VR, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_05OU, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_VITP, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_P3ZR, 0x01EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_1DW6, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableOutputAlpha, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_L3VV, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WVW3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedQualityLevelsUsed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LOOP, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x02C0);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0570);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_63A9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_OX4R, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0150);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_HQS6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureOnMovement, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_GZTV, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_FB2L, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_117J, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02D0);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_8Z4N, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_LY0K, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_ZV13, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_Z21Y, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_YUPS, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_QM75, 0x083D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0840);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_EHU0, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0300);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0338);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_D43W, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00E0);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_HQA1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_W8LG, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutSaturation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_96P2, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x03F0);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_FJ8D, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_BLK3, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class USkeletalMesh : public UObject
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_QOAW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_0UAA, 0x00D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_XZLB, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_IUUA, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x02F8);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_2QYW, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_JP5W, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_KOK1, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x03B0);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_1R1N, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_4SFM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_JXPC, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0078);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0118);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0118);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_7CGG, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0120);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_RXB3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_A8VQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0070);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_ERHO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_IP4D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_C9D3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_UQX0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0080);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00E0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_2AFJ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00C0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_FONP, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00C0);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0160);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_BXN0, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_9N6G, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_73Q4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_49BW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_THXB, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0098);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_VPXK, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0070);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_9V76, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_H2BO, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0070);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_I4N1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_MC5X, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_9QWW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_HPGR, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0098);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_LXW0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9UA4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_0NLF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PHW0, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_K453, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_SRSU, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_OPXE, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_B8VA, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_GPPZ, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_QEYO, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_P164, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_DBCB, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_QB28, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_M4Q4, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ECMU, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_7531, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_1K89, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_26JF, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0298);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_GQN0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_UYQM, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_MVY9, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00F0);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_OWCD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_LYNM, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_83U6, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_UXHG, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0148);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_P6YA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_5TP7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_6C9C, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_5WGC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0070);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_RKQQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_0TNW, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0060);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_8XEH, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_LGLG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0080);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_U4OA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_JR1Y, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_3KB0, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00B8);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableAsyncScene, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableContactModification, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_P99K, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_69D5, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_ZVLI, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_K5WX, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_3RI7, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AsyncSceneSmoothingFactor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_CAQP, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0110);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_U4QW, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_Y1AJ, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_UVB2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0260);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0330);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_MO9S, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0240);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_D5BS, 0x0339);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0340);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_7LUO, 0x0305);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03B0);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0330);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_PHDI, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x02C0);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x0110);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_SUWF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_TTEP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_3EIL, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_LU0M, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_HCC3, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_EST0, 0x0349);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0350);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0358);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0358);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, score, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_R5JW, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_8ZR2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_X241, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_5BZL, 0x0357);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_OPBW, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_6NSX, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_TV8N, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_VH7X, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_K9GK, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x03F0);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_NSQ0, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0340);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_ENPK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_5O8B, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0810);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_G3JC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_P4KT, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_4RGE, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0730);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_ZLU6, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_4O86, 0x085D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x0860);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0390);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0360);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_Y91I, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_EINK, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_ZJ1R, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_G0YH, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0090);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0090);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_FXYM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_8UUO, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0070);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_2DRT, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_7FC2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0078);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_DDJU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_1X15, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0078);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_QZKQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_W9HM, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0078);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_H4VD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_WWBH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_L5MC, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_833P, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_VXJJ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0098);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_RZ5W, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_Q2HI, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A0);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_5MHG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_5ILP, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0060);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_DZIK, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0068);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_LEFQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_SF8R, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FBHK, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_QMI6, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_R8KH, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PA8I, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_7085, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_OM7Y, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_0ZOK, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_MIRX, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x03D0);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x03D8);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0360);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_O66X, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_DKFD, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x05A0);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_TUDF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_OB4L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_F6T1, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystem : public UObject
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_88UJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x0038);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_QX3S, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0048);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0048);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_1MWH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_EGOI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_6N95, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_4NIQ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0078);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_HRGL, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_9WPJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_O9UE, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_2ZSN, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0090);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_4DUG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_5W52, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_SSUI, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0080);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_RQMN, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0118);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_7E10, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_DI2E, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0118);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_DHHY, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0120);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0118);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_4N80, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_F265, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_BSQ5, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0060);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_2C42, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_EO3Z, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0060);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0170);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_ZAXY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_4XDI, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_ID0B, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_CYQQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0078);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_32QF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_QPON, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0060);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_HC7K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0038);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0328);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0330);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_2N2E, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_F4L5, 0x05A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x05B0);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_Z5W6, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_QM2U, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00C8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_SPOO, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0108);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_W5S2, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D0);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_W342, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0190);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_1E3G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_J1DZ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0088);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A8);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A0);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_F0HS, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_GXT9, 0x0331);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0338);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_PNDA, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_ZNNJ, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_LQYL, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_KII6, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x02D0);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_HMQX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0080);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0038);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_5LMN, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_X2YV, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0380);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_4SC6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_8K8T, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_JLSG, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0070);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_GYRG, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_J53X, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_IVDU, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01F0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0330);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_3NMQ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_JO6G, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_G9Q3, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0270);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0340);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_2SPQ, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0390);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QCDS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZGK5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KC5G, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AA44, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_R7YI, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LOWU, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_O1NK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5ZOY, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_IAZH, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2L8B, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KIJG, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_S0GG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_EVL4, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4HFC, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PSE7, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3A9V, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YH79, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KXCG, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_9W7D, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FQBX, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_VGFJ, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OT3B, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, FoveatedMaskHighResFov, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, FoveatedMaskMediumResFov, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, FoveatedMaskLowResFov, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5W1J, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GAHK, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_IXRL, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00E0);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_2H5Q, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_TE4I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_JB79, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0368);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0330);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_PQPF, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_D43C, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0260);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_QUJ7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_XNJO, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_4VTY, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_7B5G, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_Z3A0, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_BADX, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_758I, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_333S, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_8NOE, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_WDEL, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ZHQ7, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_F7NL, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookMarks, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, timeDilation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_DHEE, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_NH4C, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, bOverrideDefaultBroadphaseSettings, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_PVWF, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_VK4B, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0550);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_FT4M, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0048);
		}

		// class UTN_MiniGameScoreboard_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TN_MiniGameScoreboard_Widget__TN_MiniGameScoreboard_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, Count, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, Points, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, ScoreText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, Timer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_MiniGameScoreboard_Widget_C, TimeText, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTN_MiniGameScoreboard_Widget_C, 0x0240);
		}

		// class USubMenu_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__SubMenu__SubMenu_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubMenu_C, 0x0028);
		}

		// class ADebugMainMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DebugMainMenu__DebugMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MenuRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MenuScaleRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Root, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Timeline_ScaleDebutMenu_Alpha_EB40260D42F9FF195B99EC9076FFA655, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Timeline_ScaleDebutMenu__Direction_EB40260D42F9FF195B99EC9076FFA655, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, UnknownData_5TQU, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Timeline_ScaleDebutMenu, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DebugMainMenuButtons, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, HubButton, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MultiplayerMenu, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MainMenu, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, GameInstance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, ShowMainMenu, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, ReturnItLevel, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, HRDerbyLevel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, SportLevels, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TestsButtons, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TestsMenu, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, BowlingLevel, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, BowlingStartPos, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, BaseballStartPos, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TennisStartPos, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DisableSubMenus, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, UnknownData_1C4M, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, VistaButton, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TravelCapsule, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DebugTopMenuActive, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DebugTopMenuDeactivated, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Sport, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, UnknownData_GUUO, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, GameSelector, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, LevelReady, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, LevelOverride, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, LoadTrainingLevel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, ReturningToHub, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, UnknownData_FOMI, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TestActor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TennisMinPlayArea, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, TennisMaxPlayArea, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DefaultMinPlayArea, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, DefaultMaxPlayArea, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MatchmakingCancelMenu, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MatchmakingTestCancelButtons, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MatchmakingPrefsButtons, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, MatchmakingPrefsMenu, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, InvitesButtons, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, InvitesMenu, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, FriendsButtons, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, FriendsMenu, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, friends, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugMainMenu_C, Header, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugMainMenu_C, 0x0558);
		}

		// class ABallTrigger_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__BallTrigger__BallTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, Root, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, BallEnteredTrigger, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, Mode, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, Type, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, UnknownData_DA7S, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, CircleRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, RadiusScale, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, RMargin, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, LMargin, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, TMargin, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, BMargin, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, StartEnabled, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTrigger_C, OneShot, 0x045D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallTrigger_C, 0x045E);
		}

		// class ABB_Challenge_Base_C : public AChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_Base__BB_Challenge_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, UnknownData_87W2, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, UberGraphFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, Audio_Scored, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ActorSetInstruments, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, Audio_MiniGameIntroMusic, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ActorSetBalls, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, Audio_BowlingMusic, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, LevelWon, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, UnknownData_L2QC, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ID, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, Audio_And_VO, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, BallClass, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ActorSet_Instruments, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, BallList, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, BallVOList, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, GameLength, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, GameOver, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ChallengeResult, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, UnknownData_KZ6F, 0x050E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, InstrumentClass, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, InstrumentList, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, InstrumentVOList, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, BB_NormalSportManager, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, Scoreboards, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, LargeScoreboard, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, TrainingScorebards, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, TopTimers, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, ScoreFontSize, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_Base_C, TimerFontSize, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_Base_C, 0x0580);
		}

		// class ABP_TrophyAward_BW_PureLuck_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_PureLuck__BP_TrophyAward_BW_PureLuck_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_PureLuck_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_PureLuck_C, 0x03C0);
		}

		// class UBW_ScoreCardFrameFinal_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCardFrameFinal_Widget__BW_ScoreCardFrameFinal_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Background, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_4, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_6, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_7, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_8, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_9, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_10, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_11, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_12, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_13, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_14, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_15, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Image_16, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Roll1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Roll2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, Roll3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCardFrameFinal_Widget_C, ScoreText, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCardFrameFinal_Widget_C, 0x02B8);
		}

		// class AScramSportManagerBowling_Blueprint_C : public AScramSportManagerBowling
		TEST_METHOD(BlueprintGeneratedClass__ScramSportManagerBowling_Blueprint__ScramSportManagerBowling_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, AudioCountdown, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, AudioCrowd, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, AudioMatchMusic, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Root, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, DebugBallsSetting, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_QEMX, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, GameInstance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, LocalHelper, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, VideoBoard, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Alley0, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Alley1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, GamesToWin, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_I9K4, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, CenterScoreboard, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Game, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Round1Length, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Round2Length, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Round3Length, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, P1GamesWon, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, P2GamesWon, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, MatchComplete, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, PreviousGameWinner, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, CountdownSeconds, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, AiVsAi, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, PracticeGame, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_AS2U, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, PauseBubbleActor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, BowlingAi01, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, BowlingAi02, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, CountdownActor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Round1List, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, Round2List, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, BWGameEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, ScoreKeeper, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, AllowAI, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_S0YA, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, GameTimeRemainig, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, GameTimeEnded, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, EndCountdownActivated, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_UFQJ, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, StartedGame, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, ResumedTraditionalFrameSets, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, MatchResult, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, UnknownData_LK6R, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, BonusRollCounter, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, RestartedChallenge, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSportManagerBowling_Blueprint_C, DemoMode, 0x0519);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSportManagerBowling_Blueprint_C, 0x051A);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_IRU7, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x07A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_XB9I, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_H09T, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_5BJU, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ELYP, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DWUZ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_E2AS, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YE6S, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_IFL1, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0PLO, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_J4N8, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_JMG4, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YES7, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_CM69, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OGH8, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_L38Y, 0x034E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0350);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0370);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_RWZC, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0378);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_TAYM, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0398);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_91TB, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0600);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0368);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_096Y, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x0118);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_YT5Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, bNeedsSimulation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_7H04, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0070);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_RL1Q, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_A88Z, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0368);
		}

		// class ULowConnectionWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LowConnectionWidget__LowConnectionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, CircleLeft, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, CircleRight, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, Icon1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, Icon2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, SizeBox_BlackBacking, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, SizeBoxText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, SlowText_en, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, TextBlock_de, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, TextBlock_es, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, TextBlock_fr, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, TextBlock_ja, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowConnectionWidget_C, TextBlock_ko, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowConnectionWidget_C, 0x0278);
		}

		// class ATN_FishRacket_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_FishRacket__TN_FishRacket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_FishRacket_C, UberGraphFrame, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_FishRacket_C, SkeletalMeshComponent, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_FishRacket_C, PhysicsBlendWeight, 0x0FC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_FishRacket_C, 0x0FCC);
		}

		// class ABB_Train_07_UnlimitedBatting_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_07_UnlimitedBatting__BB_Train_07_UnlimitedBatting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, Crowd, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, TargetList, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, LaunchDelay, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, UnknownData_0TAQ, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, HitBall, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, LaunchTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, RandomBall, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, UnknownData_WWNO, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, BallClass, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, InstumentClass, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, ValidBallClassList, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, RandomInstrument, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, UnknownData_DC8B, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, DisabledBallClassList, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, LaunchSpeed, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, FireTime, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, ValidInstrumentClassList, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, OriginalBattingPreferences, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, GameStarted, 0x06AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, ActiveLauncherDifficulty, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, UnknownData_E4OG, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, HitBalls, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_07_UnlimitedBatting_C, GroundKillTime, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_07_UnlimitedBatting_C, 0x06C4);
		}

		// class ABW_Turkey_C : public ABW_Bomb_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Turkey__BW_Turkey_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, UnknownData_TEXH, 0x0F5E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, UberGraphFrame, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, HatchDelay, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, UnknownData_R2UB, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, HatchSFX, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, HatchLinearVelocity, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, Hatched, 0x0F84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, UnknownData_Y8JU, 0x0F85);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, HatchVFXScale, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, UnknownData_LAFD, 0x0F8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Turkey_C, ParentEgg, 0x0F90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Turkey_C, 0x0F98);
		}

		// class UBW_ScoreCard_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BW_ScoreCard_Widget__BW_ScoreCard_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, BW_ScoreCardBackground_Widget, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col1Box, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col2Box, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col3Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col4Box, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col5Box, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col6Box, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col7Box, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col8Box, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Col9Box, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, ColFinalText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Player1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBW_ScoreCard_Widget_C, Player2, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBW_ScoreCard_Widget_C, 0x0280);
		}

		// class AInstrumentSelection_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InstrumentSelection__InstrumentSelection_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, AButtonPressed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, SelectionOpen, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, Closing, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, UnknownData_21U3, 0x033B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, Offset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstrumentSelection_C, GameInstance, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstrumentSelection_C, 0x0378);
		}

		// class UTurnAroundWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TurnAroundWidget__TurnAroundWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurnAroundWidget_C, TextTurn, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnAroundWidget_C, 0x0218);
		}

		// class ATennisScrambleTarget_C : public AScrambleTarget
		TEST_METHOD(BlueprintGeneratedClass__TennisScrambleTarget__TennisScrambleTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, TN_ScrambleTarget_Shrink_Cue, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, TN_ScrambleTarget_Grow_Cue, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, RadialPulse, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, MeshFrame, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, MeshCannon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, MeshParent, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Target_Influencer, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, WidgetFront, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, WidgetBack, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Widgets, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Root, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_Size_Change_Scale_F1EB380E44B6E2915355239A2DA4BAEF, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_Size_Change__Direction_F1EB380E44B6E2915355239A2DA4BAEF, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_CRSZ, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_Size_Change, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_SpinCannon_Spin_B762EAD0498082E4E063F7BD77F2E690, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_SpinCannon__Direction_B762EAD0498082E4E063F7BD77F2E690, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_7RMS, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_SpinCannon, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_RotateCannon_Alpha_922D06A3440FEC72145F35BE60A37592, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_RotateCannon__Direction_922D06A3440FEC72145F35BE60A37592, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_P0KW, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Timeline_RotateCannon, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, InstrumentHitBallsOnly, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_5DT7, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ScrambleEvent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, FrontIcon, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, BackIcon, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ScrambleTargetRemoved, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ID, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, InitialScale, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, EffectEnabled, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_3X6M, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, SubsetBallClass, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, SubsetInstrumentClass, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, TryMatchChance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_USMA, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Texture, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Shrinking, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_DF6G, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, OldBall, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_1N1W, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, OldBallTransform, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, SportManager, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, OldBallClass, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, BallIsInPlay, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_Z60T, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, NewBallClass, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ScrambleEventActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, Launcher, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ReturnToHitter, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_CR6O, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, OldTrajectory, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, FireDelay, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, InitialRotation, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, EndRotation, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_VFI2, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, SpawnVFX, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_6586, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, VFXOffset, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, ScrambleTargetHit, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, LaunchLocation, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, UnknownData_NKSN, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, NewTrajectory, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, InitialLocation, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, HVarience, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScrambleTarget_C, BallFiredFromTarget, 0x0A10);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScrambleTarget_C, 0x0A20);
		}

		// class ABB_Trail_Normal_Flat_Challenge06_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Trail_Normal_Flat_Challenge06__BB_Trail_Normal_Flat_Challenge06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Trail_Normal_Flat_Challenge06_C, 0x037C);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_QODE, 0x065C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0690);
		}

		// class AManagerBowling_LocalHelper_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__ManagerBowling_LocalHelper__ManagerBowling_LocalHelper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, Root, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, GameInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, DisappointedAudience, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, AudienceApplause, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, InfoPanel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, IsPlayer1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, UnknownData_7XO7, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, SFX_StingerLose, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, SFX_StingerWin, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, PlinkoLaunchSound, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, CountdownActor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, UseAlternateInfo, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, UnknownData_UO86, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, AlternateText_Panel_01, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, AlternateText_Panel_02_Prefix, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManagerBowling_LocalHelper_C, AlternateText_Panel_02_Postfix, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManagerBowling_LocalHelper_C, 0x03C0);
		}

		// class ATennisScramble_ChargedShot_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_ChargedShot__TennisScramble_ChargedShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_ChargedShot_C, 0x0380);
		}

		// class ATN_Challenge_04_Accelerator_C : public ATN_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Challenge_04_Accelerator__TN_Challenge_04_Accelerator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, UnknownData_GXU0, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, Scoreboards, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, AnnouncerSequence, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, PlayerHitCount, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, UnknownData_GETY, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, SportMgr, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, GameLength, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, GameOver, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, FirstPauseCompleted, 0x06FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, SecondPauseCompleted, 0x06FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, UnknownData_YO0X, 0x06FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, AI_Opponent, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, ActiveBall, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, AddedScore, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, OldGamesToWinMatch, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, OldPointToWinGame, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, ValuesSet, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Challenge_04_Accelerator_C, TimerFinished, 0x071D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Challenge_04_Accelerator_C, 0x071E);
		}

		// class ABW_Challenge_Base_C : public AChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_Base__BW_Challenge_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UnknownData_HRYU, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UberGraphFrame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, Audio_MiniGameIntroMusic, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, ActorSetBalls, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, Audio_BowlingMusic, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, TutorialAlley, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, TutorialBallReturn, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, TutorialPinSetter, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UnusedAlley, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, CenterScoreboard, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, ID, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, DisableLaneChanges, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UnknownData_GOQ9, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, Audio_And_VO, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, BallClass, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, ActorSet_Instruments, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, BallList, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, BallVOList, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, GameLength, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, GameOver, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UnknownData_QNJ4, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, BW_SportManager, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, ChallengeResult, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UnknownData_TH12, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, BW_LaneManager, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_Base_C, UseTrainingFinishLine, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_Base_C, 0x0541);
		}

		// class ABowlingAI_Hard_Blueprint_C : public ABowlingAI_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BowlingAI_Hard_Blueprint__BowlingAI_Hard_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAI_Hard_Blueprint_C, 0x054A);
		}

		// class UTN_FishBall_AnimBP_C : public UScramBallAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__TN_FishBall_AnimBP__TN_FishBall_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, UberGraphFrame, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_Root_8E1359494DC35E87E0A42DA3745B7A43, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_TransitionResult_2F1D8544441EBA48918D4D8D4ECDADF9, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_TransitionResult_64EA0EA34C1CEAAC57DDD1B398A5934C, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_TransitionResult_01C7BA88452E91511D6984944CC599A8, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_TransitionResult_0A55E8D14CE3DB566141BF94677A6D2F, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_SequencePlayer_E5C014AE4B7FE888FE6E71B33F328AC1, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_StateResult_6B7FD2BA49F7E4A6BB4090ADDD9503D6, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_SequencePlayer_AFCDEAB64503834EC46D4E822A509AD0, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_StateResult_3D34D495444DE99197E66FBAE2E2D51F, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_SequencePlayer_180A47DC41712D36CE0D1E984DF09B31, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_StateResult_9479BC1B472E2496BB2751AD1C032042, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_FishBall_AnimBP_C, AnimGraphNode_StateMachine_B60709EE4904B783D25472B5D4F68FD3, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTN_FishBall_AnimBP_C, 0x0888);
		}

		// class ATennisScramble_RandomBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_RandomBall__TennisScramble_RandomBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_RandomBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_RandomBall_C, 0x0388);
		}

		// class ACubbyEffect_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CubbyEffect__CubbyEffect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACubbyEffect_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACubbyEffect_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACubbyEffect_C, PointLight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACubbyEffect_C, SpotLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACubbyEffect_C, DefaultSceneRoot, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACubbyEffect_C, 0x0350);
		}

		// class ABaseballAIPitcher_Normal_Blueprint_C : public ABaseballAIPitcher_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIPitcher_Normal_Blueprint__BaseballAIPitcher_Normal_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIPitcher_Normal_Blueprint_C, 0x06D2);
		}

		// class ABaseballPracticeArenaWindow_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__BaseballPracticeArenaWindow__BaseballPracticeArenaWindow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, InstancedMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, StaticMesh_FullWindow, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, ParticleSystem, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, FlyTextLocation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, Root, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, StaticMeshList, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, ShowFlashScore, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, UnknownData_GY1I, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, FlashScoreColor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, FlashScoreAmount, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, UnknownData_2EAO, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, BallActor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, ScoreText, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, WindowOverlapDetected, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, FlashTime, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, DeactivationDelay, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, ReactivationDelay, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, DestroyAfterHit, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, UnknownData_X6Y3, 0x04C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, GameManager, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballPracticeArenaWindow_C, PlayerBrokeWindow, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballPracticeArenaWindow_C, 0x04E0);
		}

		// class AFans_Sideline_SkelMesh_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fans_Sideline_SkelMesh__Fans_Sideline_SkelMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, InstancedMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, Fan_ShadowPlane, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, CoWorker_01, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, HatOff_Timeline_AO_Control_37490F53406C24A363C3348CF37970EF, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, HatOff_Timeline__Direction_37490F53406C24A363C3348CF37970EF, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, UnknownData_3RF9, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, HatOff_Timeline, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, HatOffTrue, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, UnknownData_QDM2, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, BounceColor, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, UnknownData_SH3J, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, BounceColorParameter, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Sideline_SkelMesh_C, LightingGroup, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFans_Sideline_SkelMesh_C, 0x0388);
		}

		// class ATN_MiniGameScoreboard_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_MiniGameScoreboard__TN_MiniGameScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, ScoreboardWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_1_Alpha_21590E324C03E3E7ACF5FDAFE71D067F, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_1__Direction_21590E324C03E3E7ACF5FDAFE71D067F, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_IN58, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_0_Alpha_3A8824BD4582184C6D93D2887E84FED8, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_0__Direction_3A8824BD4582184C6D93D2887E84FED8, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_KFTV, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_ScoreTranslation_Alpha_EB7DE06D4EA8BFE6D9AADFA99A83C14F, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_ScoreTranslation__Direction_EB7DE06D4EA8BFE6D9AADFA99A83C14F, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_WSAJ, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_ScoreTranslation, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_TimeTranslation_Alpha_600A6B9645DAB0DF1424AFA4C243A788, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_TimeTranslation__Direction_600A6B9645DAB0DF1424AFA4C243A788, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_BGC1, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Timeline_TimeTranslation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, CurrentTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Countdown, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, ClockActive, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_WLHT, 0x0386);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, TargetTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_A5OJ, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, Widget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, ShowClock, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_2ICK, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, TargetTimeReached, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, TriggerTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UnknownData_56A1, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, TriggerTimeReached, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_MiniGameScoreboard_C, UseRevealAnimations, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_MiniGameScoreboard_C, 0x03C9);
		}

		// class UScramDataSingleton_BP_C : public UScramDataSingleton
		TEST_METHOD(BlueprintGeneratedClass__ScramDataSingleton_BP__ScramDataSingleton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramDataSingleton_BP_C, 0x0048);
		}

		// class ABallTarget_NW_C : public AScramTarget
		TEST_METHOD(BlueprintGeneratedClass__BallTarget_NW__BallTarget_NW_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, TennisBox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, StaticMeshMiddle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Target_Influencer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, StaticMeshBullseye, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, StaticMeshOuter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Inner_Alpha_F2423BA844C530127D0C88885461687B, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Inner__Direction_F2423BA844C530127D0C88885461687B, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_NRBT, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Inner, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Middle_Alpha_EA4B634B49EAD28E9A26B09A647A2141, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Middle__Direction_EA4B634B49EAD28E9A26B09A647A2141, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_78UB, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Middle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Outer_Alpha_D806315749F9A5E9F68AE4A1DFB2FAE1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Outer__Direction_D806315749F9A5E9F68AE4A1DFB2FAE1, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_H64W, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Timeline_Outer, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, ChangeSize_Scale_2822C80A41F19278074AB6861FFCE1AD, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, ChangeSize__Direction_2822C80A41F19278074AB6861FFCE1AD, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_98TY, 0x03BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, ChangeSize, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, BallTarget_NW_Hit, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, InitialScale, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Hidden, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, DestroyPayload, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_WJFK, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Impacts, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, Bullseye, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_HDGC, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, MatOuter, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, MatMiddle, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, MatInner, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_FR9N, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, FlyTextTransform, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, TargetPlayRate, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, DisableCollisionOnHit, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_KMZF, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, ShrinkStart, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UseDelayShrink, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, UnknownData_2Y89, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, DelayShrinkTime, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABallTarget_NW_C, ActiveTarget, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABallTarget_NW_C, 0x0471);
		}

		// class AScreenErrorUI_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ScreenErrorUI__ScreenErrorUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, ErrorMessageComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, NoPauseWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Timeline_Scale_Alpha_B3641E1B44DF8DE6E0F988AE3B4FEBD5, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Timeline_Scale__Direction_B3641E1B44DF8DE6E0F988AE3B4FEBD5, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, UnknownData_35VW, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Timeline_Scale, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, NoPauseIcon, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, UnknownData_BNPB, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Yaw, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Delta, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, UnknownData_6Q09, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, ErrorMessage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, ErrorMessageWidget, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, SplashScreen, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, LockToCamera, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, UnknownData_8S7Z, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenErrorUI_C, Distance, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScreenErrorUI_C, 0x0390);
		}

		// class UScramGameInstance_C : public UScramGameInstance
		TEST_METHOD(BlueprintGeneratedClass__ScramGameInstance__ScramGameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DebugStringBP, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, MultiplayerSessionsFound, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, NoSessionsFound, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ServerList, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ServerFound, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_5CEK, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, JoinFailed, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, JoinSuccess, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, MultiplayerActive, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_Z9NV, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Sessions, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DebugBallsAllowed, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_HB67, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, StartingRacket, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DisableMusicManagers, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_IFW8, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, MaximumBallCount, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TeleportTransitionReady, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TravelCapsule, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TeleportTransitionComplete, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultBall_Tennis, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultBall_Baseball, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultBall_Bowling, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultInstrument_Tennis, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultInstrument_Baseball, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultInstrument_Bowling, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PrimaryLevelName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, GeoLevelName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PrimaryLevel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, GeoLevel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PrimaryLevelChanged, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, GeoLevelChanged, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DemoMode, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_SDJR, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, LevelName, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DemoRoomScale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DemoRightHanded, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_QSPA, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, OCDemoSessionFound, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, OCDemoSessionNotFound, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, OCDemoSession, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DemoInitialized, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DemoNoMultiplayer, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_EKG2, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, InitializeInstrument_LeftHand, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, InitializeInstrument_RightHand, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, LevelBPDispatch, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DisablePlayerFadeInOnSpawn, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, WasSpectator, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, OCDemo_SkipToJoin, 0x05BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, LoadLevelNoRender, 0x05BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DisableInstrumentSpawnFX, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_QLNO, 0x05BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, SelectedAvatar, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, SelectedAvatarSkinColor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ActiveGameMode, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_MPDL, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TournamentTotalGames, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_AiDifficulty, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_ScrambleRackets, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_ScrambleBalls, 0x05DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_ScrambleCourt, 0x05DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_Ruleset, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_11FY, 0x05DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_PointsToWinGame, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, TN_SF_GamesToWinMatch, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PnP_NumberOfPlayers, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_V540, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PnP_PlayerData, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ExistingTeleportTransitionReady, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DebugMode, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HasSeenLogos, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HasCompletedTutorial, 0x0615);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ArenaPairSport, 0x0616);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ArenaPairTraining, 0x0617);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_AiDifficulty, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_ScrambleLanes, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_ScrambleBalls, 0x061A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_SpecialBalls, 0x061B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_GamesToWinMatch, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, GameName, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_Ball, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_Instrument, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_TnShotType, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_TnShotDirection, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_TnServeStyle, 0x063A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_1V0M, 0x063B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ActiveGameResults, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, AllowPause, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HasSeenAnnouncer, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_KFN1, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, JoinFailedAll, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Training_Lane, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Option_ShowBoundaries, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_2X4G, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, SpawnLocOverride, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HostingFailed, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, FindSessionsFailed, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, CheckConnectionResult, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, GameInitialized, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ShowErrorMessage, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, RecheckVoicePermission, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BB_PitchingTargets, 0x06AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, IsPrivateMatch, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, MultiplayerInviteAccepted, 0x06AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_TMR6, 0x06AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, PnP_TournamentList, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_Ruleset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_5EQ7, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_SF_FrameCount, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DebugMultiplayer, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_2HWJ, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, AvatarLook, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, RemoteAvatarLook, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, EarlyAccess, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, EarlyAccessContentUnlocked, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BB_HittingTargets, 0x0715);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BB_LauncherDifficulty, 0x0716);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, BW_NoAi, 0x0717);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, LevelsUnloaded, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, RestartingChallenge, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_X531, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, DefaultInstrument_Menu, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Option_UseMenuPointer, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_8V5U, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ShellGameInvite, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Option_DisableTips, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_XYJT, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Option_Volume_Game, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, Option_Volume_Voip, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_U3SK, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ReflectionLevel, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HeadsetDisconnected, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_7VVY, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, HeadsetStatusChanged, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ControllerConnectionChanged, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, ControllersConnected, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, UnknownData_U61O, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScramGameInstance_C, FloatUI, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScramGameInstance_C, 0x07F0);
		}

		// class ABB_HockeyPuck_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_HockeyPuck__BB_HockeyPuck_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_HockeyPuck_C, 0x1038);
		}

		// class ABB_Train_04_BasicHitting_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_04_BasicHitting__BB_Train_04_BasicHitting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_RightHand, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_LeftHand, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_GiveItAnotherShot, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog12, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_OneMore, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Alright, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_GiveItAShot, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog11, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_OneMoreTime, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog10, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_AwesomeYouGotIt, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog09, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog08, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog07, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog06, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Nice, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Dialog05, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Audio_Great, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, PauseBetweenVO, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, UmpireCallDelay, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_InstrumentGrabbed, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_HandSwap, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_FirstTBallHit, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_SecondTBallHit, 0x06C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_FirstLaunchBallHit, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_SecondLaunchBallHit, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_TrainingStarted, 0x06C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, Tutorial_TrainingOver, 0x06C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, FoulOrInvalidHit, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, UnknownData_DEH9, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, HitBall, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_04_BasicHitting_C, OriginalBattingPreferences, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_04_BasicHitting_C, 0x06DB);
		}

		// class ABaseballAIPitcher_Easy_Blueprint_C : public ABaseballAIPitcher_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIPitcher_Easy_Blueprint__BaseballAIPitcher_Easy_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIPitcher_Easy_Blueprint_C, 0x06D2);
		}

		// class ANW_Court_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__NW_Court_BP__NW_Court_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_ForeSwipeB, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_ForeSwipeA, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_SideSwipe_RB, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_SideSwipe_RA, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_SideSwipe_LB, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_SideSwipe_LA, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_MidCourtSwipeB, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_MidCourtSwipeA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, TN_CourtReveal_BigSwipe_Cue, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Cube_SFX_BigSwipe, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, NW_Court_Center, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, DefaultSceneRoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_SFX_Move_ForeSwipe_3A1A8714410263DB0EC1D7910E1198AB, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_SFX_Move_SideSwipes_3A1A8714410263DB0EC1D7910E1198AB, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_SFX_Move_MidSwipe_3A1A8714410263DB0EC1D7910E1198AB, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_SFX_Move_BigSwipe_3A1A8714410263DB0EC1D7910E1198AB, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_Solid_Sweep_Brightness_3A1A8714410263DB0EC1D7910E1198AB, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_Court_Panel_Reveal_3A1A8714410263DB0EC1D7910E1198AB, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines_Line_Ring_Size_Curve_Grow_3A1A8714410263DB0EC1D7910E1198AB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines__Direction_3A1A8714410263DB0EC1D7910E1198AB, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, UnknownData_FDKS, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Lines, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Line_Ring_Reveal_Size, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Court_Reveal, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CourtRevealComplete, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CourtHideComplete, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CourtSpawnRevealed, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, UnknownData_JPLO, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, Play_Rate, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_01, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_02, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_03, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_04, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_05, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANW_Court_BP_C, CubeMove_06, 0x044C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANW_Court_BP_C, 0x0458);
		}

		// class ADoubleCross_ParticleTrigger_C : public AScramBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__DoubleCross_ParticleTrigger__DoubleCross_ParticleTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleCross_ParticleTrigger_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleCross_ParticleTrigger_C, DefaultSceneRoot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADoubleCross_ParticleTrigger_C, Kill_Time, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADoubleCross_ParticleTrigger_C, 0x0438);
		}

		// class ABP_TrophyAward_BB_ChallengeFinal_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BB_ChallengeFinal__BP_TrophyAward_BB_ChallengeFinal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BB_ChallengeFinal_C, 0x03D8);
		}

		// class ABP_TrophyAward_BW_ProBowling_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BW_ProBowling__BP_TrophyAward_BW_ProBowling_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BW_ProBowling_C, UberGraphFrame, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BW_ProBowling_C, 0x03C0);
		}

		// class UPlatformMaterialSwapComp_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__PlatformMaterialSwapComp__PlatformMaterialSwapComp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMaterialSwapComp_C, UnknownData_UKI6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMaterialSwapComp_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMaterialSwapComp_C, StaticMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMaterialSwapComp_C, PlatformMaterialDefinitions, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMaterialSwapComp_C, 0x0260);
		}

		// class UExploder_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Exploder__Exploder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExploder_C, 0x0028);
		}

		// class UExplodee_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Explodee__Explodee_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplodee_C, 0x0028);
		}

		// class ATennisScramble_SoccerBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_SoccerBall__TennisScramble_SoccerBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_SoccerBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_SoccerBall_C, 0x0388);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_MLBM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0050);
		}

		// class URI_Target_01_widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RI_Target_01_widget__RI_Target_01_widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URI_Target_01_widget_C, ScoreText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URI_Target_01_widget_C, 0x0218);
		}

		// class ATrainingBase_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__TrainingBase__TrainingBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, Audio_321_Countdown, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, Audio_ChallengeMusic_Looping, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, Audio_ChallengeMusic_1_Min, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, Root, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, InfoPanel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, Announcer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, GameElements, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, CountdownActor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, InstructionalText01, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, InstructionalText02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, SFX_StartOfMatchMusic, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, TargetScore, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, CurrentScore, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, AnnouncerAudioList, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, GameInstance, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, AnnouncerAnimBP, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, LoopingMusicDelay, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, UnknownData_2TKZ, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, TrainingComplete, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATrainingBase_C, UnlockUnlimitedTraining, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATrainingBase_C, 0x0411);
		}

		// class AStandLocationIndicator_C : public AScramPlayerTrigger
		TEST_METHOD(BlueprintGeneratedClass__StandLocationIndicator__StandLocationIndicator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, AttractParticleSystem, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, AttractAudio, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, DespawnAudio, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, SpawnAudio, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, DespawnParticleSystem, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, SpawnParticleSystem, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, Root, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, PlayerReachedPosition, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, PlayerEntered, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, ManualDestroy, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, UnknownData_CIUB, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, PlayerLeftPosition, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, SpawnComplete, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, UseAttractAudio, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, TickWhilePaused, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, Removing, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, RemoveTravelCapsule, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStandLocationIndicator_C, HideOnPlayerEnter, 0x03D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStandLocationIndicator_C, 0x03D6);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_0QGT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0060);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_HURW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x0088);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_GRNO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x0098);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_2JEE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0090);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_8AQ2, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0208);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RepOffset, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_SM2DMTFCGV, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_OGO06NF1YM, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00B8);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00B8);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_OUGV, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x0270);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_YAYS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_KC11, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_88AE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_II69, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_JGET, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03C0);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_49A1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_19TG, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0270);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_ZHQH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_EZ5M, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_2YFG, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_EOUJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_IEHX, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_T0AF, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_3370, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_EZYL, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_2L5B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_HZU3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A8);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_X12A, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_XIJI, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0098);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_TNRF, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_BWI3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class ATN_Shuttlecock_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Shuttlecock__TN_Shuttlecock_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Shuttlecock_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Shuttlecock_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Shuttlecock_C, 0x1160);
		}

		// class AScrambleEvent_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ScrambleEvent_Base__ScrambleEvent_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, Ball, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, ScrambleEvent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, SubsetBallClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, SubsetRacketClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScrambleEvent_Base_C, ScramSportManager, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScrambleEvent_Base_C, 0x0380);
		}

		// class ADB_Instrument_Base_C : public ADodgeballInstrument
		TEST_METHOD(BlueprintGeneratedClass__DB_Instrument_Base__DB_Instrument_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, UberGraphFrame, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, AudioBallHit, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Grow_Scale_B0F8A0DC4B690B959BF5D69DC73F0AB2, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Grow__Direction_B0F8A0DC4B690B959BF5D69DC73F0AB2, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, UnknownData_OKS7, 0x0D55);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Grow, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Shrink_Scale_EA95E14D4B3913E8ED8DD1939D3C6505, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Shrink__Direction_EA95E14D4B3913E8ED8DD1939D3C6505, 0x0D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, UnknownData_KWW0, 0x0D65);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, Shrink, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, InitialScale, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, UnknownData_MJKD, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, DefaultBallHItSFX, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, DefaultBallHItHardSFX, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, HardHitSpeedThreshold, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, MinimumHitSpeedThreshold, 0x0D94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, SFXOverrides, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, InitialPhysicsOff, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADB_Instrument_Base_C, OldHitPhysics, 0x0DA9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADB_Instrument_Base_C, 0x0DAA);
		}

		// class ABP_TrophyGlove_C : public AScramTrophyGlove
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyGlove__BP_TrophyGlove_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, UberGraphFrame, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, ChildActor, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, TrophyStartPosition, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, CanChange, 0x0ADC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, ShowingMenuInstrument, 0x0ADD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, UnknownData_8J6J, 0x0ADE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, DefaultColor_1, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyGlove_C, HoverColor, 0x0AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyGlove_C, 0x0B00);
		}

		// class AButton_Standard_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_Standard__Button_Standard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ScramBoxInteractable, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ParticleSystem, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, TrophyIcon, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioAway, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioScaleDown, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MeshDisabledButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ButtonCollision, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MeshBackground, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, FrameRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, SpinScaleRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioFilling, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioFilled, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioTouch, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioSpin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, AudioScaleUp, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, WidgetComponent, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MeshIcon, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MeshButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ButtonRoot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MeshFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Root, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_BackgroundThrob_Alpha_82D1AF2240F4D1C6C7D2448E96573F5F, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_BackgroundThrob__Direction_82D1AF2240F4D1C6C7D2448E96573F5F, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_HWRW, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_BackgroundThrob, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Unlock_Alpha_3D65117743922311D3684C89FC5C2161, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Unlock__Direction_3D65117743922311D3684C89FC5C2161, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_JVE2, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Unlock, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_SpinScale_Alpha_BD17B8A2408B1B41A9E1D38F42E8ACDE, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_SpinScale__Direction_BD17B8A2408B1B41A9E1D38F42E8ACDE, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_H6BC, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_SpinScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Scale_Alpha_A71F5BF64BF53468DEE821A870DCB4DC, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Scale__Direction_A71F5BF64BF53468DEE821A870DCB4DC, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_8AZX, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Scale, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Fill_Alpha_2E30B151441701DD221342B8284DA1EE, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Fill__Direction_2E30B151441701DD221342B8284DA1EE, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_UL9Z, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Fill, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_ButtonMove_Alpha_7D9C493B4E375A47630293AC955F8255, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_ButtonMove__Direction_7D9C493B4E375A47630293AC955F8255, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_0QSE, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_ButtonMove, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Rotate_Alpha_A7D2F00D487AD00E6EEC65B60BFA5E40, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Rotate__Direction_A7D2F00D487AD00E6EEC65B60BFA5E40, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_KGGD, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Timeline_Rotate, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ButtonPressed, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, TouchActors, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Overlapping, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Swapping, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_OFAI, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ShrinkFinish, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, SwapFinished, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Size, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_GP52, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Widget, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ToggledState, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_UJV5, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ButtonDataStart, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ButtonDataToggled, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ReEnableAfterToggle, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, StartToggled, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, SpinScale, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, NoScaling, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, RemoveFrame, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, DisableWhilePaused, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, FillOneWay, 0x04EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, BlueRed, 0x04EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Trophy, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_61J9, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, ID, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, InitialScale, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, DisableTouch, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_YB51, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Material, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Locked, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, CallEvents, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_EMLD, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Touched, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Untouched, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Hand, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnlockExtraDelay, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnlockingFocused, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_OANB, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Emitter, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, LoopThrob, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Rotated, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_625T, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, Player, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, MultiTouch, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, UnknownData_0E05, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, OffLerp, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, OnLerp, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_Standard_C, KeepThrobOnSwap, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_Standard_C, 0x056D);
		}

		// class UWaiting_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Waiting__Waiting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWaiting_C, Text, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWaiting_C, 0x0218);
		}

		// class ABW_Football_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Football__BW_Football_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Football_C, 0x0F01);
		}

		// class AGripSet_Instrument_LeftHand_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Instrument_LeftHand__GripSet_Instrument_LeftHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Instrument_LeftHand_C, 0x0370);
		}

		// class AButton_3dPanelImage_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_3dPanelImage__Button_3dPanelImage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, ButtonLoc, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, WidgetComp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, StaticMesh_Backing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, Root, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, PanelText, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, PanelImageButtonPressed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, ID, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, UnknownData_CCTQ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, ImageL, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, PanelImageButtonSwapComplete, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, Button, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, ImageR, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_3dPanelImage_C, Position, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_3dPanelImage_C, 0x03A9);
		}

		// class ASelectionDetailsMenu_C : public ADummyParent_C
		TEST_METHOD(BlueprintGeneratedClass__SelectionDetailsMenu__SelectionDetailsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, FarRightButtonPos, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, AvatarButtonPos, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, AvatarOffset, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, BottomRightButtonPos, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, BottomLeftButtonPos, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, BottomMidButtonPos, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, FarLeftButtonPos, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, LeftButtonPos, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MenuRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MenuScaleRoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, RightButtonPos, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, OffsetRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Root, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Timeline_MenuScale_Alpha_411D8E3E40322D6C1CFBB29EF192BB43, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Timeline_MenuScale__Direction_411D8E3E40322D6C1CFBB29EF192BB43, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_1ASD, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Timeline_MenuScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MenuType, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Sport, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ResultsType, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_K9UM, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, GameInstance, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, QuitToMainMenu, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ActiveSubmenu, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, StandLocator, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, OldMenuClear, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, SelectionComplete, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, SelectionMade, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, SinglePlayer_, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_M5Y5, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, SelectedGame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, Header, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, LeftButton, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, RightButton, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MenuOpened, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, QuittingMenu, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_GTB0, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ResultsData, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ResultsMenu, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, TrophyMenu, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, SaveData, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, NextButton, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, HomeButton, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MenuMessage, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ChooseSportMenu, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, friends, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, invites, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, FriendToInvite, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, FriendListMenu, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, FriendToJoin, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, LocalPlayer, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, CancelMatchMaking, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, QuitEarly, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_U51S, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, InfoButton, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, GameDetailsMenu, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, RotationOffset, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnlockNextTraining, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_6QNB, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, AvatarButton, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, InvitesUpdated, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UpdatingInvites, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, ChallengeResultState, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, WaitingForFriends, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MultiplayerQueued, 0x058B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, UnknownData_41HN, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, MatchmakingServerTimer, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, AnnouncerButton, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, DemoMode, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, RiftTurnAround, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASelectionDetailsMenu_C, paused, 0x05A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASelectionDetailsMenu_C, 0x05A3);
		}

		// class AMenu_QpDetails_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_QpDetails__Menu_QpDetails_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, BoxMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, BoxRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, ButtonPos0, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, BoxWidget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, StaticMesh_Back, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Widget, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Timeline_ScaleBox_Alpha_E390F4114B9989A96170CF828D1C5F25, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Timeline_ScaleBox__Direction_E390F4114B9989A96170CF828D1C5F25, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, UnknownData_76M3, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Timeline_ScaleBox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, TimelineMoveMessage_Alpha_262667794F0A9CAEE305A8A3F3FBF541, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, TimelineMoveMessage__Direction_262667794F0A9CAEE305A8A3F3FBF541, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, UnknownData_BPGF, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, TimelineMoveMessage, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, EditButtonPressed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, EditButtonSwapped, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Button, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, DetailsWidget, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, InfoWidget, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, Sport, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, UnknownData_JMV5, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, SpawnNavButtons, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_QpDetails_C, GameInstance, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_QpDetails_C, 0x03E0);
		}

		// class AMenu_PlayerCount_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_PlayerCount__Menu_PlayerCount_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Face4, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Face3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Face2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Face1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Backing, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Front, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, StaticMesh_Back, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, PanelPosR, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, PanelPosL, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Scene, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale4_Alpha_621DB665422DCA37A1247C964B8D2B8A, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale4__Direction_621DB665422DCA37A1247C964B8D2B8A, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, UnknownData_Y809, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale4, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale3_Alpha_36FF9F764D710A5A0EAA859D8F33D652, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale3__Direction_36FF9F764D710A5A0EAA859D8F33D652, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, UnknownData_3UB5, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Timeline_Scale3, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, Buttons, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_PlayerCount_C, GameInstance, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_PlayerCount_C, 0x03C0);
		}

		// class ABP_TrophyAward_TN_Unicorn_C : public ABP_TrophyAward_Tennis_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_Unicorn__BP_TrophyAward_TN_Unicorn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_Unicorn_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_Unicorn_C, VelocityThreshold, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_Unicorn_C, PitchThreshold, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_Unicorn_C, 0x03C0);
		}

		// class ABP_TrophyAward_BB_Invaders_C : public ABP_TrophyAward_BW_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_BB_Invaders__BP_TrophyAward_BB_Invaders_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_BB_Invaders_C, AlienDestroyRequirement, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_BB_Invaders_C, 0x03BC);
		}

		// class UBowlingAI_AnimBP_C : public UBowlingAIAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BowlingAI_AnimBP__BowlingAI_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_Root_F22149394467BB2CC93C10A4AC13E9F4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_EEBABCED49A465B5D6BFA38EF99B72CE, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_7BB9664340B53F6CE7CD1A82FC36726F, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_9AA3FDFD40649A0F0351DC8C48F6C9A9, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_61B18DB445D253DB7101FCAC8551C1E3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_EDA51FD24EC16FBBC964369F6E5CA7B3, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_FE03B8384628B79CF9B16CB1F4F3703D, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_EB8B4F9C4B30068B54816F83E042D86C, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_B988806144DB5CE18E2668ACF02F200B, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_EACFC1D84DE93E32FA319FA33A2586FD, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_57DAF0BD43DCD3FECF92A8B57FEA6BB5, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_0872B9F94ED25344F8584CBE056364D5, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_CDBCFCF141FA65775899F68B244711BC, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_68CB05AD4C881938D51B83B454E751C1, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_02ADEA164AC82F10BB9183B10D6D231D, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_TransitionResult_C1850B9E4C1661FE45BF69885D95E7FA, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_A457E16C42B05D8A290342B55C7F639B, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_A67F94C244F6729580AAF3A22C50750F, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_B91EA69242C65FB1B460E09B6F9B9186, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_7078634A4AAF3F1FAFFCE690DA3F4150, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_B3921393492B0D6792A07FA530C7B550, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_CDC22AAD4ECA80A295CEC5B30645E984, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_0C3507B946DCF2504EBCE68EFC92490B, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_4CF942C6491FF990F6BA4C9D6FC12274, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_5467F9084643E76E95D9A68372AD8B73, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_DAD507B846639C96FD62BB96DED3CB3D, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_902A11ED4558F31CE841BFB0DFA1D1FB, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_1FC0E6B4400A4A3D62386A9491A19D62, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_2F6FBE8047C3A2547B4A3AB0CD704DDA, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_1A81761949B06192CE81FAB143C6C5CB, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_900D3A8041CD305B765AF2AD28DECD24, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_A4E460EF4870D4B307538B9C466F6C5B, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_SequencePlayer_4BA94FBE4D4A7C9183EE8B93E801BBB6, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateResult_E6AD6D124CAE1E5E42BF9F9CAD9D163C, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAI_AnimBP_C, AnimGraphNode_StateMachine_A35BFCAD4536C91E0D7A35BED37A3DD7, 0x0FC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingAI_AnimBP_C, 0x10A0);
		}

		// class ATN_NetMatchScoreboard_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_NetMatchScoreboard__TN_NetMatchScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, VFXLocP2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, VFXLocP1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ScoreboardFront, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ShowHideDebug_Alpha_93F39B684A627519F312A5849030BAD0, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ShowHideDebug__Direction_93F39B684A627519F312A5849030BAD0, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UnknownData_DA11, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ShowHideDebug, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Text_Alpha_BFFC22FA46A0B1D86DED8EBB5F39C146, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Text__Direction_BFFC22FA46A0B1D86DED8EBB5F39C146, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UnknownData_VNAY, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Text, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Scores_Alpha_3D49AB7849F301B683CB82AA523A478A, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Scores__Direction_3D49AB7849F301B683CB82AA523A478A, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UnknownData_X032, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Reveal_Scores, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Pop_Scale_4504670641E94856768916A82DFE50E7, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Pop__Direction_4504670641E94856768916A82DFE50E7, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UnknownData_5M1T, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Timeline_Pop, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ScoreboardWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, IsSpectator, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, TraditionalScoring, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, ShowAdvantage, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, UnknownData_GEB7, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, AdText, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, NewTopText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, NewBottomText, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, SwappingText, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_NetMatchScoreboard_C, Open, 0x03E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_NetMatchScoreboard_C, 0x03EA);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class AScramSpectatorPawn_BP_C : public AScramSpectatorPawn
		TEST_METHOD(BlueprintGeneratedClass__ScramSpectatorPawn_BP__ScramSpectatorPawn_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, FadeOutQuad, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, Camera, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, Timeline_FadeOut_Alpha_F927B88C4A03B0A49ACCE78397DE270C, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, Timeline_FadeOut__Direction_F927B88C4A03B0A49ACCE78397DE270C, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, UnknownData_NRSE, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, Timeline_FadeOut, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, FadeOutMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, SpectatorFadeOutComplete, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, SelfControlling, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, UnknownData_ZCBD, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, SpectatorCamSelfControlEnd, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramSpectatorPawn_BP_C, SpectatorCamSelfControlStart, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramSpectatorPawn_BP_C, 0x0420);
		}

		// class ATN_Minigame_ReturnWall_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_ReturnWall__TN_Minigame_ReturnWall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, Scoreboards, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, GameElements, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, GameWall, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, LauncherLeft, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_ReturnWall_C, ButtonIcon, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_ReturnWall_C, 0x0370);
		}

		// class ABB_Train_01_Casual_C : public ABB_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Train_01_Casual__BB_Train_01_Casual_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UberGraphFrame, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_06, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_UmpireStrike, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog07, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_ComponentTryAgain, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_AnotherBall, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_20, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_19, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_GiveItATry, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_15, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_OkYouGotIt, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_14, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_13, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_12, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Good, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_09, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Dialog_08, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Audio_Nice, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, OriginalPitchingPreferences, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_PlayerCaughtFirstBall, 0x06B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UnknownData_PFIV, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, BallInGlove, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_PlayerHasBallThrowHand, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_PlayerHasThownBall, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_CatcherCaught1stBall, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_CatcherCaught2ndBall, 0x06C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_CatcherCaught1stStrike, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_Strike1, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Retrying, 0x06C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UnknownData_QSLT, 0x06C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, PauseBetweenVO, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, Tutorial_Strike2, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, ExtraPitchHint, 0x06CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UnknownData_PA6V, 0x06CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UmpireCallDelay, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, VoiceClips, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, TutorialStep5Complete, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UnknownData_PMCB, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, GrabButtonVOTimer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, CatcherThrownBalls, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, UnknownData_JA82, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, ThrowBallVOTimer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, TutorialStep3Complete, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Train_01_Casual_C, RestoreScrambleBallSetting, 0x06F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Train_01_Casual_C, 0x06FA);
		}

		// class ATN_Minigame_VelocityTests_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_VelocityTests__TN_Minigame_VelocityTests_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, UnknownData_EICK, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, ActivePayloads, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, LauncherSelectionButtons, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, LaucherChoiceMenu, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, AttachRacketScramble, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, UnknownData_56IE, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, BallOnly, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, RandomAll, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher2, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher3, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher4, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher5, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher7, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, Launcher8, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, SpeedMin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, SpeedMax, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_VelocityTests_C, FireDelay, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_VelocityTests_C, 0x0414);
		}

		// class UTextTwoWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TextTwoWidget__TextTwoWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextTwoWidget_C, PanelText0, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextTwoWidget_C, PanelText1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextTwoWidget_C, 0x0220);
		}

		// class ACMN_Trail_Normal_Slice_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Normal_Slice__CMN_Trail_Normal_Slice_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Normal_Slice_C, 0x037C);
		}

		// class ABB_Challenge_03_LittleLeague_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_03_LittleLeague__BB_Challenge_03_LittleLeague_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Crowd, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, PauseBetweenVO, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_InstrumentGrabbed, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_FirstTargetHit, 0x0595);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_SecondTargetHit, 0x0596);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_TrainingStarted, 0x0597);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_TrainingOver, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, UnknownData_SC50, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, TargetList, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_BallBeingLaunched, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_LauncherCanFire, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_FirstHitReminderPlayed, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, Tutorial_SecondHitReminderPlayed, 0x05B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, LaunchDelay, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, HitBall, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, LaunchTime, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, OriginalBattingPreferences, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, UnknownData_X3ZM, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_03_LittleLeague_C, PairedList, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_03_LittleLeague_C, 0x05D8);
		}

		// class ABreakTargetParent_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BreakTargetParent__BreakTargetParent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh8, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh7, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh6, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh5, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh3, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, TargetMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABreakTargetParent_C, StaticMeshList, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABreakTargetParent_C, 0x0398);
		}

		// class ATennisScramble_SpecificRacket_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_SpecificRacket__TennisScramble_SpecificRacket_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_SpecificRacket_C, 0x0380);
		}

		// class ATN_ChallengeBall_Blue_C : public ATN_ChallengeBall_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeBall_Blue__TN_ChallengeBall_Blue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Blue_C, UnknownData_OOWB, 0x1189);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Blue_C, UberGraphFrame, 0x1190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeBall_Blue_C, 0x1198);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_B2FU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_WQJB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_NGRQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_EJTU, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bAutoPlay, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_Q2H6, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bOverrideInstanceData, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_EN22, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x03D0);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x02A0);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00E0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_0B21, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, AdditionalEventReceivers, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_CT5X, 0x0818);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0868);
		}

		// class ABW_RollingPin_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_RollingPin__BW_RollingPin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_RollingPin_C, 0x0F01);
		}

		// class AGripSet_Glove_LeftHand_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Glove_LeftHand__GripSet_Glove_LeftHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Glove_LeftHand_C, 0x0370);
		}

		// class AMenu_Message_SevereError_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Message_SevereError__Menu_Message_SevereError_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, StaticMesh_Backing, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, Text_Render_Target, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, NewVar_1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_SevereError_C, HasInitialized, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Message_SevereError_C, 0x0359);
		}

		// class AGripSet_Instrument_RightHand_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Instrument_RightHand__GripSet_Instrument_RightHand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Instrument_RightHand_C, 0x0370);
		}

		// class ABB_Football_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Football__BB_Football_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Football_C, 0x1038);
		}

		// class ABB_FishBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_FishBall__BB_FishBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FishBall_C, UberGraphFrame, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_FishBall_C, SkeletalMesh, 0x1040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_FishBall_C, 0x1048);
		}

		// class ABW_GameSelector_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BW_GameSelector__BW_GameSelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, Buttons, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, MainMenu, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, GameActive, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, UnknownData_NXES, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, GameInstance, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, DebugMainMenu, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_GameSelector_C, AllowReset, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_GameSelector_C, 0x0369);
		}

		// class ATN_Train_07_EquipMatch_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_07_EquipMatch__TN_Train_07_EquipMatch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, UnknownData_4J5V, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, maxBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, DelayBetweenLauncherBalls, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, LoopCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, BallsMissed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, BallsRegistered, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, UnknownData_FDQC, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, LivingRoom_RightHanded_2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, LaunchTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, ActiveLaunchParameters, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, IntroDone, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, PlayerHasInstrument, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, PlayerHasBall, 0x065E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, FirstChargeBallHit, 0x065F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, ChargeBallDetected, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, InstrumentChange, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, UnknownData_94L2, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, FinalAnnouncerSequence, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_07_EquipMatch_C, AnnouncerClosingSequence, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_07_EquipMatch_C, 0x0679);
		}

		// class AMenuInstrument_BP_C : public AMenuInstrument
		TEST_METHOD(BlueprintGeneratedClass__MenuInstrument_BP__MenuInstrument_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, UberGraphFrame, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, StaticMesh, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, ScramBounceLighting, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, AudioBallHit, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Grow_Scale_61819E8F4E07DB4681EC91BBF006FC19, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Grow__Direction_61819E8F4E07DB4681EC91BBF006FC19, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, UnknownData_ZCLY, 0x0DF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Grow, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Shrink_Scale_DEDFDBCC4D6B1597559199BE40D459C2, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Shrink__Direction_DEDFDBCC4D6B1597559199BE40D459C2, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, UnknownData_4VPI, 0x0E05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Shrink, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, InitialScale, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, UnknownData_D5JE, 0x0E1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, DefaultBallHItSFX, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, DefaultBallHItHardSFX, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, HardHitSpeedThreshold, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, MinimumHitSpeedThreshold, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, SFXOverrides, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, InitialPhysicsOff, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, OldHitPhysics, 0x0E49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, UnknownData_NEPL, 0x0E4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, MotionBlurScale, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, GameInstance, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, ActivateLeftSFX, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, ActivateRightSFX, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Color1, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Color2, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, RightHandPointerOffset, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, LefthandPointerOffset, 0x0E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Rift_RightHandOffset, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenuInstrument_BP_C, Rift_LeftHandOffset, 0x0EB4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenuInstrument_BP_C, 0x0EC0);
		}

		// class ABB_Challenge_04_ChinaShop_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_04_ChinaShop__BB_Challenge_04_ChinaShop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, BallLauncher, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, WindowSpawner, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, LaunchSpeed_Min, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, LaunchSpeed_Max, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, PrimaryAudioList, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, GameRunning, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, UnknownData_WBKQ, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, LaunchDelay, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, SportManager, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, DeadSpeed, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, WindowScore, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_04_ChinaShop_C, LightFixtureScore, 0x05C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_04_ChinaShop_C, 0x05CC);
		}

		// class ATennisScramble_HockeyStick_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_HockeyStick__TennisScramble_HockeyStick_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_HockeyStick_C, 0x0380);
		}

		// class AMenu_FriendList_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_FriendList__Menu_FriendList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, MeshOfflineTop, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, MeshOfflineBottom, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, MeshOfflineMiddle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, WidgetOfflineComp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, OfflineParent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosWideBottom, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosWideMiddle, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosWideTop, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, WideButtons, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ArrowPosBottom, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ArrowPosTop, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, Arrows, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosBottomL, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosMiddleL, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosBottomR, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosMiddleR, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosTopL, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, LeftButtons, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonPosTopR, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, RightButtons, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, StaticMesh_Bottom, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, StaticMesh_Middle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, StaticMesh_Top, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, StaticMesh_Backing, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, WidgetNamesComp, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, Scene, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, Buttons, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ArrowButtons, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, FriendsList, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, InviteList, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, FriendsList_TestData, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, InviteList_TestData, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, FriendStatusList, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, DisplayIndex, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, UnknownData_4PIW, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, FriendsListWidget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, OfflineWidget, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonInviteTop, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonInviteMiddle, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonInviteBottom, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonJoinTop, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonJoinMiddle, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonJoinBottom, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, SelectionStarted, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ArrowUp, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ArrowDown, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, InvitePlayer, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, JoinPlayer, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, GameInstance, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ConnectionFailure, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, AllowPauseSet, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, UnknownData_GCXV, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonDeclineTop, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonDeclineMiddle, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, ButtonDeclineBottom, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, RefreshNeeded, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, UnknownData_I2BH, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, InviteListNew, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, FriendsListNew, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, RefreshTimer, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, SelectionMade, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, Refreshing, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, UnknownData_JVJN, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_FriendList_C, LocalPlayer, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_FriendList_C, 0x0570);
		}

		// class ATN_ChallengeBall_Base_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_ChallengeBall_Base__TN_ChallengeBall_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, UberGraphFrame, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, TN_Ball_Glow, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, MaxRacketImpulse_1, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, MinRacketImpulse_1, 0x116C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, CelebrationParticle, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, CelebrateScale, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, CelebrationSound, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_ChallengeBall_Base_C, LastType, 0x1188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_ChallengeBall_Base_C, 0x1189);
		}

		// class ABP_Trophy_BB_RunRule_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_RunRule__BP_Trophy_BB_RunRule_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_RunRule_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_RunRule_C, ScoreThreshold, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_RunRule_C, 0x03E4);
		}

		// class ABP_TrophyAward_TN_GrandSlam_C : public ABP_TrophyAward_TN_MatchCompleteBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_GrandSlam__BP_TrophyAward_TN_GrandSlam_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_GrandSlam_C, 0x03BA);
		}

		// class ABW_CenterScoreboard_C : public ABowlingCenterScoreboard
		TEST_METHOD(BlueprintGeneratedClass__BW_CenterScoreboard__BW_CenterScoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Box, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RightCarApproxLoc, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, LeftCarApproxLoc, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Audio_RaceLoop, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Timeline_TestingFinishLine_Alpha_FB6A87CC417F15E9BB00669E4F20428C, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Timeline_TestingFinishLine__Direction_FB6A87CC417F15E9BB00669E4F20428C, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_C7F5, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Timeline_TestingFinishLine, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimRedCar_Scale_0FC331A146A64495FDDE6C9E649EB4B3, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimRedCar__Direction_0FC331A146A64495FDDE6C9E649EB4B3, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_Y5EK, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimRedCar, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimBlueCar_Scale_ECBC1058453256C17CDBB280405E0F36, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimBlueCar__Direction_ECBC1058453256C17CDBB280405E0F36, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_R925, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, SpawnAnimBlueCar, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, ScaleStartingLine_Scale_9592E09F4D17E6EB1B2821A4C7DBD836, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, ScaleStartingLine__Direction_9592E09F4D17E6EB1B2821A4C7DBD836, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_YM6V, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, ScaleStartingLine, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateRedCarY_Alpha_241480C245094855A9F62B8EB681DD3E, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateRedCarY__Direction_241480C245094855A9F62B8EB681DD3E, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_S2CO, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateRedCarY, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateBlueCarY_Alpha_42F2830D4E8C8CA0C900E8AA767C470A, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateBlueCarY__Direction_42F2830D4E8C8CA0C900E8AA767C470A, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_NX4Z, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateBlueCarY, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriveAway_Alpha_CAA53B964ED3A3DD7A41D5B9878A5391, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriveAway__Direction_CAA53B964ED3A3DD7A41D5B9878A5391, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_C27F, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriveAway, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriveAway_Alpha_454847AA41D4E82BBFB8889886D12E6E, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriveAway__Direction_454847AA41D4E82BBFB8889886D12E6E, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_YTAM, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriveAway, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateStartingLine_Alpha_CBD30F5343564ED655FB4BB921819119, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateStartingLine__Direction_CBD30F5343564ED655FB4BB921819119, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_EWSG, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateStartingLine, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateFinishLine_Alpha_D8513A9D4B3B7E4C4566B69D9A4521AD, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateFinishLine__Direction_D8513A9D4B3B7E4C4566B69D9A4521AD, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_6O0Z, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, AnimateFinishLine, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriftTimeline_CarDrift_7124E77849688CFEAD0DED800FCE2168, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriftTimeline__Direction_7124E77849688CFEAD0DED800FCE2168, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_BUM2, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedCarDriftTimeline, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriftTimeline_CarDrift_141DCA414C31615EC2EAFFAE488601C9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriftTimeline__Direction_141DCA414C31615EC2EAFFAE488601C9, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_6WO6, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueCarDriftTimeline, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, StartRoad_RoadSpeed_57B5F01041DED99992587EA39C0E8845, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, StartRoad__Direction_57B5F01041DED99992587EA39C0E8845, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_3Z63, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, StartRoad, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, ScoreboardWidget, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, TimerActive, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_ST2Y, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, TimerSecondsRemaining, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RoadMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialStartLineX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialFinishLineX, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialCarStartX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CurrentBlueCarX, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CurrentRedCarX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CurrentRoadSpeed, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, DistanceTraveled, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialBlueCarStartY, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialRedCarStartY, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CarInitialScale, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CurrentBlueBlurX, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CurrentRedBlurX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialBlurX, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialBlueBlurY, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialRedBlurY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, CarYMovementSpeed, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, StartLineScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_6FXR, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, TimerChange, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, GameInstance, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, FinalFinishLineX_Normal, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, FinalFinishLineX_Training, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, FinalFinishLineX, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, TrainingTimer, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_RJLV, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, PositionVsTime, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, PositionVsRelativeScore, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, BlueScore, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, RedScore, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, TimerMaxSeconds, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, ExternalDecriment, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_MGX8, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialBlurWidth, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, InitialTrainingFinishLineX, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, FinalTrainingFinishLineX, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, Ruleset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, UnknownData_H77N, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_CenterScoreboard_C, WaitCounter, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_CenterScoreboard_C, 0x04F4);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_ICUT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class ATennisScramble_ProRacket_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_ProRacket__TennisScramble_ProRacket_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_ProRacket_C, 0x0380);
		}

		// class UErrorMessageWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ErrorMessageWidget__ErrorMessageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UErrorMessageWidget_C, ErrorText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UErrorMessageWidget_C, Image_1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UErrorMessageWidget_C, 0x0220);
		}

		// class UTN_NetMatchScoreboard_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TN_NetMatchScoreboard_Widget__TN_NetMatchScoreboard_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, DebugText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, GameScoreLeft, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, GameScoreParent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, GameScoreRight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, GreenBox, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, MessageTextTop, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, RedBox, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, TextBlock_Bottom, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTN_NetMatchScoreboard_Widget_C, TextParent, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTN_NetMatchScoreboard_Widget_C, 0x0258);
		}

		// class ABW_Ball_Base_C : public ABowlingBall
		TEST_METHOD(BlueprintGeneratedClass__BW_Ball_Base__BW_Ball_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UberGraphFrame, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ScramTimeLine, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, AudioRoll, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, BlobShadow, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, DebugPrintHitSpeed, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, DisableScramble, 0x0DA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, HitByInstrument, 0x0DA2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, PreviousHitByInstrument, 0x0DA3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, BallHitNet, 0x0DA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_85YS, 0x0DA5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SpawnVFX, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SpawnVFXScale, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_N5JT, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SpawnSFX, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, DespawnSFX, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ImbuedVFX, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ImbuedParticle, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ImbuedVFXScale, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_FAJ0, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedHitVFX, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedVFX, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedParticle, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedVFXScale, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_XI1Q, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedHitSFX, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SliceVFX, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SliceParticle, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedSliceParticle, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SliceVFXScale, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_2T1G, 0x0E44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SliceSFX, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedSliceVFX, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ChargedSliceVFXScale, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_XOI9, 0x0E64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, CurrentTrail, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, PinHitSFX, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, TrailMap, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, TrailScalar, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, SpawnWithDespawnFX, 0x0ECC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_A2XY, 0x0ECD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, BoundVolumeScalar, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_D4LJ, 0x0ED4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, Alley, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, Scored, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, UnknownData_VAMS, 0x0EE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ThrowChanged, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, BounceSound, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Ball_Base_C, ShouldScaleUpOnSpawn, 0x0F00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Ball_Base_C, 0x0F01);
		}

		// class AScramPlayerHand_BP_Left_C : public AScramPlayerHand_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ScramPlayerHand_BP_Left__ScramPlayerHand_BP_Left_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_Left_C, UnknownData_9VFZ, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramPlayerHand_BP_Left_C, UberGraphFrame, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramPlayerHand_BP_Left_C, 0x0460);
		}

		// class ABB_Minigame_PracticeSportManager_C : public AScramSportManagerBaseball
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_PracticeSportManager__BB_Minigame_PracticeSportManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, RunnerHomeLoc, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, ThirdBaseLoc, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, SecondBaseLoc, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FirstBaseLoc, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, RunnerSpawnLoc, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, OutfieldLocusLoc, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLocRF, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLocSS, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLocCF, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLocC, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLocLF, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderLoc1B, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, InstrumentSelectorRightLoc, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, InstrumentSelectorLeftLoc, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, InfieldEdgeMarker, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, DoubleTripleMarker, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, OutfieldFenceEdge, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, OutfieldFenceCenter, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, BatterLoc, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitcherLoc, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, StaticMesh, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, IsLocalPlayerVisitingTeam, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UnknownData_UJP2, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, GameElements, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, strikeZone, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, GameInstance, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, GameSelector, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, EquipmentSet, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, MinigameSpawner, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchingLocation, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, CatcherActor, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, LocalHelper, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PreferredHand, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, BattingTargetActor, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, InstrumentSelector, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchingMinArea, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchingMaxArea, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, IsPracticeSportManager, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UnknownData_T9XC, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitcherReady, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitcherPitched, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchHit, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, SwingAndMiss, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchedBall, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchedStrike, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, CatcherThrow, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitCaught, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitFoul, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitSingle, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitDouble, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitTriple, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, HitHomerun, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, ActiveBall, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, LocalPositionArray, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, ValidHit, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, InvalidHit, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, DisableSelectorAutoVisibility, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UnknownData_FHFM, 0x0951);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, LocalMaterial, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, FielderList, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitchingPropManager, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, AIBatterClass, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, AllowAIFielders, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, AllowAIBatter, 0x0981);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, AllowAIPitcher, 0x0982);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, AllowAICatcher, 0x0983);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UnknownData_THZW, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, RunnerHome, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, BallLocation, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, BasesLoaded, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, WaitForRunners, 0x09A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, UnknownData_UYAP, 0x09A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, RunnersReady, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, PitcherClass, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_PracticeSportManager_C, Fielders, 0x09C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_PracticeSportManager_C, 0x09D0);
		}

		// class ABB_PassNPlay_ScrambleTargetGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_PassNPlay_ScrambleTargetGroup__BB_PassNPlay_ScrambleTargetGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Icon_Left, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Icon_Right, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateInstrument_Alpha_CEE6B71F406B03232C6EB9BA364AE23A, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateInstrument__Direction_CEE6B71F406B03232C6EB9BA364AE23A, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, UnknownData_QN9X, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateInstrument, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateBall_Alpha_3ABA8990476C0BA44B5DBE8E4C0231E8, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateBall__Direction_3ABA8990476C0BA44B5DBE8E4C0231E8, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, UnknownData_E2P9, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, RotateBall, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, ActiveTargets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, TennisManager, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, ManagedGamePaused, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, UnknownData_Z3NL, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Icon_Instrument, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Icon_Ball, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_PassNPlay_ScrambleTargetGroup_C, Settings, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_PassNPlay_ScrambleTargetGroup_C, 0x0399);
		}

		// class UMessageProgressWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageProgressWidget__MessageProgressWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageProgressWidget_C, Image_2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageProgressWidget_C, ProgressBar_1, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageProgressWidget_C, 0x0220);
		}

		// class UButton_TextOptionWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_TextOptionWidget__Button_TextOptionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_TextOptionWidget_C, Image_SelectionBackground, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_TextOptionWidget_C, PanelText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_TextOptionWidget_C, SelectionText, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_TextOptionWidget_C, 0x0228);
		}

		// class ACMN_CelShade_HighlightDirection_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CMN_CelShade_HighlightDirection_BP__CMN_CelShade_HighlightDirection_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_CelShade_HighlightDirection_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_CelShade_HighlightDirection_BP_C, ShadowArrow, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_CelShade_HighlightDirection_BP_C, HighlightArrow, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_CelShade_HighlightDirection_BP_C, 0x0340);
		}

		// class ABowlingAvatar_BP_C : public ABowlingAvatar
		TEST_METHOD(BlueprintGeneratedClass__BowlingAvatar_BP__BowlingAvatar_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar_BP_C, UberGraphFrame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar_BP_C, Timeline_0_Alpha_97DA473B4C6D05E5BD88CF9F27EBDCD5, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar_BP_C, Timeline_0__Direction_97DA473B4C6D05E5BD88CF9F27EBDCD5, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar_BP_C, UnknownData_80WP, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingAvatar_BP_C, Timeline_1, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingAvatar_BP_C, 0x0408);
		}

		// class UFireAndForget_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__FireAndForget__FireAndForget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFireAndForget_C, 0x0028);
		}

		// class ATennisAvatar_BP_C : public ATennisAvatar
		TEST_METHOD(BlueprintGeneratedClass__TennisAvatar_BP__TennisAvatar_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, UberGraphFrame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, ScramBounceLighting, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, Timeline_ScaleUp_Alpha_CCE23B064CEA4DBCF9BE6BAE7C5A142E, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, Timeline_ScaleUp__Direction_CCE23B064CEA4DBCF9BE6BAE7C5A142E, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, UnknownData_WWYU, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisAvatar_BP_C, Timeline_ScaleUp, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisAvatar_BP_C, 0x0430);
		}

		// class ATN_PassNPlay_ScrambleTargetGroup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_PassNPlay_ScrambleTargetGroup__TN_PassNPlay_ScrambleTargetGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, Icon_Ball_Left, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, Icon_Instrument_Right, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, Scene, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateInstrument_Alpha_5452CF164E487132CCFD8AB16D6BB91A, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateInstrument__Direction_5452CF164E487132CCFD8AB16D6BB91A, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, UnknownData_PC80, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateInstrument, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateBall_Alpha_14259DC448450D97F8E1BB9CD1B6E125, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateBall__Direction_14259DC448450D97F8E1BB9CD1B6E125, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, UnknownData_3ZJ0, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, RotateBall, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, ActiveTargets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, TennisManager, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, ManagedGamePaused, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, UnknownData_RPWL, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, Icon_Instrument, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_PassNPlay_ScrambleTargetGroup_C, Icon_Ball, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_PassNPlay_ScrambleTargetGroup_C, 0x0398);
		}

		// class ABB_GoldenBat_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_GoldenBat__BB_GoldenBat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_GoldenBat_C, 0x0FC8);
		}

		// class ABP_Trophy_BB_Sniper_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Sniper__BP_Trophy_BB_Sniper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Sniper_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Sniper_C, 0x03E0);
		}

		// class ABB_Multiplayer_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Multiplayer__BB_Multiplayer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, GameInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, HubButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, GameMode, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, HasClient, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, UnknownData_BHUD, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, GameStartButtons, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, StartMenu, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, GameManager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Multiplayer_C, BaseballEndGameButton, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Multiplayer_C, 0x0380);
		}

		// class ABaseballAIFielder_Normal_Blueprint_C : public ABaseballAIFielder_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIFielder_Normal_Blueprint__BaseballAIFielder_Normal_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIFielder_Normal_Blueprint_C, 0x054A);
		}

		// class ABaseballAIBatter_Hard_Blueprint_C : public ABaseballAIBatter_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIBatter_Hard_Blueprint__BaseballAIBatter_Hard_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIBatter_Hard_Blueprint_C, 0x0ED2);
		}

		// class ACMN_ParticleEmitter_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__CMN_ParticleEmitter__CMN_ParticleEmitter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, ParticleSystem, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, DefaultSceneRoot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, Template, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, AutoActivate, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACMN_ParticleEmitter_C, DestroyOnFinish, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_ParticleEmitter_C, 0x036A);
		}

		// class ALaneEndBallTrigger_C : public ABowlingBallTrigger
		TEST_METHOD(BlueprintGeneratedClass__LaneEndBallTrigger__LaneEndBallTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaneEndBallTrigger_C, UberGraphFrame, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaneEndBallTrigger_C, DefaultSceneRoot, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaneEndBallTrigger_C, TriggeredByBall, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALaneEndBallTrigger_C, Alley, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALaneEndBallTrigger_C, 0x0448);
		}

		// class AMenu_Confirmation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Confirmation__Menu_Confirmation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, StaticMesh_Back, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, Widget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, ButtonPos1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, ButtonPos0, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, LocText, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, SelectionStarted, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, SelectionCompleted, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, Button0, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, Button1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, Red, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, UnknownData_STKE, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Confirmation_C, OverrideText, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Confirmation_C, 0x03B0);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0330);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_JLGR, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x05CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_VG2V, 0x05CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_LKK2, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0610);
		}

		// class ABB_ChallengeTarget_C : public ABallTrigger_C
		TEST_METHOD(BlueprintGeneratedClass__BB_ChallengeTarget__BB_ChallengeTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, UnknownData_J4M0, 0x045E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, ScramTrajectoryInfluencerRegion, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, ParticleSystem, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, Frame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, ScramTimeLine, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, Emission, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, IsBonus, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, UnknownData_1XB0, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, OnTriggeredHit, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, ScoreSound, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_ChallengeTarget_C, ScoreValue, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_ChallengeTarget_C, 0x04BC);
		}

		// class ABB_Challenge_02_DeadEye_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_02_DeadEye__BB_Challenge_02_DeadEye_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, LaunchTarget, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, Launcher, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, StaticMesh, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, PrimaryAudioList, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, ThowingGlove, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, CatchersMitt, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, TargetSpawner, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, BallLauncher, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, IsGameRunning, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, UnknownData_SUV6, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, LaunchDelay, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, BallQeue, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, RegularTargetScore, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, GoldTargetBonus, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, BonusClearScore, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, PatternIndex, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, SetIsChanging, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, UnknownData_15GY, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_02_DeadEye_C, BonusBlueprint, 0x0600);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_02_DeadEye_C, 0x0608);
		}

		// class ABP_TrophyAward_TN_Winner_C : public ABP_TrophyAward_TN_MatchCompleteBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_Winner__BP_TrophyAward_TN_Winner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_Winner_C, 0x03BA);
		}

		// class ABP_TrophyAward_TN_Fullspeed_C : public ABP_TrophyAward_Tennis_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_Fullspeed__BP_TrophyAward_TN_Fullspeed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_TN_Fullspeed_C, UberGraphFrame, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_Fullspeed_C, 0x03B8);
		}

		// class UBB_Scoreboard_Training_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_Scoreboard_Training_Widget__BB_Scoreboard_Training_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, CenterInfoText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, CenterTextParent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, CenterTimerText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, ChallengeScore, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, ChallengeTimer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, DistanceText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Training_Widget_C, MinigameDistanceParent, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_Scoreboard_Training_Widget_C, 0x0250);
		}

		// class ABaseballAIPitcher_Blueprint_C : public AScramBaseballPitcherAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIPitcher_Blueprint__BaseballAIPitcher_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, UberGraphFrame, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, Glove, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, HomeTeam, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, UnknownData_B8NR, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, LookRandomized, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, PresetLook, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, RandomizeAvatar, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIPitcher_Blueprint_C, UseRemotePlayerLook, 0x06D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIPitcher_Blueprint_C, 0x06D2);
		}

		// class ARI_FloorCollision_C : public AScramTarget
		TEST_METHOD(BlueprintGeneratedClass__RI_FloorCollision__RI_FloorCollision_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_FloorCollision_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_FloorCollision_C, FloorCollision, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_FloorCollision_C, Impacts, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_FloorCollision_C, BallLanded, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_FloorCollision_C, BB_BallLanded, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARI_FloorCollision_C, 0x0398);
		}

		// class ATN_Train_02_TBallServing_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_02_TBallServing__TN_Train_02_TBallServing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, UnknownData_DWM6, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, maxBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, DelayBetweenLauncherBalls, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, LoopCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, BallsMissed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, BallsRegistered, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, UnknownData_ZTDO, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, LivingRoom_RightHanded_2, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, LaunchTargets, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, ActiveLaunchParameters, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, PracticeShotDone, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, UnknownData_MKZQ, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, Text_Instructions01, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, BallInPlay, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_02_TBallServing_C, CountDownComplete, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_02_TBallServing_C, 0x0681);
		}

		// class ATennisScramble_PingPongBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_PingPongBall__TennisScramble_PingPongBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_PingPongBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_PingPongBall_C, 0x0388);
		}

		// class ABattingCage_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BattingCage_BP__BattingCage_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingCage_BP_C, ScramBounceLighting, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingCage_BP_C, LauncherBarrierMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingCage_BP_C, BattingCageMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABattingCage_BP_C, DefaultSceneRoot, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABattingCage_BP_C, 0x0348);
		}

		// class UHeader_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Header_Widget__Header_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeader_Widget_C, HeaderText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeader_Widget_C, 0x0218);
		}

		// class ATN_Minigame_PracticeTargets_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Minigame_PracticeTargets__TN_Minigame_PracticeTargets_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, Streak, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, UnknownData_NS5L, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, StreakActor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, TargetHitReward, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, BullseyeHitReward, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, score, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, MiddleHitReward, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, Scoreboards, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, GameElements, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, ActivePayloads, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, LauncherSelectionButtons, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, LaucherChoiceMenu, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, LauncherLeft, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Minigame_PracticeTargets_C, LauncherRight, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Minigame_PracticeTargets_C, 0x03B0);
		}

		// class UChooseSportsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChooseSportsWidget__ChooseSportsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseSportsWidget_C, SubTitleText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseSportsWidget_C, TextBaseball, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseSportsWidget_C, TextBowling, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseSportsWidget_C, TextTennis, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChooseSportsWidget_C, 0x0230);
		}

		// class ACMN_Trail_Normal_Flat_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Normal_Flat__CMN_Trail_Normal_Flat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Normal_Flat_C, 0x037C);
		}

		// class ABB_BeachBall_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BeachBall__BB_BeachBall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BeachBall_C, 0x1038);
		}

		// class AScramCameraCover_BP_C : public AScramCameraCover
		TEST_METHOD(BlueprintGeneratedClass__ScramCameraCover_BP__ScramCameraCover_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScramCameraCover_BP_C, UberGraphFrame, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScramCameraCover_BP_C, 0x03A0);
		}

		// class AButton_SideOption_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_SideOption__Button_SideOption_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, StaticMesh, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, ButtonLocRight, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, ButtonLocLeft, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, WidgetComp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, Root, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, PanelLocText, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, OptionChanged, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, Red, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, UnknownData_NC2E, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, LeftButton, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, RightButton, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, RightSelected, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, LeftIcon, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, UnknownData_RH4L, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, OptionChanging, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_SideOption_C, ExternallyDisabled, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_SideOption_C, 0x03A1);
		}

		// class ABB_BaseballBatWood_C : public ABB_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_BaseballBatWood__BB_BaseballBatWood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_BaseballBatWood_C, 0x0FC8);
		}

		// class ATennis_Gameplay_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Tennis_Gameplay__Tennis_Gameplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennis_Gameplay_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennis_Gameplay_C, SportDebugMenu, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennis_Gameplay_C, PostProcessVolume_Rift_ExecuteUbergraph_Tennis_Gameplay_RefProperty, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennis_Gameplay_C, PostProcessVolume_RiftS_4_ExecuteUbergraph_Tennis_Gameplay_RefProperty, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennis_Gameplay_C, 0x0350);
		}

		// class AGripSet_Football_C : public AScramGripSet
		TEST_METHOD(BlueprintGeneratedClass__GripSet_Football__GripSet_Football_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGripSet_Football_C, 0x0370);
		}

		// class UBatterAvatar_AnimBP_C : public UBattingAvatarAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BatterAvatar_AnimBP__BatterAvatar_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_Root_5D5531634D7770A2E6EB3080A0D00C4A, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_36E2A4E54B02504CC8D864A238CF79AE, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_37F051AF4EFC347E4C6A7AAEE46EB81B, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_6CEB92BB49FE447D70DA57AC9D5D0BA3, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_B21478034ACBCB44E94DE48C4E2FAC9F, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_BF881CDC44093E8F0A5DCC9C2EF890D3, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_F61AFE85429377E40119F2BE4C51CC3E, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_1E5570FA4963303D9C86799B05649565, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_TransitionResult_FCFE6F934F7BB1FCACDF56AFC7E10E34, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_542C91424DD64D4D991C9B9CE32FCDA0, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_3A39ACE640318C0FA6BFB0967976F26B, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_92C0D5204A917C5A81362381A372E2DE, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_9CDD37174625C25B4E1680A2E08F54C6, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_636724134C57177082D0B3B9BFFDE519, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_64EA298A4D8BD14C0C298FA4B2CA8DE7, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_CD3CAD77405557A28E6E4490D7F89992, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_3179C6EF429E8519CB6653A61C45DF30, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_DAD5D4DE41A4A8B843DB06B680D92600, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_7B6747514DD8A8F758473B9ED5BB9C49, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_E3F7F7AE4C9776A65D9921B6E7B84B50, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_DED721724718F5B65D95BF842F81F675, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_14785E9A4451702E1E9B61969544FEC1, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_6EDF73C145182413AB5FD3B0BE5BF624, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_92745FF5492EB6698733D7BB6D97289D, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ModifyBone_B141E608473C3A1A011B26B3CF87ED2E, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_DE78D2884E68741B67C95A8BF1BAEF59, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_LocalToComponentSpace_0587E04F4183FDF0D61326A523D6D0B2, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_93D1DB4346A0E0A1A1566F951DEF962B, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateResult_F69A9CF2439AD6CB0FB0CD8F2A8FCB8C, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatterAvatar_AnimBP_C, AnimGraphNode_StateMachine_6155DE1C4A1300C607A556B870343999, 0x13E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBatterAvatar_AnimBP_C, 0x14C8);
		}

		// class AMenu_Message_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Message__Menu_Message_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, WidgetProgress, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, StaticMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, StaticMesh_Backing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, Widget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, ButtonPos, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, Text, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, MessageWidget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, TimerDisplay, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, Count, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Message_C, ProgressWidget, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Message_C, 0x0390);
		}

		// class ABB_Minigame_Pitching_Breakout_C : public ABB_Minigame_Pitching_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_Breakout__BB_Minigame_Pitching_Breakout_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Breakout_C, UnknownData_ZNFS, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Breakout_C, UberGraphFrame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Breakout_C, Influencer, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Breakout_C, BreakoutDelayBeforeThrow, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Breakout_C, BreakoutDelayAfterThrow, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_Breakout_C, 0x0460);
		}

		// class ATennisScramble_Frisbee_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_Frisbee__TennisScramble_Frisbee_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_Frisbee_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_Frisbee_C, 0x0388);
		}

		// class ATennisScramble_SpecificBall_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_SpecificBall__TennisScramble_SpecificBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_SpecificBall_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_SpecificBall_C, 0x0388);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class UBowlingAvatar_AnimBP_C : public UBowlingAvatarAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BowlingAvatar_AnimBP__BowlingAvatar_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_Root_AEFB3F2B446814DE6604D3AF6DE2D7E9, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_D02191BF4999519DACB6CBAB52AFDFCC, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_A924C80047D591C7AFEC55AAD1451915, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_40AAA74240CF5CB38ADA0E9CCBFCA7D2, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_9BB2E7BA4239959451DC86B4D0DEFBC0, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_5BE308824D28E5A86A95D5ABD7451122, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_TransitionResult_34053413457296EC3821D3AF3A0F0DDD, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_A688DB584FF2F98D1740798B9209B987, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_StateResult_3C3B70744853E92E60BC869915E55EA1, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_E135D6534A68459C4FAEBABA2B35DAA2, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_StateResult_5522A45A4BF7411EF34D5898DBA78B83, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_0C5BDD534BB13BFC8F0ED5B4CB024191, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_StateResult_DDF2A65C45845C7E2C230FAB6E6625E3, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ModifyBone_2E1DF13C4DED669BD8D5A08D7BF8CAB1, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ModifyBone_530629BC423F00452842D5848D293AD4, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ModifyBone_568935E04ECCFE021EFBB884E74A983F, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ModifyBone_917FD76D42B74D15256044A134AA306C, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ModifyBone_8871E8914683CB852D528F9574031DDA, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_8D63E4714A2538F53E3EB3AFEAD58CF9, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_LocalToComponentSpace_DEDDEC104A4AC9F78EF0419DAD60FF0D, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_SequencePlayer_342543194BDCF45086AA06BAB927C552, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_StateResult_6B11D4A54A888E335B84BBAECC04CC68, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBowlingAvatar_AnimBP_C, AnimGraphNode_StateMachine_969CCC464A07570696611583983DE4BC, 0x1060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBowlingAvatar_AnimBP_C, 0x1140);
		}

		// class UIntroSetupWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__IntroSetupWidget__IntroSetupWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntroSetupWidget_C, SubHeaderText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntroSetupWidget_C, 0x0218);
		}

		// class AMenu_Feathered_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Menu_Feathered__Menu_Feathered_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, PanelPosR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, PanelRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, ButtonPos, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, PanelPosL, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Scene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateLeft_alpha_C6DFFD4D403AAA02540E05875AB3A259, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateLeft__Direction_C6DFFD4D403AAA02540E05875AB3A259, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, UnknownData_LI6I, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateLeft, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateRight_alpha_41BB1AC94E4126CE083841990081B362, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateRight__Direction_41BB1AC94E4126CE083841990081B362, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, UnknownData_M387, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Timeline_RotateRight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, ArrowButtons, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Button, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, ButtonPressed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, SelectionConfirmed, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Textures, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Texts, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, CurrentIndex, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, UnknownData_CUWU, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, DynamicMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, FeatherWidget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, InitialWidgetScale, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, UnknownData_HR8Q, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Panel0, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Panel1, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Panel2, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Panel3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMenu_Feathered_C, Panel4, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMenu_Feathered_C, 0x0420);
		}

		// class UBB_DeadeyeChallenge_BonusNotification_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_DeadeyeChallenge_BonusNotification__BB_DeadeyeChallenge_BonusNotification_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_DeadeyeChallenge_BonusNotification_C, StringText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_DeadeyeChallenge_BonusNotification_C, 0x0218);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__PacketHandler__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class ABP_Trophy_BB_Slugger_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Slugger__BP_Trophy_BB_Slugger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Slugger_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Slugger_C, 0x03E0);
		}

		// class ABP_Trophy_BB_Dynasty_C : public ABP_TrophyAward_BaseballBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Trophy_BB_Dynasty__BP_Trophy_BB_Dynasty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Trophy_BB_Dynasty_C, UberGraphFrame, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Trophy_BB_Dynasty_C, 0x03E0);
		}

		// class ABP_TrophyAward_MatchMaker_C : public ABP_TrophyAward_Tennis_InstrumentHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_MatchMaker__BP_TrophyAward_MatchMaker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_MatchMaker_C, UberGraphFrame, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_MatchMaker_C, 0x03B8);
		}

		// class UBB_Scoreboard_Large_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_Scoreboard_Large_Widget__BB_Scoreboard_Large_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, BB_Scoreboard_Bases, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, CenterInfoText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, CenterTextParent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, CenterTimerText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, DistanceText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightBall1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightBall2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightBall3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightBall4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightOut1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightOut2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightOut3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightStrike1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightStrike2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, LightStrike3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, MinigameDistanceParent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, OutText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, ParentBall2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, ParentBall3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, ParentBall4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, ParentStrike2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, ParentStrike3, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, PlayerName_P1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, PlayerName_P2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Score_P1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Score_P2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, TextBlock_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, TextBlock_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Color_Red, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Color_Blue, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Color_White, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_Large_Widget_C, Color_Green, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_Scoreboard_Large_Widget_C, 0x0338);
		}

		// class ATennisNet_BP_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__TennisNet_BP__TennisNet_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, TennisBox, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, SFX_NetMove_R, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, SFX_NetMove_L, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, ScramBounceLighting, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, TN_CMN_Net_Frame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, TN_CMN_Net_Transparent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, Root, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, Timeline_HideNet_ZPosition_E72227334CB2B2DE6A08DDBC9107E3B0, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, Timeline_HideNet__Direction_E72227334CB2B2DE6A08DDBC9107E3B0, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, UnknownData_ZX2S, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, Timeline_HideNet, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, NetHidden, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, UnknownData_ZV2H, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisNet_BP_C, InitialPosition, 0x039C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisNet_BP_C, 0x03A8);
		}

		// class ATN_GolfClub_C : public ATN_Instrument_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_GolfClub__TN_GolfClub_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_GolfClub_C, SwingParticleSystem_1, 0x0FB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_GolfClub_C, 0x0FC0);
		}

		// class ABW_Train_04_ScrambleLanes_C : public ABW_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_04_ScrambleLanes__BW_Train_04_ScrambleLanes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, UnknownData_OVP5, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, UberGraphFrame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, PracticeOver, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, UnknownData_E12U, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, TutorialBallTable, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, SplitPins, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_04_ScrambleLanes_C, TrainingLaneRefList, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_04_ScrambleLanes_C, 0x04C8);
		}

		// class ABW_Train_Base_C : public ATrainingBase_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Train_Base__BW_Train_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, UnknownData_I8HA, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, Audio_Countdown, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, Audio_BowlingMusic, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, LevelWonz, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, UnknownData_ROEX, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, TutorialAlley, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, TutorialBallReturn, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, TutorialPinSetter, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, UnusedAlley, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, CenterScoreboard, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, ID, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, UnknownData_XY1U, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, PracticeBallClass, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, DisableLaneChanges, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Train_Base_C, TrainingOutcome, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Train_Base_C, 0x0472);
		}

		// class ABW_Bomb_C : public ABW_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Bomb__BW_Bomb_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, UnknownData_ERKJ, 0x0F01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, UberGraphFrame, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, Audio_LoopingFuse, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, Fuse_VFX, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplodeeObjectTypes, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ActorsToIgnore, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplosionRadius, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplosionLinearForce, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplosionAngularForce, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, HitExplodee, 0x0F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, UnknownData_KX74, 0x0F4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplosionSFX, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, ExplosionVFXScale, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, HadBowlingAuthority, 0x0F5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Bomb_C, Exploded, 0x0F5D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Bomb_C, 0x0F5E);
		}

		// class UMessageWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageWidget__MessageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidget_C, PanelText, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageWidget_C, 0x0218);
		}

		// class ABB_Minigame_Pitching_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Pitching_Base__BB_Minigame_Pitching_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, GameInstance, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, strikeZone, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, Strikes, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, Balls, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, PitchTarget, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, ShowBallCount, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, ResetScoreOnBall, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UpdateScoreBoard, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UnknownData_3A44, 0x036B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, BallLauncher, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, delayBeforeThrow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UnknownData_RO16, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, CurrentBallInPlay, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, EquipmentSet, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, EquipmentGrabbed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, DelayAfterThrow, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, LauncherCanLaunch, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UnknownData_ODNN, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, TargetsHit, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UpdateTargetsHitScore, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UnknownData_L7XR, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, CurrentBallMaxBounces, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, CurrentBallBounces, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, Player, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, UnknownData_3YPD, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, PitchingLocation, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, PitchingMinArea, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, PitchingMaxArea, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, PitchingPropManager, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Pitching_Base_C, CurrentBallRollingPitch, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Pitching_Base_C, 0x0441);
		}

		// class ACMN_Trail_Charge_Flat_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__CMN_Trail_Charge_Flat__CMN_Trail_Charge_Flat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACMN_Trail_Charge_Flat_C, 0x037C);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_LKDN, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_10RC, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_0NTT, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x05F0);
		}

		// class ABowlingLaneManager_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BowlingLaneManager__BowlingLaneManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Audio_LaneSound, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, EditorMesh, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Root, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Timeline_Rotate_Alpha_0DA3F042474D40A582343AA1760E3357, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Timeline_Rotate__Direction_0DA3F042474D40A582343AA1760E3357, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, UnknownData_8ZDZ, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Timeline_Rotate, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, InitialLane, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, ActiveLane, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, ReplacementLane, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, LaneSwapComplete, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, LaneSwapActive, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, UnknownData_9634, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, DelayBeforeInit, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, AnnouncerVO, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, LocallyControlled, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Player1, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, UnknownData_HH6M, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, OutgoingLane, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, Alley, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, LaneManagerReplacingLane, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABowlingLaneManager_C, NewLaneClassRef, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABowlingLaneManager_C, 0x0400);
		}

		// class ATN_Wiffleball_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Wiffleball__TN_Wiffleball_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Wiffleball_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Wiffleball_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Wiffleball_C, 0x1160);
		}

		// class ATN_Fish_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Fish__TN_Fish_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Fish_C, UberGraphFrame, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Fish_C, AnimationMesh, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Fish_C, MaxRacketImpulse_1, 0x1168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Fish_C, MinRacketImpulse_1, 0x116C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Fish_C, 0x1170);
		}

		// class ABW_Challenge_07_HardAI_C : public ABW_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BW_Challenge_07_HardAI__BW_Challenge_07_HardAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_07_HardAI_C, UnknownData_2MZK, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_07_HardAI_C, UberGraphFrame, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_07_HardAI_C, Crowd, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABW_Challenge_07_HardAI_C, PrimaryAudioList, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABW_Challenge_07_HardAI_C, 0x0568);
		}

		// class AMultiplayerMenu_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__MultiplayerMenu__MultiplayerMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, Root, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, ServerList, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, BackButtonSelected, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, Buttons, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, GameInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, BackButtonIndex, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, UnknownData_6POH, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, ButtonGroup, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, TopMenuButtons, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, LAN, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, UnknownData_U3OH, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, Sports, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMultiplayerMenu_C, Sportsbuttongroup, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMultiplayerMenu_C, 0x03B8);
		}

		// class ABaseballAI_Challenge06_Batter_Blueprint_C : public ABaseballAIBatter_Blueprint_C
		TEST_METHOD(BlueprintGeneratedClass__BaseballAI_Challenge06_Batter_Blueprint__BaseballAI_Challenge06_Batter_Blueprint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAI_Challenge06_Batter_Blueprint_C, 0x0ED2);
		}

		// class ARI_Target_02_C : public AScramTarget
		TEST_METHOD(BlueprintGeneratedClass__RI_Target_02__RI_Target_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, UberGraphFrame, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, TennisBox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, StaticMeshMiddle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, ScoreWidgetComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, Target_Influencer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, StaticMeshBullseye, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, StaticMeshOuter, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, ChangeSize_Scale_F0FC071C4663A2935B826CB1E778B5C8, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, ChangeSize__Direction_F0FC071C4663A2935B826CB1E778B5C8, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, UnknownData_WP3G, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, ChangeSize, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, RI_Target_02_Hit, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, OuterMeshFlash, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, OuterMeshDefault, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, InnerMeshFlash, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, InnerMeshDefault, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, FlashTime, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, UnknownData_8G0N, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, ScoreText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, MiddleMeshFlash, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, MiddleMeshDefault, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, InitialScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, Hidden, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, DestroyPayload, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, UnknownData_IFWS, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, Impacts, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARI_Target_02_C, Bullseye, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARI_Target_02_C, 0x0411);
		}

		// class ABB_Minigame_Batting_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Batting_Base__BB_Minigame_Batting_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, BallLauncher, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, LauncherSelectionButtons, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, LaucherChoiceMenu, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, ShowLauncherSpeedMenu, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, PitchAtRandomSpeed, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UnknownData_T4WO, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, HitBall, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, PlayerPos, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, CurrentDistance, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, GameInstance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, FinalPitchSpeed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, SlowPitchSpeed, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MediumPitchSpeed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, FastPitchSpeed, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MoveYMin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MoveYMax, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MinLauncherHeight, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MaxLauncherHeight, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, horizontalVariance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, verticalVariance, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, DelayBetweenPitches, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, TargetRegionRightMargin, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, TargetRegionLeftMargin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, TargetRegionTopMargin, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, TargetRegionBottomMargin, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, TimedGameMode, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UnknownData_S9AL, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, CurrentPointScore, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UnknownData_K6HB, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, CountdownActor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, GameOver, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, ShowTargetFlashScore, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UnknownData_M57V, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, GameSelector, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, MinimumSpeedVariance, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UseDistanceScoreboard, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, UnknownData_CM21, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, PitchingPropManager, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_Base_C, PitchingLocation, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Batting_Base_C, 0x0430);
		}

		// class UHitMeWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HitMeWidget__HitMeWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitMeWidget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitMeWidget_C, HitMeText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitMeWidget_C, 0x0220);
		}

		// class AEquipmentMatchCheck_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__EquipmentMatchCheck__EquipmentMatchCheck_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, Root, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, Ball, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, CheckInstrument, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, UnknownData_UNAB, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, Instrument, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEquipmentMatchCheck_C, LocalPlayerInstrument_, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEquipmentMatchCheck_C, 0x0351);
		}

		// class ABB_LogoPopup_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_LogoPopup__BB_LogoPopup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, StaticMesh1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Spin, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, BaseRotation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Scene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaleup2_Alpha_EFE193EC4455BB4B8B64E79058074BC2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaleup2__Direction_EFE193EC4455BB4B8B64E79058074BC2, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, UnknownData_6API, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaleup2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaledown_Scale_8CE33A1A4E8F08FE9D5EC4A2321EB89D, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaledown__Direction_8CE33A1A4E8F08FE9D5EC4A2321EB89D, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, UnknownData_XYXA, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_ScaleDown, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaleup_Alpha_755E04474F93A4A6BA1D61BBFD2D02BA, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_Scaleup__Direction_755E04474F93A4A6BA1D61BBFD2D02BA, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, UnknownData_J2CP, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, Timeline_ScaleUp, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, HomeTeam, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, UnknownData_W3IJ, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_LogoPopup_C, LogoScale, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_LogoPopup_C, 0x0388);
		}

		// class APlinkoAccelerator_C : public ABowlingConveyor
		TEST_METHOD(BlueprintGeneratedClass__PlinkoAccelerator__PlinkoAccelerator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlinkoAccelerator_C, Box, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlinkoAccelerator_C, 0x0380);
		}

		// class ATN_Blimp_Anim_A_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__TN_Blimp_Anim_A__TN_Blimp_Anim_A_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, Spline, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, CMN_Blimp, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, DefaultSceneRoot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, Timeline_0_Blimp_Movement_C54C269F432924E47A12D18005656A66, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, Timeline_0__Direction_C54C269F432924E47A12D18005656A66, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, UnknownData_7U9Y, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Blimp_Anim_A_C, Timeline_1, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Blimp_Anim_A_C, 0x0358);
		}

		// class UOculusFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OculusHMD__OculusFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusFunctionLibrary, 0x0028);
		}

		// class UOculusHMDRuntimeSettings : public UObject
		TEST_METHOD(Class__OculusHMD__OculusHMDRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bAutoEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, UnknownData_QAH1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, SplashDescs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bSupportsDash, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bCompositesDepth, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bHQDistortion, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, UnknownData_MGUM, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, PixelDensityMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, PixelDensityMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, CPULevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, GPULevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, FFRLevel, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bChromaCorrection, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, bRecenterHMDWithController, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusHMDRuntimeSettings, UnknownData_5780, 0x0057);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusHMDRuntimeSettings, 0x0058);
		}

		// class UOculusSceneCaptureCubemap : public UObject
		TEST_METHOD(Class__OculusHMD__OculusSceneCaptureCubemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, UnknownData_7VHJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, CaptureComponents, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOculusSceneCaptureCubemap, UnknownData_G8IZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOculusSceneCaptureCubemap, 0x0090);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_GUCF, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_UTLP, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_J6RR, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_O9KQ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_6676, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_3PQ1, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0080);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0080);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0200);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0080);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_ACGM, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0278);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_W424, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0080);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0088);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_DTTU, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0068);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_QQ02, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_KFNM, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0178);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_DQ16, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0088);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0088);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0080);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x00E8);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01D0);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_7R0U, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_XKGW, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_SALK, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0080);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0080);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0080);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_N313, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_G5Y0, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0110);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_5C30, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01D0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_0WTP, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0080);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0080);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0080);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_WRX9, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_T8P4, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0088);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0080);
		}

		// class UBallLauncher_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BallLauncher_AnimBP__BallLauncher_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, UnknownData_K6P2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, UberGraphFrame, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_Root_144B779F4C62E9695CECEFB210243684, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_2C3D5149404C67AFF848069B34EB7BAC, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_26A77F5640C00B7D02B467872C04156C, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_A936E4DA42F84CE056223699A98419A6, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_2C938A874AECB75B5C16D88F68118849, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_FD8FE8B84D17F62BF3F9399FF627153B, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_B83BA5E941AC7B96F8DC29ACB3831BD3, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_D7B45709483806EBFABA00B4EA36FF19, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_029B269044D453521D6C67B53857C9DE, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_103A8E7F4935197DC36FB4A782023565, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_10E54F744757AAB3804C5B8F38CA55A6, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_64886E6C4526BDCFA11C6B9C863CCF56, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_8EA434774E820D34105986B16BDA05D7, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_174EE5374716C5C6685D27BD0DD86798, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_A1C1B62E4B0EC98F795EFD8EB5FB30BC, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_B7E558F846C0F743FF5C908355C46AE2, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_7E6C66B64667CBF63B33208AD7B8CA13, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_39C169D9419A3043D8AA9C8C31C7ED55, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_CAABB5C848994831CA24DDA87156468C, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_2D4EF69C4E25A2581B240BA8FF7EF848, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_TransitionResult_E0BEFF084E42D549B8573B8F2F765D6D, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_001EF99A426C26FC9C4D189410B20E23, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_62515C12498705E358443BB9F4967AF8, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_FAA61A82412C37E6CB474E9F8D115E96, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_D40297724EEE02729AEB39B2A216C74D, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_B5716BB845730B1D74E43A9613CC927E, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_63DDFBAF415827AC86878BA81F2D48C6, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_FA24AC7943FC0CE897DB598CB5704CB3, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_4F4AB41D482E297F28B3D993CC94BF20, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_D43B2C874AA721B32F17E597EC9EDDB8, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_6AEF1669443253DCB0B7AE999ACF030C, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_BCBDDC1441110D283A05DFB58669C552, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_7B711FB14D46AC573423FBBFB13BCE5D, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_CBA88CFE4863E1BB8C8F5B9FC1E8CD66, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_16F695554A2AE00A2CDE009ECD8B34D4, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_5E5C9E5444D87652472AA3B07E580B19, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_DE61EE094B315F2F0786038B07A1880E, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_DE0184884F393EEB453DC599EB9C4FF6, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_A20285D64F2245D59E19CAA78B7972F0, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_5E8C885E47AEA3871B49C69178EC0388, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_9649A4234B44A97FF6D36692F23F0F93, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_SequencePlayer_B17E1FDA4D990DFDB316DF9E47C06359, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateResult_3EB9A5A64925A7E5E719D5BC3FA9E6A9, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_StateMachine_2C9A65754656807FBB2676BB332C6ED2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_LocalToComponentSpace_31441C3A4312DA4FD81F5CB8A951679C, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_61C569E84444D023183245918B9A09E4, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_F154AC014A6A528B2EA5F38EB85B1875, 0x1808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_8A0CCEBB4F3A6B7CA4EE7C90EBDC199A, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_54E8D5CA452F6F9236100098AEF062EF, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, AnimGraphNode_ModifyBone_F48CA86841360EDFC84B14A4BEFF24D9, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, LaunchHeightOffset, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, LaunchRotationOffset, 0x1CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, LaunchPitchOffset, 0x1CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlaySpawn, 0x1CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlayFire, 0x1CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, UnknownData_IQ2N, 0x1CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, SpawnAnimComplete, 0x1CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, ScaleOverride, 0x1D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlayMoveL, 0x1D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlayMoveR, 0x1D0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, UnknownData_NW5Q, 0x1D0E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, WheelRotationOffset, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlayMoveF, 0x1D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBallLauncher_AnimBP_C, PlayMoveB, 0x1D15);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBallLauncher_AnimBP_C, 0x1D16);
		}

		// class ATN_Frisbee_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Frisbee__TN_Frisbee_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Frisbee_C, MaxRacketImpulse_1, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Frisbee_C, MinRacketImpulse_1, 0x115C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Frisbee_C, 0x1160);
		}

		// class USportOptionsWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SportOptionsWidget__SportOptionsWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_Mp, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_P0, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_P2_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_P2_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_P2_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Image_P2_4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, MpText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, P2Parent1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, P2Parent2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, P2Parent3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel0SelectionText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel0Text, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel1Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel1Text0, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel1Text1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2OptionTextParent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2SelectionText0, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2SelectionText1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2SelectionText2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2SelectionText3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2Text0, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2Text1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2Text2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, Panel2Text3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USportOptionsWidget_C, WidgetSwitcher_Panel0, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USportOptionsWidget_C, 0x02D8);
		}

		// class ADummyParent_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DummyParent__DummyParent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADummyParent_C, DefaultSceneRoot, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADummyParent_C, 0x0330);
		}

		// class ABB_Challenge_06_3rdBase_C : public ABB_Challenge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Challenge_06_3rdBase__BB_Challenge_06_3rdBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, UberGraphFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, Crowd, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, BaseballManager, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, strikeZone, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, MaxFieldedBalls, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, UnknownData_W0IK, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, OldFloorMaterial, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, Helper, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, Launcher, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, TimeBetweenBalls, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, Firing, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, UnknownData_Q5CQ, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, PairedSequences, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, BombChance, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, GoldenBallChance, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Challenge_06_3rdBase_C, BallsCaught, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Challenge_06_3rdBase_C, 0x05E4);
		}

		// class AButton_AvatarEdit_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Button_AvatarEdit__Button_AvatarEdit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, AvatarPos, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, AvatarScale, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Widget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, ButtonPos, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, StaticMesh, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Root, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Timeline_ScaleAvatar_Alpha_21503F984212304702C8C985282A6328, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Timeline_ScaleAvatar__Direction_21503F984212304702C8C985282A6328, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, UnknownData_U9Z4, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Timeline_ScaleAvatar, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, GameInstance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Avatar, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Button, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, EditButtonPressed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, EditButtonSwapFinished, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, NoButton, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, Opponent, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, ScaleUpAvatar, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, AvatarSetupScreen, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AButton_AvatarEdit_C, NeutralTeamColor, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AButton_AvatarEdit_C, 0x03AD);
		}

		// class ABP_TrophyAward_Tennis_InstrumentHitBase_C : public ABP_TrophyAwardBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_Tennis_InstrumentHitBase__BP_TrophyAward_Tennis_InstrumentHitBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, UnknownData_UIMG, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, TrackerInitialized, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, UnknownData_AI3A, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, TennisManager, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_Tennis_InstrumentHitBase_C, 0x03B0);
		}

		// class ABP_TrophyAward_TN_ChallengeFinal_C : public ABP_TrophyAward_FinalChallengeBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TrophyAward_TN_ChallengeFinal__BP_TrophyAward_TN_ChallengeFinal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrophyAward_TN_ChallengeFinal_C, 0x03D8);
		}

		// class ATN_Train_04_SliceBalls_C : public ATN_Train_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Train_04_SliceBalls__TN_Train_04_SliceBalls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, UnknownData_X1R8, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, UberGraphFrame, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, Audio_SliceInstructions, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, maxBalls, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, DelayBetweenLauncherBalls, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, LoopCount, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, BallsMissed, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, BallsRegistered, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, UnknownData_S7D2, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, LivingRoom_RightHanded_2, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, LaunchTargets, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, ActiveLaunchParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, BallSliced, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, UnknownData_WTUG, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, VoiceClips, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, TrainingOver, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, UnknownData_WR9W, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, InstructionalVOTimer, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_Train_04_SliceBalls_C, TimerStarted, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Train_04_SliceBalls_C, 0x0679);
		}

		// class ATennisScramble_Baseball_C : public AScrambleEvent_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TennisScramble_Baseball__TennisScramble_Baseball_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATennisScramble_Baseball_C, SportManager, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATennisScramble_Baseball_C, 0x0388);
		}

		// class ABaseballBallScrambleDisplay_BP_C : public ABaseballBallScrambleDisplay
		TEST_METHOD(BlueprintGeneratedClass__BaseballBallScrambleDisplay_BP__BaseballBallScrambleDisplay_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallScrambleDisplay_BP_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallScrambleDisplay_BP_C, Widget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallScrambleDisplay_BP_C, DefaultSceneRoot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallScrambleDisplay_BP_C, BallClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballBallScrambleDisplay_BP_C, IconIndex, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballBallScrambleDisplay_BP_C, 0x034C);
		}

		// class UBaseballBallScrambleDisplay_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BaseballBallScrambleDisplay_Widget__BaseballBallScrambleDisplay_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBallScrambleDisplay_Widget_C, ScrambleBall1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBallScrambleDisplay_Widget_C, ScrambleBall2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseballBallScrambleDisplay_Widget_C, ScrambleBall3, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseballBallScrambleDisplay_Widget_C, 0x0228);
		}

		// class UButton_PanelImageWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Button_PanelImageWidget__Button_PanelImageWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_PanelImageWidget_C, Image_Panel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton_PanelImageWidget_C, PanelText, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton_PanelImageWidget_C, 0x0220);
		}

		// class ABB_Minigame_Batting_AI_Pitching_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BB_Minigame_Batting_AI_Pitching__BB_Minigame_Batting_AI_Pitching_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, DefaultSceneRoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, GameElements, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, BallLauncher, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, DifficultySelectionButtons, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, DifficultyChoiceMenu, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, RandomSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, UnknownData_67HL, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, HitBall, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, PlayerPos, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, CurrentDistance, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, GameInstance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, FinalPitchSpeed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, SlowPitchSpeed, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, MediumPitchSpeed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, FastPitchSpeed, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, MoveYMin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, MoveYMax, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, MinLauncherHeight, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, MaxLauncherHeight, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, horizontalVariance, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, verticalVariance, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, DelayBetweenPitches, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, TargetRegionRightMargin, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, TargetRegionLeftMargin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, TargetRegionTopMargin, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, TargetRegionBottomMargin, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, UnknownData_M6LV, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, SportManager, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, ScoreboardEnable, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, UnknownData_QZG8, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, GameSelector, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABB_Minigame_Batting_AI_Pitching_C, strikeZone, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Minigame_Batting_AI_Pitching_C, 0x03F0);
		}

		// class UFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__FunctionLibrary__FunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunctionLibrary_C, 0x0028);
		}

		// class AChallenge_ManagerTennis_LocalHelper_C : public AScramActor
		TEST_METHOD(BlueprintGeneratedClass__Challenge_ManagerTennis_LocalHelper__Challenge_ManagerTennis_LocalHelper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, UberGraphFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, Music_StartOfMatch, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, Umpire_Vox, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, Root, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, NetScoreBoard, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, NetTextDisplayTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, UnknownData_JVQ9, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, GameInstance, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, ScorePlayer1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, ScorePlayer2, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, ArenaScoreboards, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_CheerGood, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_CheerBad, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, InfoPanel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_StingerWin, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_StingerLose, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, InfoDisplayStingerIntroTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, LocalIsPlayer1, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, Player1WonPoint, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, UnknownData_2TOM, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_StartOfMatchMusic, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, SFX_GameOverMusic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, ServeMessageComplete, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, NetScoreBoard2, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, TraditionalScoring, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, ShowAdvantage, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChallenge_ManagerTennis_LocalHelper_C, UseMatchScoreboard, 0x03F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChallenge_ManagerTennis_LocalHelper_C, 0x03F3);
		}

		// class ABB_Trail_Golden_Flat_C : public ACMN_Trail_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Trail_Golden_Flat__BB_Trail_Golden_Flat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Trail_Golden_Flat_C, 0x037C);
		}

		// class ABB_Baseball_C : public ABB_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BB_Baseball__BB_Baseball_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABB_Baseball_C, 0x1038);
		}

		// class ATN_AcceleratorBall_C : public ATN_Ball_Base_C
		TEST_METHOD(BlueprintGeneratedClass__TN_AcceleratorBall__TN_AcceleratorBall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_AcceleratorBall_C, UberGraphFrame, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_AcceleratorBall_C, MaxRacketImpulse_1, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_AcceleratorBall_C, MinRacketImpulse_1, 0x1164);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATN_AcceleratorBall_C, PitchMultiplier, 0x1168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_AcceleratorBall_C, 0x116C);
		}

		// class ABaseballAIFielder_Blueprint_C : public AScramBaseballFielderAI
		TEST_METHOD(BlueprintGeneratedClass__BaseballAIFielder_Blueprint__BaseballAIFielder_Blueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, UberGraphFrame, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, GloveRed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Fan_ShadowPlane, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, InstancedMesh, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, GloveBlue, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, SkeletalMesh, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Spawn_ScaleUp_0C7209B9431ACF2B2711B3A8F961766D, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Spawn__Direction_0C7209B9431ACF2B2711B3A8F961766D, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, UnknownData_4UZ4, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Spawn, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Despawn_ScaleDown_D5F422FD41BF14FCE64FE983A03A6F50, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Despawn__Direction_D5F422FD41BF14FCE64FE983A03A6F50, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, UnknownData_2SX4, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, Timeline_Despawn, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, FielderMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, UseSpawnAnimation, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABaseballAIFielder_Blueprint_C, BlueGlove, 0x0549);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABaseballAIFielder_Blueprint_C, 0x054A);
		}

		// class AInfoScreen_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InfoScreen__InfoScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, PositionCenter, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Scene2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, PositionConfirm, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Scene1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, PositionCancel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Scene, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, StaticMesh2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, StaticMesh1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Widget, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, MenuRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Root, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Timeline_ScaleMenu_Alpha_2282C1F04C4BC94EEAAD5F975AB5FACE, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Timeline_ScaleMenu__Direction_2282C1F04C4BC94EEAAD5F975AB5FACE, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, UnknownData_5H0Q, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Timeline_ScaleMenu, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, LocTextHeader, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, LocTextBody, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, ShowCancel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Closing, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, UnknownData_QWGW, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, InfoScreenWidget, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, CancelButton, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, OkButton, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Header, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, ChoiceMade, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, Choice, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, UnknownData_OHQ2, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInfoScreen_C, MenuClosed, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfoScreen_C, 0x03F8);
		}

		// class UBB_Scoreboard_JustTimer_Widget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BB_Scoreboard_JustTimer_Widget__BB_Scoreboard_JustTimer_Widget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_JustTimer_Widget_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_JustTimer_Widget_C, Parent, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBB_Scoreboard_JustTimer_Widget_C, StandAloneTimer, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBB_Scoreboard_JustTimer_Widget_C, 0x0228);
		}

		// class AFans_Crowd_Idle01_VA_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fans_Crowd_Idle01_VA__Fans_Crowd_Idle01_VA_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Crowd_Idle01_VA_C, FanMeshShadow, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Crowd_Idle01_VA_C, CoWorker_Idle01_VertexAnim_LOD1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Crowd_Idle01_VA_C, Scene, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Crowd_Idle01_VA_C, InstancedMesh, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFans_Crowd_Idle01_VA_C, HatUVSplit, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFans_Crowd_Idle01_VA_C, 0x034C);
		}

		// class ATN_Stadium_01_PalmTree_Double_A_C : public ATN_Stadium_01_PalmTree_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TN_Stadium_01_PalmTree_Double_A__TN_Stadium_01_PalmTree_Double_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATN_Stadium_01_PalmTree_Double_A_C, 0x0332);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// struct FScramFriend
		TEST_METHOD(ScriptStruct__SportsScramble__ScramFriend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramFriend, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramFriend, IsOnline, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramFriend, UnknownData_XHFF, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramFriend, 0x0038);
		}

		// struct FScramGloveThrowRecord
		TEST_METHOD(ScriptStruct__SportsScramble__ScramGloveThrowRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, SignalRiseSmoothTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, SignalFallSmoothTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, GestureStartSignal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, GestureStopSignal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, TriggeringSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGloveThrowRecord, UnknownData_3OP0, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramGloveThrowRecord, 0x001C);
		}

		// struct FBowlingThrow
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingThrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrow, ThrowSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrow, ThrowSpin, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrow, ThrowType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrow, Skill, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingThrow, 0x0004);
		}

		// struct FMinMaxFloat
		TEST_METHOD(ScriptStruct__SportsScramble__MinMaxFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxFloat, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxFloat, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinMaxFloat, 0x0008);
		}

		// struct FScramPrimitiveProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__ScramPrimitiveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, PhysicalMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, Mass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, Radius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, HorizontalDamping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, UpwardDamping, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, DownwardDamping, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AngularDamping, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, TopspinStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, BackspinStrength, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, SidespinStrength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, MaxLinearSpeed, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, MaxPhysicalAngularSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, VisualAngularVelocityCoefficient, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, BounceRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AdjustmentRotationStep, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AdjustmentSpinStep, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AdjustmentSpeedStep, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, OverrideMaxRegionBounces, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, UnknownData_7R7C, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, MaxRegionBounces, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AngularBounceFriction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, AngularRollFriction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPrimitiveProperties, UnknownData_F2Y7, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramPrimitiveProperties, 0x0068);
		}

		// struct FAngle
		TEST_METHOD(ScriptStruct__SportsScramble__Angle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngle, Degrees, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngle, 0x0004);
		}

		// struct FBallFlightOscillation
		TEST_METHOD(ScriptStruct__SportsScramble__BallFlightOscillation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallFlightOscillation, Speed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallFlightOscillation, Range, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallFlightOscillation, WaveOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallFlightOscillation, SmoothTime, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBallFlightOscillation, 0x0014);
		}

		// struct FScramBallProperties : public FScramPrimitiveProperties
		TEST_METHOD(ScriptStruct__SportsScramble__ScramBallProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, BadmintonRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, StabilizationType, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UnknownData_LYL6, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, StabilizeSpinStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, StabilizeTumbleStrength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, DiscusMinimumAngular, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UpwardSpeedConversion, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UpwardSpeedConversionLoss, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UpwardSpeedConversionMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, MaxRandomBounceAngle, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, RandomBounceBias, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, SplinePointTimeStep, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, FlightOscillation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UnknownData_0NE2, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, OscillationStartDelayPercentage, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, HorizontalOscillation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, VerticalOscillation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, OscillateBouncePosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramBallProperties, UnknownData_FGSV, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramBallProperties, 0x00C8);
		}

		// struct FBowlingBallProperties : public FScramBallProperties
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingBallProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, BallType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_48PM, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, HorizontalThrowSpeedCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VerticalThrowSpeedCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, HorizontalUpwardSpeedLimitCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, ThrowRollSpinMultiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, ThrowPitchSpinMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, ThrowYawSpinMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, HookMethod, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_H8Q5, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, HookStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, LaneAlignmentSmoothTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, MaxLaneAlignmentAngularSpeed, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, FirstBounceHookStrength, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DeadSpeed, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, MaxDeadTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, WrongWayMaxTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, InfluenceSpeedDecay, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, InfluenceRadiusModifier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, EnableDriftMotion, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DriftWithLaneBias, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_HOYQ, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DriftDegrees, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DriftSmoothTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, EnableDriftOnBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_Z10H, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DriftBounceDegrees, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, DriftMaxBounce, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, EnableVibrationMotion, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_DZXZ, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationPeriod, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationYAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationZAxis, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationPopChance, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationGrabRotationLimits, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, VibrationGrabPeriod, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UseReturnTrackHeightOverride, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_U47H, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, ReturnTrackHeightOverride, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, AIHandRotationOffset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallProperties, UnknownData_2X3U, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingBallProperties, 0x0180);
		}

		// struct FLightCone
		TEST_METHOD(ScriptStruct__SportsScramble__LightCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightCone, mpMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightCone, UnknownData_IJL9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightCone, 0x0010);
		}

		// struct FScramGameInvite
		TEST_METHOD(ScriptStruct__SportsScramble__ScramGameInvite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGameInvite, Inviter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramGameInvite, UnknownData_TWHV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramGameInvite, 0x0060);
		}

		// struct FBPUniqueNetId
		TEST_METHOD(ScriptStruct__SportsScramble__BPUniqueNetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUniqueNetId, UnknownData_B7GR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUniqueNetId, 0x0020);
		}

		// struct FSessionPropertyKeyPair
		TEST_METHOD(ScriptStruct__SportsScramble__SessionPropertyKeyPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionPropertyKeyPair, UnknownData_YPAR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionPropertyKeyPair, 0x0020);
		}

		// struct FSessionsSearchSetting
		TEST_METHOD(ScriptStruct__SportsScramble__SessionsSearchSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionsSearchSetting, UnknownData_HTOL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionsSearchSetting, 0x0028);
		}

		// struct FMotionState
		TEST_METHOD(ScriptStruct__SportsScramble__MotionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionState, UnknownData_I1KZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionState, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionState, LinearVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionState, AngularVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionState, 0x0038);
		}

		// struct FScramTrajectory
		TEST_METHOD(ScriptStruct__SportsScramble__ScramTrajectory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, InitialMotionState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, CheckBounces, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, UnknownData_HX13, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, Primitive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, mCachedPrimitiveProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, mCachedBallProperties, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, World, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, FloorMaterial, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, FloorZ, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, GravityZ, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, mSimulatedTime, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, UnknownData_M7F2, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, mSimulatedMotionState, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, mNumSimulatedBounces, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectory, UnknownData_T1Z4, 0x01E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramTrajectory, 0x01F0);
		}

		// struct FBaseballShot
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballShot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShot, ShotSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShot, ShotType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShot, SweetSpot, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballShot, 0x0003);
		}

		// struct FMinMaxAngle
		TEST_METHOD(ScriptStruct__SportsScramble__MinMaxAngle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxAngle, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxAngle, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinMaxAngle, 0x0008);
		}

		// struct FBaseballBallProperties : public FScramBallProperties
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBallProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, BallType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, AlwaysImbued, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, UnknownData_JFP9, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, MittDisplayScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, CorrectionIsCurveLocal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, UnknownData_HEOM, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, AngularAxis, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, ThrownAngularSpeedRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, InstrumentDamage, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, MaxBallSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, TrajectoryTimeScale, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, BatterSkillSpeedMultipliers, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, MaxHeightAfterHit, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, HorizontalDampingAfterHit, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, UpwardDampingAfterHit, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, DownwardDampingAfterHit, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallProperties, RestitutionPerBounceAfterHit, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBallProperties, 0x0128);
		}

		// struct FBaseballNetworkUpdate
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballNetworkUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballNetworkUpdate, mTrajectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballNetworkUpdate, mShot, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballNetworkUpdate, mIsThrow, 0x01F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballNetworkUpdate, UnknownData_3QNQ, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballNetworkUpdate, 0x0200);
		}

		// struct FBaseballBallScrambleProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBallScrambleProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, BallType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, UnknownData_MAIF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, BallClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, SelectionMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, SelectionMeshOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, ScrambleIcon, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, ExcludedFromSelection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, ExcludedFromRandomScrambler, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, ExcludedFromEquipmentMatchingScrambler, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, ExcludedFromEquipMatchWarning, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, BattingTeeInitialScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, DisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallScrambleProperties, UnknownData_JR4F, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBallScrambleProperties, 0x0080);
		}

		// struct FChance
		TEST_METHOD(ScriptStruct__SportsScramble__Chance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChance, Percentage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChance, 0x0004);
		}

		// struct FFielderAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__SportsScramble__FielderAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, BlueprintDesiredState, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, DesiredState, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, UnknownData_NCP8, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, IdlePhase, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, RunAngle, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, RunSpeed, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, LookUpAngle, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFielderAnimInstanceProxy, UnknownData_64AP, 0x0584);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFielderAnimInstanceProxy, 0x0590);
		}

		// struct FBaseballGlobalSkillData
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballGlobalSkillData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalSkillData, PitcherInfluencePercent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalSkillData, PitcherDirectionBiasPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalSkillData, BatterDirectionBiasPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalSkillData, BatterExtraSwingSpeedPercent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballGlobalSkillData, 0x0010);
		}

		// struct FInferredContactParameters
		TEST_METHOD(ScriptStruct__SportsScramble__InferredContactParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, ActivationMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, UnknownData_UY5Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, RequiredSpeedThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, PullAlphaCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, SwingVelocityYawRange, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, SwingYawRangeAroundPull, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, SwingVelocityPitchRange, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, CriticalFractionRange, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, FoulYawThreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, FoulYawRange, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, ContactArmLength, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, ContactRangeFront, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, ContactRangeBack, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, MaxContactDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredContactParameters, TimeUntilTrackingIsReliable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInferredContactParameters, 0x0050);
		}

		// struct FBaseballGlobalData
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballGlobalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, ShotSpeedProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, ShotTypeProperties, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, SkillData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingLeftPlayAreaMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingLeftPlayAreaMax, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingLeftHazardAreaMax, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingLeftAvatarArea, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingRightPlayAreaMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingRightPlayAreaMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingRightHazardAreaMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, BattingRightAvatarArea, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, InferredContactParameters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballGlobalData, UnknownData_GUJU, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballGlobalData, 0x0240);
		}

		// struct FScramInstrumentSwingGesture
		TEST_METHOD(ScriptStruct__SportsScramble__ScramInstrumentSwingGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, SignalRiseSmoothTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, SignalFallSmoothTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, GestureStartSignal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, GestureStopSignal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, TriggeringSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentSwingGesture, UnknownData_UQ5R, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramInstrumentSwingGesture, 0x001C);
		}

		// struct FInferredHit
		TEST_METHOD(ScriptStruct__SportsScramble__InferredHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredHit, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInferredHit, UnknownData_V9LD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInferredHit, 0x0010);
		}

		// struct FScramInstrumentProperties : public FScramPrimitiveProperties
		TEST_METHOD(ScriptStruct__SportsScramble__ScramInstrumentProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramInstrumentProperties, 0x0068);
		}

		// struct FScramInstrumentRegion
		TEST_METHOD(ScriptStruct__SportsScramble__ScramInstrumentRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentRegion, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentRegion, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentRegion, RegionType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramInstrumentRegion, UnknownData_38PW, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramInstrumentRegion, 0x001C);
		}

		// struct FBaseballInstrumentSideProperties
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballInstrumentSideProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentSideProperties, SpeedCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentSideProperties, UnknownData_2YM9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentSideProperties, ChargePerBallType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentSideProperties, ChargePerStroke, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballInstrumentSideProperties, 0x000C);
		}

		// struct FBaseballInstrumentProperties : public FScramInstrumentProperties
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballInstrumentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, InstrumentType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, UnknownData_V3LH, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, SideProperties, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, UnknownData_KP1B, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, SweetSpotCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, TotalHealth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, BreaksOnChargeHit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, UnknownData_S37E, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, FoulChance, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentProperties, UnknownData_Y86J, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballInstrumentProperties, 0x00D0);
		}

		// struct FRandomActor
		TEST_METHOD(ScriptStruct__SportsScramble__RandomActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, ActorClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, UnknownData_B3F2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, SelectedWeightMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, mSelectionCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActor, mCachedWeight, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomActor, 0x0020);
		}

		// struct FBaseballInstrumentEntryProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballInstrumentEntryProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, InstrumentType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, UnknownData_C6HR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, InstrumentClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, Weight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, UnknownData_1Y1L, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, SelectedWeightMultiplier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, SelectionExtraSpacing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, UnknownData_BW96, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, ScrambleIcon, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, ExcludedFromDebugSelection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, ExcludedFromRandomScrambler, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, ExcludedFromEquipMatchingScrambler, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, ExcludedFromEquipMatchWarning, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballInstrumentEntryProperties, UnknownData_2N85, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballInstrumentEntryProperties, 0x0040);
		}

		// struct FRandomActorTable
		TEST_METHOD(ScriptStruct__SportsScramble__RandomActorTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActorTable, RandomActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomActorTable, mWorkingActors, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomActorTable, 0x0020);
		}

		// struct FBaseballMittSkillVariations
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballMittSkillVariations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballMittSkillVariations, GrabToCatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballMittSkillVariations, UnknownData_X3X3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballMittSkillVariations, GrabEarlyTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballMittSkillVariations, GrabLateTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballMittSkillVariations, 0x000C);
		}

		// struct FMittSpawnInfo
		TEST_METHOD(ScriptStruct__SportsScramble__MittSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittSpawnInfo, BallClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittSpawnInfo, Imbued, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittSpawnInfo, UnknownData_S10X, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMittSpawnInfo, 0x0010);
		}

		// struct FMittBallRecord
		TEST_METHOD(ScriptStruct__SportsScramble__MittBallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittBallRecord, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittBallRecord, UnknownData_1U9O, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMittBallRecord, 0x0010);
		}

		// struct FMittBallRecordSet
		TEST_METHOD(ScriptStruct__SportsScramble__MittBallRecordSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMittBallRecordSet, mList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMittBallRecordSet, 0x0010);
		}

		// struct FPitchingPropInstance
		TEST_METHOD(ScriptStruct__SportsScramble__PitchingPropInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingPropInstance, mpObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingPropInstance, UnknownData_FEPX, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPitchingPropInstance, 0x0010);
		}

		// struct FPitchingProp
		TEST_METHOD(ScriptStruct__SportsScramble__PitchingProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, SupportedBallTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, UnknownData_NCO3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, ActorType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, SpawnLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, UnknownData_81UG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPitchingProp, SpawnRotation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPitchingProp, 0x0030);
		}

		// struct FSportsScramble_FBallHit
		TEST_METHOD(ScriptStruct__SportsScramble__BallHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallHit, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallHit, mLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallHit, mNormal, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBallHit, 0x0020);
		}

		// struct FRunnerAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__SportsScramble__RunnerAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunnerAnimInstanceProxy, DesiredState, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunnerAnimInstanceProxy, BlueprintDesiredState, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRunnerAnimInstanceProxy, UnknownData_54CD, 0x0572);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRunnerAnimInstanceProxy, 0x0580);
		}

		// struct FBowlingGlobalData
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingGlobalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, ThrowSpeedProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, ThrowSpinProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, ThrowTypeProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, HookPitchRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, DownLaneAssistPercent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, AvoidGuttersAssistPercent, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, SplineAssistPercent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, EnableClientAuthority, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingGlobalData, UnknownData_YOMR, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingGlobalData, 0x01C0);
		}

		// struct FGutterBallRecord
		TEST_METHOD(ScriptStruct__SportsScramble__GutterBallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGutterBallRecord, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGutterBallRecord, UnknownData_EQSF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGutterBallRecord, 0x0010);
		}

		// struct FGutterBallTracker
		TEST_METHOD(ScriptStruct__SportsScramble__GutterBallTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGutterBallTracker, mList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGutterBallTracker, UnknownData_KN3I, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGutterBallTracker, 0x0018);
		}

		// struct FBowlingLaneRegion
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingLaneRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneRegion, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneRegion, RadiusMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneRegion, UnknownData_6VQH, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingLaneRegion, 0x0020);
		}

		// struct FBowlingLanePitRegion : public FBowlingLaneRegion
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingLanePitRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLanePitRegion, Correction, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLanePitRegion, UnknownData_4HNY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingLanePitRegion, 0x0024);
		}

		// struct FBowlingLaneAIDifficultyData
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingLaneAIDifficultyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIDifficultyData, LeftAccuracy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIDifficultyData, MiddleAccuracy, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIDifficultyData, RightAccuracy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIDifficultyData, ThrowHookChance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingLaneAIDifficultyData, 0x0010);
		}

		// struct FBowlingLaneAIData
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingLaneAIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, EasyData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, NormalData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, HardData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, GreatBalls, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, BadBalls, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneAIData, UnknownData_EOHI, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingLaneAIData, 0x0060);
		}

		// struct FInfluenceMapper
		TEST_METHOD(ScriptStruct__SportsScramble__InfluenceMapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInfluenceMapper, RemapCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInfluenceMapper, MapDistanceInfluence, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInfluenceMapper, MapAngleInfluence, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInfluenceMapper, MapSpeedInfluence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInfluenceMapper, UnknownData_96OP, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInfluenceMapper, 0x0010);
		}

		// struct FBowlingBallCurveInfluenceDatum
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingBallCurveInfluenceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallCurveInfluenceDatum, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingBallCurveInfluenceDatum, UnknownData_BQID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingBallCurveInfluenceDatum, 0x0018);
		}

		// struct FBowlingRoll
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingRoll)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingRoll, Pins, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingRoll, Result, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingRoll, UnknownData_IN8N, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingRoll, 0x0008);
		}

		// struct FBowlingScrambleList
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingScrambleList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleList, BallClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleList, LaneList, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleList, RandomizeLaneOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleList, UnknownData_GDKC, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingScrambleList, 0x0038);
		}

		// struct FBowlingScrambleState
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingScrambleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, Round, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, Player1Wins, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, Player2Wins, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, UnknownData_5TER, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, Round1List, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingScrambleState, Round2List, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingScrambleState, 0x0080);
		}

		// struct FDodgeballShot
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballShot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShot, ShotSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShot, ShotSpin, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShot, ShotType, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballShot, 0x0003);
		}

		// struct FDodgeballBallProperties : public FScramBallProperties
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballBallProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballBallProperties, BallType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballBallProperties, UnknownData_40F1, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballBallProperties, SpeedCapModifier, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballBallProperties, SpinCapModifier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballBallProperties, UnknownData_MH4J, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballBallProperties, 0x00D8);
		}

		// struct FBowlingLaneFrictionRegion : public FBowlingLaneRegion
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingLaneFrictionRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneFrictionRegion, PhysicalMaterial, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneFrictionRegion, RegionDirection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingLaneFrictionRegion, UnknownData_9NUK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingLaneFrictionRegion, 0x0038);
		}

		// struct FBowlingFrame
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingFrame, Roll1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingFrame, Roll2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingFrame, 0x0010);
		}

		// struct FBowlingFrameSet
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingFrameSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingFrameSet, Frames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingFrameSet, BonusRoll1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingFrameSet, BonusRoll2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingFrameSet, 0x0020);
		}

		// struct FDodgeballGlobalData
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballGlobalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, ShotSpeedProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, ShotSpinProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, ShotTypeProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, ForehandSlicePitchRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, BackhandSlicePitchRange, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballGlobalData, UnknownData_ODSZ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballGlobalData, 0x0258);
		}

		// struct FNetworkMotionState : public FMotionState
		TEST_METHOD(ScriptStruct__SportsScramble__NetworkMotionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkMotionState, mpOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkMotionState, mTickCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkMotionState, UnknownData_DAJK, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkMotionState, 0x0050);
		}

		// struct FManagedNetworkMotionState : public FNetworkMotionState
		TEST_METHOD(ScriptStruct__SportsScramble__ManagedNetworkMotionState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FManagedNetworkMotionState, 0x0050);
		}

		// struct FTennisInstrumentSideProperties
		TEST_METHOD(ScriptStruct__SportsScramble__TennisInstrumentSideProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentSideProperties, SpeedCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentSideProperties, SpinCap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentSideProperties, UnknownData_CGIZ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentSideProperties, ChargePerBallType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentSideProperties, ChargePerStroke, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisInstrumentSideProperties, 0x000C);
		}

		// struct FBowlingThrowParameters
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingThrowParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowParameters, PitchRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowParameters, YawRange, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowParameters, SpeedRange, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowParameters, HookChance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowParameters, MinYawForHook, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingThrowParameters, 0x0020);
		}

		// struct FTennisBallProperties : public FScramBallProperties
		TEST_METHOD(ScriptStruct__SportsScramble__TennisBallProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, BallType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, UnknownData_C34G, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, SpeedCapModifier, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, SpinCapModifier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, PreApexTimeScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, PostApexTimeScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, FirstBounceTimeScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, SpeedMultiplierPerShotType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, SpeedMultiplierAfterFirstBouncePerShotType, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, SmallPlayAreaRallyTimeScaleMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, LargePlayAreaRallyTimeScaleMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, OutOfPlayChanceModifier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallProperties, UnknownData_69HM, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisBallProperties, 0x0128);
		}

		// struct FTennisBoxHit
		TEST_METHOD(ScriptStruct__SportsScramble__TennisBoxHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBoxHit, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBoxHit, UnknownData_JZPI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisBoxHit, 0x0010);
		}

		// struct FTennisGlobalSkillData
		TEST_METHOD(ScriptStruct__SportsScramble__TennisGlobalSkillData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalSkillData, BaseOutOfPlayChance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalSkillData, ChargeShotOutOfPlayChance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalSkillData, DownCourtBiasPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalSkillData, ExtraSwingSpeedPercent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisGlobalSkillData, 0x0010);
		}

		// struct FTennisInstrumentProperties : public FScramInstrumentProperties
		TEST_METHOD(ScriptStruct__SportsScramble__TennisInstrumentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentProperties, InstrumentType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentProperties, UnknownData_75HC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentProperties, OutOfPlayChanceModifier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisInstrumentProperties, SideProperties, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisInstrumentProperties, 0x00B8);
		}

		// struct FBaseballStrikeZoneAreaValues
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballStrikeZoneAreaValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballStrikeZoneAreaValues, UL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballStrikeZoneAreaValues, UR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballStrikeZoneAreaValues, LL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballStrikeZoneAreaValues, LR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballStrikeZoneAreaValues, Ball, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballStrikeZoneAreaValues, 0x0014);
		}

		// struct FBaseballResultRegionChances
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballResultRegionChances)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, Center, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, PopFly, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, SweetSpot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, LineDrive, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballResultRegionChances, GroundBall, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballResultRegionChances, 0x001C);
		}

		// struct FSteeringParameters
		TEST_METHOD(ScriptStruct__SportsScramble__SteeringParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, MaxSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, MaxForce, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, ApproachDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, ApproachStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, AvoidDist, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteeringParameters, AvoidStrength, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteeringParameters, 0x0018);
		}

		// struct FCoverVignette
		TEST_METHOD(ScriptStruct__SportsScramble__CoverVignette)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, UnknownData_R33K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, Sound1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, Sound2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, Duration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCoverVignette, UnknownData_UNKN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCoverVignette, 0x0020);
		}

		// struct FScramSportPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__ScramSportPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramSportPreferences, AllowTennis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramSportPreferences, AllowBaseball, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramSportPreferences, AllowBowling, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramSportPreferences, 0x0003);
		}

		// struct FAvatarLook
		TEST_METHOD(ScriptStruct__SportsScramble__AvatarLook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarLook, AvatarDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarLook, SkinColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarLook, HairColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarLook, TeamColor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarLook, 0x0020);
		}

		// struct FScramTrajectoryRegion
		TEST_METHOD(ScriptStruct__SportsScramble__ScramTrajectoryRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, RightMargin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, LeftMargin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, MinSpaceBetweenLeftRightMargins, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, TopMargin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, TopMarginAddForFootball, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, BottomMargin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, RightPressure, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, LeftPressure, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, TopPressure, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, BottomPressure, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, MinBounceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, SingleBounce, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, AutoSpinY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, FillCourt, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, RadiusMode, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTrajectoryRegion, UnknownData_XNKQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramTrajectoryRegion, 0x0050);
		}

		// struct FFutureBallHit
		TEST_METHOD(ScriptStruct__SportsScramble__FutureBallHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFutureBallHit, mpBallHitterObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFutureBallHit, mHit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFutureBallHit, mTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFutureBallHit, UnknownData_HFZA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFutureBallHit, 0x0030);
		}

		// struct FTennisShot
		TEST_METHOD(ScriptStruct__SportsScramble__TennisShot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShot, ShotSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShot, ShotSpin, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShot, ShotType, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisShot, 0x0003);
		}

		// struct FTennisBallNetworkUpdate
		TEST_METHOD(ScriptStruct__SportsScramble__TennisBallNetworkUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mTrajectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mFutureBallHit, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mFutureBallHitPosition, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mShot, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, UnknownData_JOLY, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mpSender, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mpTarget, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mLandIn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mAvoidCenter, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mValidBounce, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, UnknownData_ZZOI, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mFirstBounceTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mSecondBounceTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mCanDesync, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, UnknownData_TTDO, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, mDesyncBounce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisBallNetworkUpdate, UnknownData_UR4P, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisBallNetworkUpdate, 0x0260);
		}

		// struct FCommonPlayerPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__CommonPlayerPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommonPlayerPreferences, GrabMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCommonPlayerPreferences, Handedness, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCommonPlayerPreferences, 0x0002);
		}

		// struct FTennisPlayerPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__TennisPlayerPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerPreferences, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerPreferences, Handedness, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerPreferences, ServiceStyle, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisPlayerPreferences, 0x0003);
		}

		// struct FBaseballPitcherPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballPitcherPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherPreferences, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherPreferences, CatchingSkill, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherPreferences, Handedness, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballPitcherPreferences, 0x0003);
		}

		// struct FBaseballBatterPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBatterPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterPreferences, Skill, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterPreferences, Handedness, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterPreferences, Side, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBatterPreferences, 0x0003);
		}

		// struct FBowlingPlayerPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingPlayerPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingPlayerPreferences, Skill, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingPlayerPreferences, 0x0001);
		}

		// struct FScramPartialTransform
		TEST_METHOD(ScriptStruct__SportsScramble__ScramPartialTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPartialTransform, mPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPartialTransform, UnknownData_6WS1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPartialTransform, mRotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramPartialTransform, 0x0020);
		}

		// struct FPlayerTransforms
		TEST_METHOD(ScriptStruct__SportsScramble__PlayerTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mBodyTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mHeadTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mLeftHandTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mRightHandTransform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mLeftGrabbableTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTransforms, mRightGrabbableTransform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerTransforms, 0x00C0);
		}

		// struct FPlayerTennisReturn
		TEST_METHOD(ScriptStruct__SportsScramble__PlayerTennisReturn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTennisReturn, mTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTennisReturn, mTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTennisReturn, UnknownData_RCUS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerTennisReturn, 0x0030);
		}

		// struct FTrophyDefinition : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__TrophyDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, UnknownData_EXVU, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyTitle, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyRequirement, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, Sport, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, UnknownData_TPN1, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyPropClass, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, UnknownData_NB6V, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyPropMenuOffsets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, TrophyAwardListenerClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrophyDefinition, UnknownData_ZK67, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrophyDefinition, 0x00C0);
		}

		// struct FSwapCurve
		TEST_METHOD(ScriptStruct__SportsScramble__SwapCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, Icon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, UnknownData_40Q6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, BaseIconTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, IconYawCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, IconDepthCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, IconScaleCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, GlowLerpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, GlowColorCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapCurve, UnknownData_AE89, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwapCurve, 0x0070);
		}

		// struct FBaseballPlayerPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballPlayerPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPlayerPreferences, PitcherPreferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPlayerPreferences, BatterPreferences, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballPlayerPreferences, 0x0006);
		}

		// struct FScramPlayerPreferences
		TEST_METHOD(ScriptStruct__SportsScramble__ScramPlayerPreferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPlayerPreferences, CommonPreferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPlayerPreferences, TennisPreferences, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPlayerPreferences, BaseballPreferences, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramPlayerPreferences, BowlingPreferences, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramPlayerPreferences, 0x000C);
		}

		// struct FScramUserSettingsAudio
		TEST_METHOD(ScriptStruct__SportsScramble__ScramUserSettingsAudio)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramUserSettingsAudio, UseVoiceChat, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramUserSettingsAudio, 0x0001);
		}

		// struct FBaseballBallTrackingHelper
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBallTrackingHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallTrackingHelper, mMasterBallList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallTrackingHelper, UnknownData_F1MT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallTrackingHelper, mUnclassified, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallTrackingHelper, mPitchedBalls, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBallTrackingHelper, mFieldedBalls, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBallTrackingHelper, 0x0050);
		}

		// struct FInPlayBallTracker
		TEST_METHOD(ScriptStruct__SportsScramble__InPlayBallTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInPlayBallTracker, mpBall, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInPlayBallTracker, mpLastBall, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInPlayBallTracker, mBallGeneration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInPlayBallTracker, UnknownData_J9ES, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInPlayBallTracker, 0x0018);
		}

		// struct FScramTennisAIShotProperties
		TEST_METHOD(ScriptStruct__SportsScramble__ScramTennisAIShotProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, HitPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, Speed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, ShotSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, BounceLengthFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, MissShotVariation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, UnknownData_8C8A, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, HitMoveDistanceModifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, HitBallSpeedModifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, SlicePercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, SliceStrength, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIShotProperties, LobPercentage, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramTennisAIShotProperties, 0x0040);
		}

		// struct FScramSettings
		TEST_METHOD(ScriptStruct__SportsScramble__ScramSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramSettings, AudioSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramSettings, 0x0001);
		}

		// struct FSwapVisuals
		TEST_METHOD(ScriptStruct__SportsScramble__SwapVisuals)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, GrabIcon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, ReleaseIcon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, CollarMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, HandMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, InitialCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwapVisuals, ConfirmCurve, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwapVisuals, 0x0100);
		}

		// struct FTennisPlayerHandicap
		TEST_METHOD(ScriptStruct__SportsScramble__TennisPlayerHandicap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerHandicap, ScoreThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerHandicap, BaseOutOfPlayChanceModifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayerHandicap, ChargeShotOutOfPlayChanceModifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisPlayerHandicap, 0x000C);
		}

		// struct FTennisGlobalData
		TEST_METHOD(ScriptStruct__SportsScramble__TennisGlobalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, ShotSpeedProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, ShotSpinProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, ShotTypeProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, MaxSliceSwingPitch, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, ForehandSliceSpinPitchRange, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, BackhandSliceSpinPitchRange, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, SmallPlayAreaDiagonal, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, LargePlayAreaDiagonal, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, ReturnHeightRange, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, MaxAvoidanceZ, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, MinimumInDistance, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, MinimumOutDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, OutOfPlayEvaluationDistance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, UnknownData_A0RP, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, AvoidCenterChanceCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, AvoidCenterDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, LeadingHandicap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, LosingHandicap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, SkillData, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, UnknownData_EBWI, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, InferredContactParameters, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisGlobalData, UnknownData_P5E2, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisGlobalData, 0x03F8);
		}

		// struct FBaseballBatterAIResultTweakTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBatterAIResultTweakTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, BallType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, UnknownData_FXRG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, GroundBall, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, SweetSpot, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, LineDrive, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, PopFly, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAIResultTweakTableRow, UnknownData_U4XX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBatterAIResultTweakTableRow, 0x0020);
		}

		// struct FBaseballBatterAITweakTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballBatterAITweakTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, BallType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, UnknownData_ENLN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, AluminumBat, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, BaseballBat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, CricketBat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, FishRacket, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, FoamFinger, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, GolfClub, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, HockeyStick, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, PingPongPaddle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, PoolNoodle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, PoolCue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, TennisRacket, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, GoldenBat, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballBatterAITweakTableRow, UnknownData_0COF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballBatterAITweakTableRow, 0x0040);
		}

		// struct FBaseballPitcherAIScrambleProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballPitcherAIScrambleProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, Ball, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, UnknownData_SE2Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, PitchMinSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, PitchMaxSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, TrajectoryTimeScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, ChanceUL, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, ChanceUR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, ChanceLL, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, ChanceLR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, ChanceBALL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPitcherAIScrambleProperties, UnknownData_KSNR, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballPitcherAIScrambleProperties, 0x0030);
		}

		// struct FBaseballShotTypeProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballShotTypeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, ShotType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, OverrideMaxLinearSpeed, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, UnknownData_981W, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, MaxLinearSpeedOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, MaxMultiplayerHitSpeed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotTypeProperties, UnknownData_AAGK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballShotTypeProperties, 0x0018);
		}

		// struct FBaseballShotSpeedProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballShotSpeedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotSpeedProperties, Speed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotSpeedProperties, UnknownData_5ZOA, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballShotSpeedProperties, MaxLinearSpeed, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballShotSpeedProperties, 0x0010);
		}

		// struct FBPFriendPresenceInfo
		TEST_METHOD(ScriptStruct__SportsScramble__BPFriendPresenceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsOnline, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsPlaying, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsPlayingThisGame, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsJoinable, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bHasVoiceSupport, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, PresenceState, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, UnknownData_9XD8, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, StatusString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendPresenceInfo, 0x0018);
		}

		// struct FBPFriendInfo
		TEST_METHOD(ScriptStruct__SportsScramble__BPFriendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, RealName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, OnlineState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_2BMJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UniqueNetId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, bIsPlayingSameGame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_64VH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, PresenceInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendInfo, 0x0068);
		}

		// struct FBPOnlineUser
		TEST_METHOD(ScriptStruct__SportsScramble__BPOnlineUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, UniqueNetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, RealName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineUser, 0x0040);
		}

		// struct FBPOnlineRecentPlayer : public FBPOnlineUser
		TEST_METHOD(ScriptStruct__SportsScramble__BPOnlineRecentPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineRecentPlayer, LastSeen, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineRecentPlayer, 0x0050);
		}

		// struct FBPUserOnlineAccount
		TEST_METHOD(ScriptStruct__SportsScramble__BPUserOnlineAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUserOnlineAccount, UnknownData_SNGB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUserOnlineAccount, 0x0010);
		}

		// struct FBowlingThrowTypeProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingThrowTypeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, HookStrengthMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, LaneAlignmentSmoothTimeMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, BiasDownlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, AvoidGutters, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, OverrideMaxLinearSpeed, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, UnknownData_3MT2, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, MaxLinearSpeedOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, OverrideMaxAngularSpeed, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, UnknownData_8J00, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowTypeProperties, MaxAngularSpeedOverride, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingThrowTypeProperties, 0x0020);
		}

		// struct FBowlingThrowSpinProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingThrowSpinProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowSpinProperties, MaxAngularSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowSpinProperties, UnknownData_PIB5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingThrowSpinProperties, 0x0010);
		}

		// struct FBowlingThrowSpeedProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__BowlingThrowSpeedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowSpeedProperties, MaxLinearSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBowlingThrowSpeedProperties, UnknownData_NUSE, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBowlingThrowSpeedProperties, 0x0010);
		}

		// struct FDodgeballShotTypeProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballShotTypeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, TopspinMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, BackspinMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, SidespinMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, OverrideMaxLinearSpeed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, UnknownData_GK9A, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, MaxLinearSpeedOverride, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, OverrideMaxAngularSpeed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, UnknownData_OX5L, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, MaxAngularSpeedOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, MaxMultiplayerHitSpeed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, MaxMultiplayerServeSpeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotTypeProperties, AndroidMultiplayerTimeScale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballShotTypeProperties, 0x0030);
		}

		// struct FDodgeballShotSpinProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballShotSpinProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotSpinProperties, MaxAngularSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotSpinProperties, UnknownData_BAQT, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballShotSpinProperties, 0x0010);
		}

		// struct FDodgeballShotSpeedProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballShotSpeedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotSpeedProperties, MaxLinearSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballShotSpeedProperties, UnknownData_FOQG, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballShotSpeedProperties, 0x0010);
		}

		// struct FDodgeballInstrumentSideProperties
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballInstrumentSideProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentSideProperties, SpeedCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentSideProperties, SpinCap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentSideProperties, UnknownData_QIHO, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentSideProperties, ChargePerBallType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentSideProperties, ChargePerStroke, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballInstrumentSideProperties, 0x000C);
		}

		// struct FDodgeballInstrumentProperties : public FScramInstrumentProperties
		TEST_METHOD(ScriptStruct__SportsScramble__DodgeballInstrumentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentProperties, InstrumentType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentProperties, UnknownData_2C1Q, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentProperties, SideProperties, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDodgeballInstrumentProperties, UnknownData_98IZ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDodgeballInstrumentProperties, 0x00B8);
		}

		// struct FMotionSpline
		TEST_METHOD(ScriptStruct__SportsScramble__MotionSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionSpline, UnknownData_NHJ2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionSpline, 0x0060);
		}

		// struct FMotionSplineArc
		TEST_METHOD(ScriptStruct__SportsScramble__MotionSplineArc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionSplineArc, UnknownData_NI6R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionSplineArc, 0x000C);
		}

		// struct FMotionSplinePoint
		TEST_METHOD(ScriptStruct__SportsScramble__MotionSplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionSplinePoint, UnknownData_38I5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionSplinePoint, 0x0050);
		}

		// struct FPlayByPlayClipBase : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__PlayByPlayClipBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Instigator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, UnknownData_FS9B, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Clip, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Chance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Delay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, MinTimeBetweenEvents, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Priority, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, Queueable, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClipBase, UnknownData_FN7E, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayByPlayClipBase, 0x0050);
		}

		// struct FPlayByPlayClip : public FPlayByPlayClipBase
		TEST_METHOD(ScriptStruct__SportsScramble__PlayByPlayClip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayByPlayClip, UnknownData_RBO4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayByPlayClip, 0x0058);
		}

		// struct FBaseballPlayByPlayClip : public FPlayByPlayClip
		TEST_METHOD(ScriptStruct__SportsScramble__BaseballPlayByPlayClip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPlayByPlayClip, Event, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseballPlayByPlayClip, UnknownData_0YF7, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseballPlayByPlayClip, 0x0060);
		}

		// struct FTennisPlayByPlayClip : public FPlayByPlayClip
		TEST_METHOD(ScriptStruct__SportsScramble__TennisPlayByPlayClip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayByPlayClip, Event, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisPlayByPlayClip, UnknownData_S8NR, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisPlayByPlayClip, 0x0060);
		}

		// struct FRefCount
		TEST_METHOD(ScriptStruct__SportsScramble__RefCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRefCount, UnknownData_MWW5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRefCount, 0x0004);
		}

		// struct FScramTennisAIScrambleProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__ScramTennisAIScrambleProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, Instrument, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, Ball, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, UnknownData_I4MP, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, ShotSpeedMod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, ShotMissMod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, SliceChanceMod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, SliceMissMod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, SliceStrengthMod, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, LobChanceMod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramTennisAIScrambleProperties, LobMissMod, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramTennisAIScrambleProperties, 0x0028);
		}

		// struct FTennisShotTypeProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__TennisShotTypeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, TopspinMultiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, BackspinMultiplier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, SidespinMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, SmallPlayAreaSpeedMultiplier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, LargePlayAreaSpeedMultiplier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, OverrideMaxLinearSpeed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, UnknownData_BDO1, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, MaxLinearSpeedOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, OverrideMaxAngularSpeed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, UnknownData_K1H4, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, MaxAngularSpeedOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, InfluencePercent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, SkillSpeedMultipliers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotTypeProperties, UnknownData_VAZI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisShotTypeProperties, 0x0048);
		}

		// struct FTennisShotSpinProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__TennisShotSpinProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotSpinProperties, MaxAngularSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotSpinProperties, UnknownData_XNW3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisShotSpinProperties, 0x0010);
		}

		// struct FTennisShotSpeedProperties : public FTableRowBase
		TEST_METHOD(ScriptStruct__SportsScramble__TennisShotSpeedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotSpeedProperties, MaxLinearSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisShotSpeedProperties, UnknownData_SBSD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisShotSpeedProperties, 0x0010);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_YSEC, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_PD9R, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSampleDataCache, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x0128);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_FFJ3, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_SAE4, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketBoneReference, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_CJCC, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketLocalTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketBoneReference, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_DRF4, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketLocalTransform, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x0210);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_5XIX, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_REDN, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00F0);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_QYJQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0030);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, UnknownData_WMVS, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0050);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_5B0N, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_CNNJ, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularXAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularYAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularZAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_BBQL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, bLinearFullyLocked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_TFGT, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x005C);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_R64H, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bChain, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_2JF1, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseGravityOverride, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bLinearSpring, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bAngularSpring, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_PQRY, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bEnableWind, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bWindWasEnabled, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_GX03, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideLinearDamping, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_6LPA, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularDamping, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_YBB2, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularBias, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_TL0W, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoEval, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_ZBBJ, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUsePlanarLimit, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_6GUJ, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseSphericalLimits, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_HE70, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_DCB3, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_HRAP, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x03A0);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_CQV2, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00F0);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0030);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x0110);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_KMW4, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0038);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_KHED, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_6S1B, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, InternalBlendAlpha, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, bBIsRelevant, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_ONYT, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, ValidBoneEntries, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0090);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_TJ69, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, Blends, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, RemainingBlendTimes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, LastActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_74J1, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, PerBoneSampleData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_RQN5, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_I7Y6, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x00C8);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_TX0Y, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00D0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_70I6, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00E0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_KLLU, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00D0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_ZM38, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x0130);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_K8IU, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, bUseRange, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_SLEB, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_I4SA, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_RG4K, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_NR83, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_7Q74, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0168);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_68FF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_96HI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_1GEL, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_EYCZ, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x01B0);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_DZ66, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x0028);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_EOUJ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0138);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_V0FZ, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x0128);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x0130);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_SYD3, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x00E8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_UGP2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0060);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_JAY9, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformBone, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_3W7T, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, bEnableDebugDraw, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_UKL2, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x01F0);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_Y0GV, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0168);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bHasRelevantPoses, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_2XTB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00D8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_1WQY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00B0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_B5Q2, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_KE9E, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x0040);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsData, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_H0HI, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x0120);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_YG0F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0040);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_UTBP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x0040);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtSocket, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_MH88, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtAxis, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_3G6B, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookAtAxis, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUpAxis, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_E2RS, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookUpAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_2CRU, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_1S0U, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x0220);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_624S, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0058);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_70ZI, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0138);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_N4I0, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, LastCurveValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_5WVA, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0080);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_EVWE, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_F2BL, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0070);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_30R5, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0130);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_WIK7, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0090);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_LBV9, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00B0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_SP4C, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x00A0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_OO1V, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x0010);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_0TTS, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_U0GR, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00A8);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, bOnlyDriveSelectedBones, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_25SZ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_H5L2, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, TwistAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, Type, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_FQKN, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RadialScaling, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_3WD2, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0160);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_H1D7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_87QV, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x00B0);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_U83S, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0058);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_O5QN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_UEUW, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0090);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0030);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_RMQ8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0038);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_AFJJ, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x0100);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bEnableWorldGeometry, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_7TG7, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_DIGJ, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_2QDQ, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bOverrideWorldGravity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_OJ1X, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bTransferBoneVelocities, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bFreezeIncomingPoseOnStart, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bComponentSpaceSimulation, 0x0162);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_01RV, 0x0163);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0570);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0040);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualPitch, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, ActualYaw, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_0W8W, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00C0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_10NN, 0x0126);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x0128);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bIsLODEnabled, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_WZTF, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, ActualAlpha, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_F5JP, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x01E0);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_TMJJ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_AR69, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ActualAlpha, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, bBoneIndicesCached, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_MQC1, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x00B0);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_ML1I, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bReinitialized, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_H6HL, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0070);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_1H7E, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0068);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, UnknownData_NS2X, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0020);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_BGFJ, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_PJLA, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_RMON, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneSpline, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, OriginalSplineLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_O8TU, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneReferences, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneLengths, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedOffsetRotations, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0290);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bLimitDisplacement, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_6OHO, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bNoZSpring, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateX, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateY, 0x011E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateZ, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateX, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateY, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateZ, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_DCJR, 0x0123);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0158);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0040);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_QZSY, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnwindingSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_UTMP, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0280);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0028);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_OF6Q, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_VYUM, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0178);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_O5UH, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StretchLimits, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_H4Y4, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_7YE2, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorSpaceBoneName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_4ABG, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_NC75, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetSpaceBoneName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_D0A8, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bAllowTwist, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_RKXE, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bNoTwist, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_VNMC, 0x0235);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x0240);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_I07S, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAlphaBoolEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_UYJ1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, InternalBlendAlpha, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAIsRelevant, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bBIsRelevant, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bResetChildOnActivation, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_90OZ, 0x00F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00F8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_34CO, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0790);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_4W06, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x0088);
		}

		// struct FBW_EggHatchParams
		TEST_METHOD(UserDefinedStruct__BW_EggHatchParams__BW_EggHatchParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_EggHatchParams, AppearDelay_5_FD4B2F86481E5D5DB63A90871C9FE018, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_EggHatchParams, RotationDegrees_6_7689370742C5D11FE9AE2EB8AFD9205C, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_EggHatchParams, LateralOffset_9_65F9E26944F2F743030F53A860EC3136, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_EggHatchParams, VerticalVelocity_11_6E1C6AA7449648266EBE608637E5BD7B, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBW_EggHatchParams, 0x0010);
		}

		// struct FChallengeDefinitionEntry
		TEST_METHOD(UserDefinedStruct__ChallengeDefinitionEntry__ChallengeDefinitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, Sport_2_91C890A94F86972300BB239BC0F160C8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UnknownData_0V22, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, ChallengeClass_20_E1996BE849B3759CFDC40A88588A6C1D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, Title_8_BEFC0FED49F408C0E395AAA079E79F5F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, Description_10_7FA0F7514C564A6F57B95790A7CE8882, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UnlockOverride_13_F13694EB49BB7C3D934546BD4D6C14C5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UnknownData_U2A9, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, SpawnLocOverride_23_4E035CA247EE48EC416524A4A5F48514, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UseStandardArena_25_AF24346B4D8AEA3E4CD89496B7AC03DD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UnknownData_AVSO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, LevelOverride_28_B9D91FAE40792A85368261992E46CDE4, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, TrophyRow_31_89C5A53A468062F75741748FE1A59C1F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, PreviewImageLeft_51_31007C5F4048728C13703E8B49B8553B, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, PreviewImageRight_52_AF6546AE492137C9059F48B0947DFD1F, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, NotScored_43_1045B8B44501A6798BC0D0A90F60D345, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, UnknownData_8HQR, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, TrophyTargetScore_46_27E4780E4091F1EF7AB646AD58F745DF, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChallengeDefinitionEntry, ChallengeTargetScore_50_A4148CC2497364787469EB9416B800C6, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChallengeDefinitionEntry, 0x00C4);
		}

		// struct FTrainingDefinitionEntry
		TEST_METHOD(UserDefinedStruct__TrainingDefinitionEntry__TrainingDefinitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, Sport_2_91C890A94F86972300BB239BC0F160C8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, UnknownData_02RE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, TrainingClass_19_E1996BE849B3759CFDC40A88588A6C1D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, Title_8_BEFC0FED49F408C0E395AAA079E79F5F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, Description_10_7FA0F7514C564A6F57B95790A7CE8882, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, UnlockOverride_13_F13694EB49BB7C3D934546BD4D6C14C5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, HasOptionsMenu_21_B7F3F45C49E53A8C0C3C249220A9C59C, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, DisableNextButton_25_0759972D476289045B2984B1944D8B8B, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, UnknownData_CS7E, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, SpawnLocOverride_28_C8C3C1244386BA71609DEDA84C82E08B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, UseStandardArena_31_62F0E647418CA2D771679996FDD2214B, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, UnknownData_EUSH, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, PreviewImageLeft_37_F10C8B44446E1FE457FC0298D09AFB4C, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrainingDefinitionEntry, PreviewImageRight_38_76D2ECC443603849CEEB079B361498CE, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrainingDefinitionEntry, 0x00A8);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, UnknownData_ISKV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x0010);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_EVJA, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_IGIY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FPairedAnnouncerSequence
		TEST_METHOD(UserDefinedStruct__PairedAnnouncerSequence__PairedAnnouncerSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, GestureSequence_4_98BEC3C641DC1A98D61443943CEF3E13, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, Interruptable_6_5E065C89425F9FD14BCD208357B8DD49, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, UnknownData_Z8NZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, AudioExpressionSequence_11_B5C8E27E4DD3A682E32BD3B540B098C7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, PairDelay_14_4D777D8B4790FF7408796E81825FA7F5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, TwoHandPresentAnimation_17_E493F4CB4821946D654F11A2F261ACB3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPairedAnnouncerSequence, RightHandPresentAnimation_19_318CA5094377AF6D8CD01FA4A8759D49, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPairedAnnouncerSequence, 0x002E);
		}

		// struct FHairColorMapEntry
		TEST_METHOD(UserDefinedStruct__HairColorMapEntry__HairColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColorMapEntry, HairColor_12_90AD60704C4B5D0DB7AF3C9AFAA013F4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColorMapEntry, EarlyAccess_8_287D7C1E40E34F90F6A1FFA13E6D258C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColorMapEntry, AiDisabled_6_9573FA5E4E90C9398E335FA84A90A6EC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColorMapEntry, UnknownData_2HFE, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairColorMapEntry, HairPack_15_5D5D915443F4146A89BB78B9419ABDCA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairColorMapEntry, 0x0018);
		}

		// struct FUI_ButtonData
		TEST_METHOD(UserDefinedStruct__UI_ButtonData__UI_ButtonData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_ButtonData, State_2_0C4D7BA247C4631A7D7F339CBE234566, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_ButtonData, Style_5_A5867A2548719645A76B458CD0103443, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_ButtonData, UnknownData_3SBK, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_ButtonData, Text_8_AB933499452E054980999EACD6CC91C0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUI_ButtonData, 0x0020);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_54NN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_TGH8, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_0JY8, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_7VSB, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_1VZY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FGlobalColor
		TEST_METHOD(UserDefinedStruct__GlobalColor__GlobalColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalColor, Color_2_7ABA3136455CC13A8811AC885F8DE03E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalColor, Usage_6_745D5FB84F322DBA847EF9BF99BB7021, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGlobalColor, 0x0020);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_DVZD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Field, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0020);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_AL6X, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_DN0F, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FInstrumentSFXOverride
		TEST_METHOD(UserDefinedStruct__InstrumentSFXOverride__InstrumentSFXOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstrumentSFXOverride, BallClass_2_A91EB1354D315B66EEBD6AA097D5BAF7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstrumentSFXOverride, NormalHitSFX_5_EAF350E74DEC0D50C8FE048AA3D7695B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstrumentSFXOverride, HardHitSFX_7_242D7A304ECB2B0EE5A7BFB44BA09E8E, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstrumentSFXOverride, 0x0018);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_4WWQ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_UL1O, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_UKF6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_IFMY, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_CGEI, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_XWQH, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_EJKT, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_D2AT, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_95YZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_ZS71, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_ATF0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0038);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_M56L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_3GJJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_SHCP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_2ZNO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_U5M7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_0FRQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x000C);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_6IX4, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_U61S, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_GOL7, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00A8);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, EvaluationIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_9LQ6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_24JC, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_GQLL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_45GF, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRandomStartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_RB02, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRestoreState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableMovementInput, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableLookAtInput, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHidePlayer, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHideHud, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableCameraCuts, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bPauseAtEnd, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_GWLK, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, InstanceData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, BindingOverrides, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_3HB0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0040);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_OFYL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_9BOC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0300);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0018);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_9YO9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_4AQX, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSection, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00E0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_XSML, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_H4LN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_G4JQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_B3SX, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_WLWM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_PQO7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_OPI8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_I42H, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_VVF1, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_6XB2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_P6D5, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_WSNR, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_IV8W, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_T0HC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_33Q7, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_8QZO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_F1EN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_92UO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_M2MP, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FBallLauncherParameters
		TEST_METHOD(UserDefinedStruct__BallLauncherParameters__BallLauncherParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, BallSpeed_2_22605A2A477B6E524EAE3192F1D2E4EA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, HorizontalVariance_12_CCAD8D63447BF3E6891020BD72C65CB3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, VerticalVariance_14_674C7A65400AFBC67534DEB834A0C8CF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, TargetRegion_21_3B2870204DCE2C7A57F985BEBC7693A7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, LauncherXPosition_6_60113A7D43D62C7A5418CD8596412C89, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, LauncherYPosition_8_35733AE341C616AD634BFFB58C9507CD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, Height_10_71A245BC45C9D3AAA2486B9C4F1220C1, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, CollapseSpeed_16_510BCA514ED25CEC8BD2188A0E6FD15B, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, MovementSpeed_18_1C401CEC4381908200729593DA8D8F76, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, RaiseSpeed_20_BB872DCF4F927043A49595B088664747, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, DisplayHintLocation_26_8B5DD36B42FBA31910B263A88C3E43A6, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, UnknownData_13VO, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBallLauncherParameters, HintLocation_27_33716AE44DEE54BF93BB0DB03715CB0F, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBallLauncherParameters, 0x0084);
		}

		// struct FBB_InstrumentAnnouncerVO
		TEST_METHOD(UserDefinedStruct__BB_InstrumentAnnouncerVO__BB_InstrumentAnnouncerVO)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_InstrumentAnnouncerVO, InstrumentClass_55_5E2FAF4A45A5C1C7DBB60DB1C98E87F0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_InstrumentAnnouncerVO, AnnoucnerVO_56_84FC41074C89D1603BC4078D736C174F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_InstrumentAnnouncerVO, 0x0030);
		}

		// struct FScramblerTargetSet
		TEST_METHOD(UserDefinedStruct__ScramblerTargetSet__ScramblerTargetSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramblerTargetSet, ScrambleEventClass_19_2B02531A4A6A53BEDC414A832812B48E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramblerTargetSet, Weight_22_4E6E0CC1491E55032371BE9FC1A63183, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScramblerTargetSet, MaxActive_24_6E0F3E6A4CFCF69B869E949AE13D7CD3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScramblerTargetSet, 0x0010);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_IDG9, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_RH7Y, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_H0RX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_U0BQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_1UOC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_6QKV, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_C6P3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_WWHZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_7TCL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_FUY1, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0028);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, UnknownData_CEBN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0058);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_CAWK, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FBB_ScrambleGroupSet
		TEST_METHOD(UserDefinedStruct__BB_ScrambleGroupSet__BB_ScrambleGroupSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleGroupSet, Inning_21_C5429CC24359CE2B10CAFBA244D5998D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleGroupSet, UnknownData_2UHF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleGroupSet, Groups_22_F017C682490F7D93470B3BA09746566F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_ScrambleGroupSet, 0x0018);
		}

		// struct FOculusMR_PlaneMeshTriangle
		TEST_METHOD(ScriptStruct__OculusMR__OculusMR_PlaneMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, Vertex1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, UV1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, Vertex2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusMR_PlaneMeshTriangle, UV2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOculusMR_PlaneMeshTriangle, 0x003C);
		}

		// struct FTrackedCamera
		TEST_METHOD(ScriptStruct__OculusMR__TrackedCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, UnknownData_JY62, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, FieldOfView, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, SizeX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, SizeY, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, AttachedTrackedDevice, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, UnknownData_TNU5, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, CalibratedRotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, CalibratedOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, UserRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCamera, UserOffset, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedCamera, 0x0058);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_OHCB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_IQ36, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_LI38, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FBB_ScrambleGroup
		TEST_METHOD(UserDefinedStruct__BB_ScrambleGroup__BB_ScrambleGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleGroup, Balls_53_1FA4B6994B461E6C229A6CB0D224F349, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleGroup, Instruments_54_AD811088446B1916F23374A1B06187D7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_ScrambleGroup, 0x0020);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_K2ZZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_L8NS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_7XEU, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_EHW8, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0028);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_KJX1, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_MMB7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0028);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_8LFW, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_QKCN, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0060);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x01F0);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FBW_LaneData
		TEST_METHOD(UserDefinedStruct__BW_LaneData__BW_LaneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_LaneData, LaneClass_41_5E2FAF4A45A5C1C7DBB60DB1C98E87F0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_LaneData, AnnoucnerVO_38_84FC41074C89D1603BC4078D736C174F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBW_LaneData, 0x0010);
		}

		// struct FTennisScrambleScheduleEntry
		TEST_METHOD(UserDefinedStruct__TennisScrambleScheduleEntry__TennisScrambleScheduleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, Point_2_606524BB46E481C9BC8347BAA8EB9FA0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, InitialTargetCount_10_962F8DBA4A2057A83EFCF586B17CBC98, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, MaxTargetCount_12_17D80791417BCA78B246D684789FD47F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, UnknownData_LKJ8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, ScrambleSetInitial_26_70766DF74271363BF67D4AB086BDC0C6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, ScrambleSetReinforcements_30_DFB642D0449B679DF869AF80B539008A, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, ReinforcementDelay_16_C5E783894E849A09F55B9EB15869F217, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, ReinforcementCountMin_33_BEE37EE74573AA5ADBEBEDB49041AC74, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, ReinforcementCountMax_34_F94954904F22012C13A335A41B9B846F, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, UnknownData_9DWH, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, SpawnLocationsOverrideInitial_35_856434B0465155DAEA75A8B40D4899EB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, SpawnLocationsOverrideReinforcements_38_16F05BDA4E8D06943456EBB303EADF22, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleScheduleEntry, DisabledClasses_42_1FA4B6994B461E6C229A6CB0D224F349, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisScrambleScheduleEntry, 0x0070);
		}

		// struct FAnnouncerGestureSetEntry
		TEST_METHOD(UserDefinedStruct__AnnouncerGestureSetEntry__AnnouncerGestureSetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerGestureSetEntry, Gesture_2_B78FDEEA430A16F40EE078B6A682E684, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerGestureSetEntry, UnknownData_YFY6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerGestureSetEntry, Delay_5_742491A6478E40EEE0819EB85834CA31, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnnouncerGestureSetEntry, 0x0008);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_8JL6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_9I3G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_GBBH, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_KX5Y, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_YJCY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x000C);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_Y1KX, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_PZM5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0018);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_APEU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FResultsData
		TEST_METHOD(UserDefinedStruct__ResultsData__ResultsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResultsData, GameCompleted_1_53512E8640C14AF9A3378E8D80F1BB54, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResultsData, UnknownData_JVFO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResultsData, Score_4_9E0EB5C1498EE3369A5DA5BC3D9D972D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResultsData, GameResult_12_BF4C05934B7E540B6774FBA10CA931C4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResultsData, 0x0009);
		}

		// struct FSpawnOverride
		TEST_METHOD(UserDefinedStruct__SpawnOverride__SpawnOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnOverride, Location_40_C34EF8364B9D55CE28A7CDA4FD280F8E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnOverride, MinPlayArea_29_9AD9A5FA424C16C76AD65983AAD98EBA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnOverride, MaxPlayArea_31_DF942561498868F79BAF0C8F81C53A80, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnOverride, 0x0068);
		}

		// struct FBB_SoundQueueStruct
		TEST_METHOD(UserDefinedStruct__BB_SoundQueueStruct__BB_SoundQueueStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_SoundQueueStruct, Sound_19_7ABA3136455CC13A8811AC885F8DE03E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_SoundQueueStruct, Duration_10_745D5FB84F322DBA847EF9BF99BB7021, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_SoundQueueStruct, Queued_15_9BFB0FFB408475EC0E25DEBC6A7B2508, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_SoundQueueStruct, 0x002D);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_97CD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_X2U2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_K96B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_C55Y, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_71GH, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FTennisScrambleSchedule
		TEST_METHOD(UserDefinedStruct__TennisScrambleSchedule__TennisScrambleSchedule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleSchedule, Game1_7_F017C682490F7D93470B3BA09746566F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleSchedule, Game2_12_CBAB5A684221A2AD814CCA9047422FE9, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTennisScrambleSchedule, Game3_13_5E23BA2245C6AC40518C1896B22DBB3D, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTennisScrambleSchedule, 0x0030);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_OYCU, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FDebugButtonInfo
		TEST_METHOD(UserDefinedStruct__DebugButtonInfo__DebugButtonInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, Text_2_9FE5427348839B3E2460ADB0045FBBE6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, TextColor_13_1B0FD3204C689E1D70A5319D904D03BC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, Image_7_ABB84B584D4CED2A5DC4BF92B1BD4F04, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, TwoSided_8_D683EC9643BF7310573D73A0835AAAF1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, AutoDelete_10_24A185A94832A35C79A5298578F87745, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, UnknownData_FCOK, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, ButtonId_16_349CC616488BA9D7CAF059BA433BF6CE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugButtonInfo, LocText_20_C912785C43CD280A2FE40193194B303A, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugButtonInfo, 0x0048);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_K4MF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_6F0N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_N4DF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_NRX6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_NSGU, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_AOJR, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0098);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_4TEX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_W7LD, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_IL74, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_GWZM, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_LFJ3, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_1RWR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_1MOY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_DDVZ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_RRZJ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_9HUB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_BT5H, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_L5KN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_KBHM, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0028);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_8WK4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_HH2O, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_VFQG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x06B8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_3UTU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03A0);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03D8);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x01E8);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_2NCG, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_T9SY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_KP84, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_M0L4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_1S6Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0F50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x0FD8);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_IOUH, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_HW47, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_20A8, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_0D8M, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_YJX9, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x09E8);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0478);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_MIBO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FClothConstraintSetup
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup, 0x0010);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x0034);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00A8);
		}

		// struct FClothLODData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, CollisionData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, UnknownData_Z6R1, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODData, 0x00F8);
		}

		// struct FClothConfig
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_66BF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_0DUV, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig, 0x00D4);
		}

		// struct FClothParameterMask_PhysMesh
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothParameterMask_PhysMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_4O76, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_8EHJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_4EAU, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_PhysMesh, 0x0030);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_XFDI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_B5JW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_30F5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0040);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_RHMY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0018);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0030);
		}

		// struct FHairPackEntry
		TEST_METHOD(UserDefinedStruct__HairPackEntry__HairPackEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairPackEntry, DisplayName_2_DCE785EC46E92152A73405BBBCFD2A51, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairPackEntry, Requirement_5_D86C0F774F6463EDF58630968D589171, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairPackEntry, 0x001C);
		}

		// struct FBW_BallData
		TEST_METHOD(UserDefinedStruct__BW_BallData__BW_BallData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_BallData, BallClass_31_5E2FAF4A45A5C1C7DBB60DB1C98E87F0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_BallData, AnnoucnerVO_39_84FC41074C89D1603BC4078D736C174F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBW_BallData, 0x0030);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_COMP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_X4FL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_VR6X, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0050);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_ST8K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FAnnouncerSequenceSetEntry
		TEST_METHOD(UserDefinedStruct__AnnouncerSequenceSetEntry__AnnouncerSequenceSetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequenceSetEntry, AnnouncerSequence_7_95F22BB745AC42952F0AD0B7DC1429BF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequenceSetEntry, Delay_5_E81C631242328778ACF3A08C201BF6C9, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnnouncerSequenceSetEntry, 0x0014);
		}

		// struct FMaterialIndexDefinition
		TEST_METHOD(UserDefinedStruct__MaterialIndexDefinition__MaterialIndexDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialIndexDefinition, material_3_46DFB8FE4E41C88769395DAFC6F6F91E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialIndexDefinition, index_6_6AEB89D84A17CDF43705EE9FC8E45F0B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialIndexDefinition, 0x000C);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x001C);
		}

		// struct FScrambleEvent
		TEST_METHOD(UserDefinedStruct__ScrambleEvent__ScrambleEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, ScrambleEffectType_2_2B02531A4A6A53BEDC414A832812B48E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, UnknownData_0M1D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, IconColor_5_F95BA60B4ACFDEB7B0D9BE8143B7191A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, UnknownData_KJ4D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, IconLarge_16_C208CF1D45F5A0755EE5198987BF7EBF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrambleEvent, RandomSubset_20_51E40B0743311A99B59373A5EB04F62D, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrambleEvent, 0x0021);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_BBVC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_WGZR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_DR6L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_50DR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FBB_ScrambleSchedule
		TEST_METHOD(UserDefinedStruct__BB_ScrambleSchedule__BB_ScrambleSchedule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ScrambleSchedule, GroupSets_21_F017C682490F7D93470B3BA09746566F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_ScrambleSchedule, 0x0010);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_3DQY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FMeshTriangle
		TEST_METHOD(ScriptStruct__MeshDescription__MeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriangle, VertexInstanceID2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriangle, 0x000C);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FPnpDefinitionEntry
		TEST_METHOD(UserDefinedStruct__PnPDefinitionEntry__PnpDefinitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, Sport_2_91C890A94F86972300BB239BC0F160C8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, UnknownData_PX63, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, PnPGameClass_21_E1996BE849B3759CFDC40A88588A6C1D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, Title_8_BEFC0FED49F408C0E395AAA079E79F5F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, Description_10_7FA0F7514C564A6F57B95790A7CE8882, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, UnlockOverride_13_F13694EB49BB7C3D934546BD4D6C14C5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, UnknownData_6EAC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, PreviewImage_17_26A2E52A4BA8AFE5BF71D299064327E8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, SpawnLocOverride_24_81A902FB4F0561AE812483AB0C6222B1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, UseStandardArena_26_67CB4B434426C3FFA6D82C8971059239, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, UnknownData_V9EZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, LevelOverride_29_28D51240433E631649EC3784FED3217E, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPnpDefinitionEntry, PnpGameType_33_5EAE034C4A7A2DB12879FBAE7D38D298, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPnpDefinitionEntry, 0x0069);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_SZQ1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_SN5S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_0Y08, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0030);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_7CR1, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_D7CV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0018);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_7NLQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_HNWD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_XPWP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_NSNP, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0038);
		}

		// struct FDelayedExpression
		TEST_METHOD(UserDefinedStruct__DelayedExpression__DelayedExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelayedExpression, Delay_2_A6D833E1460C8A498801ACA7A6463F04, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelayedExpression, Expression_5_C8D80114484F62D8C14E12AEEE14421E, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelayedExpression, 0x0005);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_E7CL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_E6NY, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_QWJI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_8N7L, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_3DFK, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_W0X4, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_ZAJ7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_B787, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_JYT1, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_22T6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_OX8C, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_U1DL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_PK5Y, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0058);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0028);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_OY2L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_WUAR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_39B7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FLandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_STAJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_S5TG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_EZ7B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_H91Y, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_UX8D, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_I9ZB, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_S9UX, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_WW5X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_JSLS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_X0Y5, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_KA7O, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_X73E, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0050);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_SOEE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_9I1D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_3VGS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_LU72, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_0ZYI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_CYSI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_61E8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0050);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_YCG9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0058);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_CRMO, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PreInfinityExtrap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PostInfinityExtrap, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, UnknownData_8NR2, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, DefaultValue, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0070);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0078);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_S551, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_P02B, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_2N75, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00A0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_Z8EU, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x02A8);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_APC4, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x0010);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_6BVI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_502F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FPrimitiveComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_1HU9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_D9QU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_5F1P, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_M3HJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_ESTG, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_SRHK, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_SKYO, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_V4SV, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0150);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_QOG6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x0028);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_A6JT, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_9W24, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_DSVZ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_GRWI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_8IO9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_5MOJ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_O4GZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_IFKX, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_4DXU, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_6UGR, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00A8);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, UnknownData_6PR4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0018);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0060);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_F8U6, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_V7G6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ATVP, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_VDG1, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WSX1, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x04E0);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_ZVWH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_VUJX, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_J3VK, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_2WQX, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0530);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_5DN9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x0540);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_LHK0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_MN8U, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0050);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_R3FY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_AI7X, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_4ZRE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_AYVW, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_3J41, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_02UP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_B9FI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x0010);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_V184, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x0010);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_DNVH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_ZS54, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_P9S9, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_SPK2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_MMHN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_0459, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_OWDQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_FKY7, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0080);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_H3FK, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_8MDL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_OLZH, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_DJ6W, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_5HC4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_M2B3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_NCEG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_FC8G, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_Z9BM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_43W6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_JAK3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_BBD3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_SLZB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_Q9ZP, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_MPFE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0068);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_H3XL, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0028);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_XSQX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, EvaluateGraphExposedInputs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0030);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_AN2X, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0040);
		}

		// struct FCompressedSegment
		TEST_METHOD(ScriptStruct__Engine__CompressedSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedSegment, UnknownData_2EL9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedSegment, 0x0010);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_HOXD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0050);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_5XS2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_QN43, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_X21C, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_898G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, UnknownData_IBBO, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_T4G4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_DO1X, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0550);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_AU6C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_1OGD, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_JTUO, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_CNSL, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0010);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_KE5F, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_Q0LX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, FloatValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, UnknownData_6O82, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0050);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_6ZMJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_ABIC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_JIS6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0014);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_OpacityMaskClipValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_BlendMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_ShadingModel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_DitheredLODTransition, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_CastDynamicShadowAsMasked, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_TwoSided, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_E4NM, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_KL0N, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_DFWT, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0014);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_ICVD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_YOG5, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x00F8);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_QCUF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_BO2X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_CENI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_SN9Q, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_RSE4, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_40I7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_0UIX, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_K5UF, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_JNWY, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_TWJQ, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_AS4G, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x02C0);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_B16I, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_XMMC, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_XLDI, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_XTPS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_29VW, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_0RL5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_XT2J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, UnknownData_M7BL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0030);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_G2XS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_EKT6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00A8);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_82KN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_KYI8, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_3B70, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_AT8A, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0018);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_HC44, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_XRYJ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_C1CL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_QG9N, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_VDBY, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, UnknownData_8VB5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0018);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, UnknownData_ECBO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x0010);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_61LF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, UnknownData_P5SA, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_L0KG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0028);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_DKFW, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_V5M4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_I1JZ, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_4DEP, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_Y0QL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0038);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0068);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_VBNF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_U501, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_LO9J, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_0GWK, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_1O8M, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, UnknownData_SR1T, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0028);
		}

		// struct FStaticComponentMaskParameter
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, bOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, UnknownData_PA44, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_83EP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, UnknownData_TNFZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x0010);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0068);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_DNRY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FLocalizedSubtitle
		TEST_METHOD(ScriptStruct__Engine__LocalizedSubtitle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, LanguageExt, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, Subtitles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, UnknownData_PVE6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSubtitle, 0x0028);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_2EPO, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_DLUU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x0010);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_AHFF, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_GL8Z, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_MXWA, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x0010);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_IWRG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0020);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0170);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x0470);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_T41R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_376M, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_9OIT, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_ORUG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0060);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_XG5Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_BLQL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_6LJ4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_LCGO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_M30Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_K3GC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_965C, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_HBRA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_FEUE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_NUEX, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0158);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_3FP4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0160);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_X1TV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_YZA3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_TFRA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_RWEW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0570);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_ZYF0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_HBTJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_DWX8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_FIMC, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0058);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_58BM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_BSEY, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_9VQE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0090);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInitialized, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpolatedResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0040);
		}

		// struct FStaticSwitchParameter
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, bOverride, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_RP23, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_6UOS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_66HS, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FStaticTerrainLayerWeightParameter
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_7XKI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_59O4, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_OHNZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_XWKO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0070);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_D77X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_7ZEF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_ES76, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_KV3L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_URYQ, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_KP95, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_PG8N, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0298);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_DEX1, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_2H22, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FStaticMaterialLayersParameter
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, bOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_WAGO, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_88MD, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_W94E, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_MBX0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0018);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, UnknownData_0VNV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0020);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_JZU7, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_FSQ0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_RR5T, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_BKP0, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_7CU8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_1JG1, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0048);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_WIYF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_A3VQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_5RIL, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_8DJI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_MSLA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x0020);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_QXWM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_FETM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_5VNY, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_3OJK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_B10K, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_9NCF, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_VTDP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0018);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_N3Q4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0058);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_HC72, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0058);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_TWIC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, UnknownData_MKZ4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x0010);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_ML8F, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_9FP0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_2UHC, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0028);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_Y47V, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0090);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_Z4KE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0080);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_CQTW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_CZ00, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_Y6HC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_RZWK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_XHLZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_RXYN, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0038);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_EZK6, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_HIO8, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_3ASL, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_9CWG, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_29A8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_ZS4T, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_Q91B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_0QH8, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_NXYC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, UnknownData_WIQ3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0020);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, UnknownData_B10P, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x0010);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_6VNO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_7Y6Y, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0020);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0050);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_IRY2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_U9N5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_JITU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x0010);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_7F04, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, UnknownData_VFF5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0018);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_QHAL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_COM9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_HEA5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_6FJ7, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_GUYD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_XTY7, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0010);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0018);
		}

		// struct FTTFloatTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0018);
		}

		// struct FTTVectorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0018);
		}

		// struct FTTLinearColorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0018);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_6TQV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0078);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_1E53, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_A2US, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0080);
		}

		// struct FStreamingTexturePrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTexturePrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, UnknownData_5Z3O, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTexturePrimitiveInfo, 0x0030);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_Q0Y0, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FStartAsyncSimulationFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartAsyncSimulationFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartAsyncSimulationFunction, UnknownData_PN59, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartAsyncSimulationFunction, 0x0058);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_YQMS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0058);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_KESU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0058);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_8K48, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_OR1M, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_IGDY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0010);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_JIXS, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_M9MH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_D9WI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_WQTE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_42US, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_P52G, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_0257, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bRecalculateNormals, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bGenerateUniqueLightmapUVs, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bKeepSymmetry, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bVisibilityAided, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bCullOccluded, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_C3IX, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_6QJ6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_B4XJ, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_5DAJ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_WYS2, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0040);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_YHJC, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_AMUD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_Q37I, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClassName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0068);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0014);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_RTXX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x00B0);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, UnknownData_E695, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x0010);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_NI4D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_YIKJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_9KEE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_V951, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x00F0);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_RR36, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_ILH4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_5WTF, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_YWE1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_0657, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_I44G, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_0XUD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_POKI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_OLVL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_DM3O, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_NMUQ, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_YIPN, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, ActualAlpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_LASP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x0068);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, GlobalWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_QCZK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00D8);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_YZ65, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x00A0);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_KXBO, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, CurrentState, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, ElapsedTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_XX75, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00E0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_WXIO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_DRT5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_JNSS, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_SubInput : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInput, UnknownData_IG2O, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInput, 0x0068);
		}

		// struct FAnimNode_SubInstance : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, Tag, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceToRun, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SubInstanceProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SourcePropertyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, DestPropertyNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, UnknownData_651M, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInstance, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_WKXO, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_P8EZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CacheFramesRemaining, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_LF3A, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0078);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_KU1Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0048);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0048);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_6VJL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_CR7A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_3LD6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_49CF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_F7J2, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_X9ZT, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_EHTH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_NUOF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0010);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0010);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0010);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0010);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, UnknownData_GOFU, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0018);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_QUM2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_62HP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_ILAW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_19JE, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_D9G4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_1FWI, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x0020);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_29CZ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x0068);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_102N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_CYO6, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_JL91, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00A0);
		}

		// struct FAudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_64B8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0038);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_ABQ8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0018);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_FQQW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0050);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_GI19, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_77C3, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_TS4J, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_VMRT, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x002C);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_B10Y, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_RLVI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_U0P7, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_1W1U, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, UnknownData_Q2RV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x0020);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_UUWX, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0070);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_1BAO, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_NE8X, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_GHJO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x00A0);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_LTGK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bNormalMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bMetallicMap, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_W80B, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bRoughnessMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_PS0X, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bSpecularMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_HZX3, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bEmissiveMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMap, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_WH3C, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMaskMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_51Q3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bAmbientOcclusionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_L083, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_03FG, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x008C);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_GQ7L, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_GM7F, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_DWGH, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x0134);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_45ZD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_4AQR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_TINE, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_CT2U, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_ANFW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_TH03, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_4B6B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_QGY3, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_M30J, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_09YJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_K4XK, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_F6NT, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_4FSD, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_71I4, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_T9YJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_JBDR, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_X5LL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_YANL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_ABBF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0028);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_VJ6L, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x0020);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_KNTI, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0060);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0080);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_UJLO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_183X, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0020);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_BKYY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_GNP0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x0010);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_1GJX, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0024);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_J285, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_KQDK, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_84DX, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_8CH1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_GUX2, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_SMEK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_D2TB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_TVTF, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_75VL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_PZDQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, UnknownData_J88X, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x0010);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_FPEY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_I7VH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_G0EN, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_UV24, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_V9DC, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_6VIY, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_HN4U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x002C);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00A0);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x0030);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_1JFU, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_IZ31, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_0ETY, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_EB44, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_GDMB, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_45BR, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_KU15, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_6SRT, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_MLDR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_LZW7, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_I1G0, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, UnknownData_DWU6, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0110);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_RRMX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_5ZGF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0018);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_839G, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0050);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_IRTQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x0010);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_1P73, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x0010);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_L0JE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0078);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_DCIJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_1LJF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_O1XV, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_UPJ0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, UnknownData_499M, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x0010);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, UnknownData_IF4O, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0018);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, UnknownData_OUUW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x0010);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_S3AL, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x06F0);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_NKYM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_KCT3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_LWES, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_VEYX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_ZHSX, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_KE7E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_31YT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_5FJK, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00A0);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_GI3Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6H75, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_Q75V, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_J5MN, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0050);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_HN8D, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_OJ60, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_HVKJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_EUXD, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_1SCF, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_KXAB, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_5GYJ, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_I26P, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_X106, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_IRT0, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_10BA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_5GDC, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_2AIL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, UnknownData_UBUD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x0010);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_NFSX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_EE9A, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_AQ28, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_DF4A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_BF5E, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, UnknownData_WAZ6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0018);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FVirtualTextureLayer
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bCompressed, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, bHasAlpha, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureLayer, CompressionSettings, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureLayer, 0x0004);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_R79Q, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_48YY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_Y58J, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_BOJ1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_OU8Z, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_CU6M, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_Z1AH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_DPYH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_UKMJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_LMA7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_FS6X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_A38E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_M4UE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_URHX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_PEV2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D8);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_T232, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_JLHA, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_KB4X, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_WAEZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_LPY8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_FGWY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_J610, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_H9X0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_B0JD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_2QCY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0028);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_W83L, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x0020);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_96RU, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_PSGY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_94LE, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0010);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_1BZU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_N6DX, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_R6SP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportNormalMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportMetallicMap, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportRoughnessMap, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportSpecularMap, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCalculateCorrectLODModel, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_H5K6, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bOverrideTransferDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_3OEV, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseHardAngleThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_EG50, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_6QLQ, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bComputeLightMapResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bRecalculateNormals, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bBakeVertexData, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseLandscapeCulling, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowAdjacency, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowDistanceField, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bReuseMeshLightmapUVs, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCreateCollision, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bAllowVertexColors, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bGenerateLightmapUVs, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_UGTT, 0x00D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00D4);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bGenerateLightMapUV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_CN86, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bComputedLightMapResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bImportVertexColors, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bPivotPointAtZero, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergePhysicsData, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeMaterials, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_97KV, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bBakeVertexDataToMesh, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseVertexDataForBakingMaterial, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseTextureBinning, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bReuseMeshLightmapUVs, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeEquivalentMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_MTGL, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bCalculateCorrectLODModel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_HHW0, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, ExportSpecificLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseLandscapeCulling, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bIncludeImposters, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bAllowDistanceField, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportNormalMap, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportMetallicMap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportRoughnessMap, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportSpecularMap, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_66JR, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MergedMaterialAtlasResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_X5YF, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00CC);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_5I6K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bUseOverrideDrawDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bSimplifyMesh, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_SZVK, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bOnlyGenerateClustersForVolumes, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bReusePreviousLevelClusters, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_N9N3, 0x01BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x01C0);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_7O75, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_DSIU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_ATSY, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x0054);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_9PBC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0040);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_GH9L, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_UR3L, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_NDW6, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x01C8);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_0B74, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_6AI4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_7G6K, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_CI7S, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_OMPD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_GCON, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_Q2JH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FUI_RoomDetailsData
		TEST_METHOD(UserDefinedStruct__UI_RoomDetailsData__UI_RoomDetailsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, Sport_39_7722867D4915DB3AF3922F8794F9FD44, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, UnknownData_YFBP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, ButtonID_51_F5C911C04974355111097A8116852FCD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, RoomNumber_45_47748C9B482331E2E47F7FB191DD1BC9, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, RoomName_46_BB7D7B5A49C64D0B478D039CCF4C6D59, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, RoomDescription_47_797A1CF747651403A55152ABF6225C6A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, RoomImageMaterial_48_D200CD3049AEAFC8BC5A0783F06FCCC5, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, ArenaTypeLevel_58_FA43033F42F0D7D85BBFE6A2B4076B45, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, CompletedLevel_60_A7B7044B48137ECB05B38B8331E8C926, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, WonLevel_62_531F699D41C1875C6341C69F4D777F86, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, UnknownData_RSGF, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_RoomDetailsData, PlayerScore_68_0F1D2EE6463E669EA3BCEA946255EEFA, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUI_RoomDetailsData, 0x0068);
		}

		// struct FMusicEntry
		TEST_METHOD(UserDefinedStruct__MusicEntry__MusicEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicEntry, Sound_7_A7E8D69047A8127B947E09B830169878, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMusicEntry, Volume_5_1BE60AFA47E1C54F687B668D11849D5B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMusicEntry, 0x000C);
		}

		// struct FSkinColorMapEntry
		TEST_METHOD(UserDefinedStruct__SkinColorMapEntry__SkinColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, SkinColorBase_2_90AD60704C4B5D0DB7AF3C9AFAA013F4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, SkinColorShadow_4_37B7E7F4499161E9F3068E8A1EDF3B78, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, EarlyAccess_8_287D7C1E40E34F90F6A1FFA13E6D258C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, MaterialOverride_11_EB5C7FEF4A872779A2BBA7BC645D5898, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, AiDisabled_6_9573FA5E4E90C9398E335FA84A90A6EC, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, UnknownData_80L7, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinColorMapEntry, SkinPack_14_2F52F7A44FDCB5455DCE5FA7A35093F8, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinColorMapEntry, 0x0020);
		}

		// struct FTN_AnnouncerBallVO
		TEST_METHOD(UserDefinedStruct__TN_AnnouncerBallVO__TN_AnnouncerBallVO)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTN_AnnouncerBallVO, BallClass_24_2C1EC93B467CF9C44A27488A94772286, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTN_AnnouncerBallVO, BallVO_26_6BD10EF5411DE62FC80641A4CCBB58AD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTN_AnnouncerBallVO, 0x0030);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0008);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, UnknownData_DTU8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0018);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_3UXP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_MRAH, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_QAVG, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_WFXY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_FCJ5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_9BDF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_ZN74, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_57IP, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_EIP9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_5JYK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_Y9K0, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_9P64, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_P43D, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_7KW7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_X9UU, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_BZXP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_FBLZ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_9J4Q, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_5BXQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_STCN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_OI1A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_3ULL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_WTNA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_QHRD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_8PXL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B0);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_TS9B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_OWXK, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FBW_ScrambleList
		TEST_METHOD(UserDefinedStruct__BW_ScrambleList__BW_ScrambleList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_ScrambleList, BallClasses_12_7BE748624B84D64BE916E2B6918CCBF8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_ScrambleList, BowlingLaneList_4_E1D6869B4BC1E722A1E9E78CBA87ED08, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBW_ScrambleList, RandomizeLaneOrder_9_EBF8B69B4E865C8EEC85E6B5215E6B32, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBW_ScrambleList, 0x0031);
		}

		// struct FPlatformMaterialDefinition
		TEST_METHOD(UserDefinedStruct__PlatformMaterialDefinition__PlatformMaterialDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformMaterialDefinition, ScramPlatform_2_DFE06AC54824EBEB5265F687F5E27E4E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformMaterialDefinition, UnknownData_X1NV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformMaterialDefinition, Materials_13_9C79F6AA40611B7ED983C3B3B26168C4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformMaterialDefinition, 0x0018);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FMultiplayerData
		TEST_METHOD(UserDefinedStruct__MultiplayerData__MultiplayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, PlayerName_35_47748C9B482331E2E47F7FB191DD1BC9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, PlayerScore_37_BB7D7B5A49C64D0B478D039CCF4C6D59, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SwingHand_53_2F58B95A4A28066920C06784A80396B4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, ThrowingHand_55_2253D4BE4AFDE2A60EB6EABB02267951, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, BattingSide_58_3C2350FE4335A9CDF892E8AABEEF96DE, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelTennis_61_EDD4B6544D800CE0C0BC599D1EB7113B, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelPitching_65_32AC18C7459DE2E5635FE285938449B2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelCatching_69_7649DE304A455150737A5E9DC385B2D8, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelBatting_66_57898BF1402D751237882DA1906ED343, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelBowling_67_A8B8628C46E171BE41C496B7EDB5CE94, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelBattingHasBeenSet_72_BCA9A8FF49ABD2838E1962BCEBC7DD19, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMultiplayerData, SkillLevelBowlingHasBeenSet_74_119B538D449E0C53DC93ADA114F8064A, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMultiplayerData, 0x001E);
		}

		// struct FSkinPackEntry
		TEST_METHOD(UserDefinedStruct__SkinPackEntry__SkinPackEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinPackEntry, DisplayName_2_DCE785EC46E92152A73405BBBCFD2A51, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinPackEntry, Requirement_5_D86C0F774F6463EDF58630968D589171, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinPackEntry, 0x001C);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_M7H7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_5IGM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_VVYQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x0088);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_F83Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_TAS8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_AF8X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_M02Y, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_MSDE, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, UnknownData_BFM6, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, Bitfield, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0008);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPtr, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x0010);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x00F0);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_ELZW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0040);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_CH28, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_G91I, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0060);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x01D8);
		}

		// struct FUI_FriendStatus
		TEST_METHOD(UserDefinedStruct__UI_FriendStatus__UI_FriendStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_FriendStatus, DisplayName_6_1FDB3E09443E0D3267E9DD8686886900, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_FriendStatus, InvitePending_3_DD2A97D842E78B0B90F4679D0CDF9650, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUI_FriendStatus, Online_5_A0354120472A4276CF0BDFA8B2CDF0A8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUI_FriendStatus, 0x0012);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_FXVO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FAvatarDefinition
		TEST_METHOD(UserDefinedStruct__AvatarDefinition__AvatarDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, Name_6_4E03D7D84315F6883108479F2A94F009, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, SkeletalMesh_34_D30BEF1B4CD8DE04417712AB55AFA2F5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, AlternateStaticMesh_35_5AE3F12547494F6141B6E39C620B9D91, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, Requirement_27_5614A6134CCA62FEA28D64A0750DAD81, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, EarlyAccess_33_1D0343714CC51687303BFEB34695DD15, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarDefinition, AiDisabled_25_37E9B3B14148F8C12DB3D891D76B78B8, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarDefinition, 0x006E);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_5BJR, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_JXS9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_7M3R, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_5F44, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_YL6M, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_8MXA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_3V89, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_EKKL, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_XN2U, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_BN6E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_AKCL, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_T6ZP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__PacketHandler__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_5EZ6, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x0010);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_2BLU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_ESRU, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FBB_ImbuingChance
		TEST_METHOD(UserDefinedStruct__BB_ImbuingChance__BB_ImbuingChance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ImbuingChance, InstrumentType_26_C5429CC24359CE2B10CAFBA244D5998D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ImbuingChance, UnknownData_L1TY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBB_ImbuingChance, Chance_30_F017C682490F7D93470B3BA09746566F, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBB_ImbuingChance, 0x0008);
		}

		// struct FHmdUserProfileField
		TEST_METHOD(ScriptStruct__OculusHMD__HmdUserProfileField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfileField, FieldValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfileField, 0x0020);
		}

		// struct FHmdUserProfile
		TEST_METHOD(ScriptStruct__OculusHMD__HmdUserProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, Gender, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, PlayerHeight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, EyeHeight, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, IPD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, NeckToEyeDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, UnknownData_LW3G, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHmdUserProfile, ExtraFields, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHmdUserProfile, 0x0048);
		}

		// struct FGuardianTestResult
		TEST_METHOD(ScriptStruct__OculusHMD__GuardianTestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, IsTriggering, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, DeviceType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, UnknownData_O9C1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestPoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuardianTestResult, ClosestPointNormal, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuardianTestResult, 0x0020);
		}

		// struct FOculusSplashDesc
		TEST_METHOD(ScriptStruct__OculusHMD__OculusSplashDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TexturePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_NHI6, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TransformInMeters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, QuadSizeInMeters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_DGUG, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, DeltaRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TextureOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, TextureScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, bNoAlphaChannel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOculusSplashDesc, UnknownData_QQPH, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOculusSplashDesc, 0x00A0);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0018);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_990G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_CPT3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00A0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_GVKC, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_OX0J, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_JIHI, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0008);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_HYI4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_6WIX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_9VFC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_173G, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_Y4YZ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00C8);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_XZOP, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_O2WI, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_UNOI, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_YSPA, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_DY1Y, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_LVA3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_R18Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_R0ND, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_4C9I, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_IBOQ, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioStartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_RZ7M, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, SectionStartTimeSeconds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioVolumeCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, RowIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, bOverrideAttenuation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_42FV, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AttenuationSettings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnQueueSubtitles, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioFinished, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioPlaybackPercent, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplateData, 0x0198);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x01B8);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_653J, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_BIM9, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_VUHA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_2DEX, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_ID0Q, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_DWFX, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_CW6K, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0040);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventFunctions, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_ZTJG, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_VPID, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0058);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_T6YE, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0058);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_T2ZM, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_8WE5, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_LCTD, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00D0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x00F0);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_ETRH, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_K758, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_AZL7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FAnnouncerSequence
		TEST_METHOD(UserDefinedStruct__AnnouncerSequence__AnnouncerSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequence, Audio_13_AE0AC07B42B2186C1E52A58C31DFD2D3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequence, InitialExpression_5_486E534E4390A6440396F185650B5A02, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequence, UnknownData_NF46, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequence, ExpressionSequence_9_7FFC535E45569B4FAE617F9B43FC98EA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnnouncerSequence, SitIdleOnComplete_11_5DFDADA540E3322E2E020C9BA95F4FB2, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnnouncerSequence, 0x0041);
		}
	};
}
